// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: zKVxLfUZw9WN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicBreadcrumb.module.css"; // plasmic-import: zKVxLfUZw9WN/css

createPlasmicElementProxy;

export type PlasmicBreadcrumb__VariantMembers = {
  noRoot: "noRoot";
};
export type PlasmicBreadcrumb__VariantsArgs = {
  noRoot?: SingleBooleanChoiceArg<"noRoot">;
};
type VariantPropType = keyof PlasmicBreadcrumb__VariantsArgs;
export const PlasmicBreadcrumb__VariantProps = new Array<VariantPropType>(
  "noRoot"
);

export type PlasmicBreadcrumb__ArgsType = {};
type ArgPropType = keyof PlasmicBreadcrumb__ArgsType;
export const PlasmicBreadcrumb__ArgProps = new Array<ArgPropType>();

export type PlasmicBreadcrumb__OverridesType = {
  breadcrumb?: Flex__<"div">;
  mainPage?: Flex__<"div">;
  mainValue?: Flex__<"label">;
  rootPage?: Flex__<"div">;
  rootValue?: Flex__<"div">;
  subPage?: Flex__<"div">;
  subPageValue?: Flex__<"label">;
};

export interface DefaultBreadcrumbProps {
  noRoot?: SingleBooleanChoiceArg<"noRoot">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBreadcrumb__RenderFunc(props: {
  variants: PlasmicBreadcrumb__VariantsArgs;
  args: PlasmicBreadcrumb__ArgsType;
  overrides: PlasmicBreadcrumb__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noRoot",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noRoot
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"breadcrumb"}
      data-plasmic-override={overrides.breadcrumb}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.breadcrumb
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"mainPage"}
        data-plasmic-override={overrides.mainPage}
        hasGap={true}
        className={classNames(projectcss.all, sty.mainPage)}
      >
        <label
          data-plasmic-name={"mainValue"}
          data-plasmic-override={overrides.mainValue}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.mainValue,
            { [sty.mainValuenoRoot]: hasVariant($state, "noRoot", "noRoot") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  const mainPage = window.location.pathname.split("/")[1];
                  const mainPageName = mainPage
                    ? mainPage.charAt(0).toUpperCase() +
                      mainPage.slice(1).toLowerCase()
                    : "Dashboard";
                  return mainPageName;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Main Page";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </label>
      </Stack__>
      <div
        data-plasmic-name={"rootPage"}
        data-plasmic-override={overrides.rootPage}
        className={classNames(projectcss.all, sty.rootPage, {
          [sty.rootPagenoRoot]: hasVariant($state, "noRoot", "noRoot")
        })}
      >
        {(() => {
          try {
            return (
              window.location.pathname === "/" ||
              window.location.pathname === "" ||
              (window.location.pathname.split("/").length > 2 &&
                !!window.location.pathname.split("/")[2])
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"rootValue"}
            data-plasmic-override={overrides.rootValue}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.rootValue,
              { [sty.rootValuenoRoot]: hasVariant($state, "noRoot", "noRoot") }
            )}
          >
            <Trans__>{"/"}</Trans__>
          </div>
        ) : null}
      </div>
      {(
        hasVariant($state, "noRoot", "noRoot")
          ? true
          : (() => {
              try {
                return (
                  window.location.pathname === "/" ||
                  window.location.pathname === "" ||
                  (window.location.pathname.split("/").length > 2 &&
                    !!window.location.pathname.split("/")[2])
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"subPage"}
          data-plasmic-override={overrides.subPage}
          hasGap={true}
          className={classNames(projectcss.all, sty.subPage, {
            [sty.subPagenoRoot]: hasVariant($state, "noRoot", "noRoot")
          })}
        >
          <label
            data-plasmic-name={"subPageValue"}
            data-plasmic-override={overrides.subPageValue}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subPageValue,
              {
                [sty.subPageValuenoRoot]: hasVariant($state, "noRoot", "noRoot")
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    const subPage = window.location.pathname.split("/")[2];
                    const subPageName =
                      window.location.pathname === "/" || !subPage
                        ? "Overview"
                        : subPage.charAt(0).toUpperCase() +
                          subPage.slice(1).toLowerCase();
                    return subPageName;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Sub Page";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </label>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  breadcrumb: [
    "breadcrumb",
    "mainPage",
    "mainValue",
    "rootPage",
    "rootValue",
    "subPage",
    "subPageValue"
  ],
  mainPage: ["mainPage", "mainValue"],
  mainValue: ["mainValue"],
  rootPage: ["rootPage", "rootValue"],
  rootValue: ["rootValue"],
  subPage: ["subPage", "subPageValue"],
  subPageValue: ["subPageValue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  breadcrumb: "div";
  mainPage: "div";
  mainValue: "label";
  rootPage: "div";
  rootValue: "div";
  subPage: "div";
  subPageValue: "label";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBreadcrumb__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBreadcrumb__VariantsArgs;
    args?: PlasmicBreadcrumb__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBreadcrumb__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBreadcrumb__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBreadcrumb__ArgProps,
          internalVariantPropNames: PlasmicBreadcrumb__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBreadcrumb__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "breadcrumb") {
    func.displayName = "PlasmicBreadcrumb";
  } else {
    func.displayName = `PlasmicBreadcrumb.${nodeName}`;
  }
  return func;
}

export const PlasmicBreadcrumb = Object.assign(
  // Top-level PlasmicBreadcrumb renders the root element
  makeNodeComponent("breadcrumb"),
  {
    // Helper components rendering sub-elements
    mainPage: makeNodeComponent("mainPage"),
    mainValue: makeNodeComponent("mainValue"),
    rootPage: makeNodeComponent("rootPage"),
    rootValue: makeNodeComponent("rootValue"),
    subPage: makeNodeComponent("subPage"),
    subPageValue: makeNodeComponent("subPageValue"),

    // Metadata about props expected for PlasmicBreadcrumb
    internalVariantProps: PlasmicBreadcrumb__VariantProps,
    internalArgProps: PlasmicBreadcrumb__ArgProps
  }
);

export default PlasmicBreadcrumb;
/* prettier-ignore-end */
