// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: rdTSMLv5knL6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dashboard from "../../Dashboard"; // plasmic-import: xrHIipmjGkuW/component
import PageInfo from "../../PageInfo"; // plasmic-import: -5yQM3hZscI3/component
import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component
import MetricsCard from "../../MetricsCard"; // plasmic-import: Xjkst95OHMzJ/component
import PercentageBadge from "../../PercentageBadge"; // plasmic-import: wOG229KbexC2/component
import SectionMetrics from "../../SectionMetrics"; // plasmic-import: TXVIWb_8PPG_/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import Select from "../../Select"; // plasmic-import: emalQdNAiu4w/component
import CustomTable from "../../CustomTable"; // plasmic-import: SyYLCRWlXb0u/component

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicOverview.module.css"; // plasmic-import: rdTSMLv5knL6/css

import DownloadSvgIcon from "./icons/PlasmicIcon__DownloadSvg"; // plasmic-import: w6NPFY6kUz40/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: OOawLNcAQduZ/icon
import Icon46Icon from "./icons/PlasmicIcon__Icon46"; // plasmic-import: JTYzgKNYvC8D/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: Wu8zjvWtUVDX/icon

createPlasmicElementProxy;

export type PlasmicOverview__VariantMembers = {};
export type PlasmicOverview__VariantsArgs = {};
type VariantPropType = keyof PlasmicOverview__VariantsArgs;
export const PlasmicOverview__VariantProps = new Array<VariantPropType>();

export type PlasmicOverview__ArgsType = {};
type ArgPropType = keyof PlasmicOverview__ArgsType;
export const PlasmicOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicOverview__OverridesType = {
  home?: Flex__<"div">;
  dashboard?: Flex__<typeof Dashboard>;
  pageInfo?: Flex__<typeof PageInfo>;
  hiKatiePena?: Flex__<"div">;
  welcomeBackToRhom?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  keyMetrics?: Flex__<"section">;
  percentageBadge?: Flex__<typeof PercentageBadge>;
  keyMetrics2?: Flex__<"section">;
  chart?: Flex__<typeof SimpleChart>;
  keyMetrics3?: Flex__<"section">;
  customTable?: Flex__<typeof CustomTable>;
};

export interface DefaultOverviewProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOverview__RenderFunc(props: {
  variants: PlasmicOverview__VariantsArgs;
  args: PlasmicOverview__ArgsType;
  overrides: PlasmicOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "percentageBadge.negative",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "negative"
      },
      {
        path: "percentageBadge2.negative",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "percentageBadge3.negative",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "percentageBadge4.negative",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "week"
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "week"
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "week"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOverview.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOverview.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOverview.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicOverview.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicOverview.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicOverview.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"home"}
        data-plasmic-override={overrides.home}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.home
        )}
      >
        <Dashboard
          data-plasmic-name={"dashboard"}
          data-plasmic-override={overrides.dashboard}
          className={classNames("__wab_instance", sty.dashboard)}
          contentSection={
            <React.Fragment>
              <PageInfo
                data-plasmic-name={"pageInfo"}
                data-plasmic-override={overrides.pageInfo}
                action={
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"green"}
                    shape={"rounded"}
                    showStartIcon={true}
                    size={"compact"}
                    startIcon={
                      <DownloadSvgIcon
                        className={classNames(projectcss.all, sty.svg__h5Ieh)}
                        role={"img"}
                      />
                    }
                    submitsForm={false}
                  >
                    <Trans__>{"Download"}</Trans__>
                  </Button>
                }
                className={classNames("__wab_instance", sty.pageInfo)}
                description={
                  <div
                    data-plasmic-name={"welcomeBackToRhom"}
                    data-plasmic-override={overrides.welcomeBackToRhom}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.welcomeBackToRhom
                    )}
                  >
                    <Trans__>{"Quick summary of your main insights."}</Trans__>
                  </div>
                }
                isAction={true}
                title={
                  <div
                    data-plasmic-name={"hiKatiePena"}
                    data-plasmic-override={overrides.hiKatiePena}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.hiKatiePena
                    )}
                  >
                    <Trans__>{"Overview"}</Trans__>
                  </div>
                }
              />

              <Stack__
                as={"section"}
                data-plasmic-name={"keyMetrics"}
                data-plasmic-override={overrides.keyMetrics}
                hasGap={true}
                className={classNames(projectcss.all, sty.keyMetrics)}
              >
                <MetricsCard
                  className={classNames(
                    "__wab_instance",
                    sty.metricsCard__uG2Sv
                  )}
                  percentageBadge2={
                    <PercentageBadge
                      data-plasmic-name={"percentageBadge"}
                      data-plasmic-override={overrides.percentageBadge}
                      className={classNames(
                        "__wab_instance",
                        sty.percentageBadge
                      )}
                      negative={generateStateValueProp($state, [
                        "percentageBadge",
                        "negative"
                      ])}
                      onNegativeChange={generateStateOnChangeProp($state, [
                        "percentageBadge",
                        "negative"
                      ])}
                    />
                  }
                  statisticType={<Trans__>{"New visitors"}</Trans__>}
                  tooltip={
                    "Portion of visitors who visited your site for the first time in this timeframe"
                  }
                />

                <MetricsCard
                  className={classNames(
                    "__wab_instance",
                    sty.metricsCard__yu49
                  )}
                  icon={
                    <Icon46Icon
                      className={classNames(projectcss.all, sty.svg__kRGhR)}
                      role={"img"}
                    />
                  }
                  statisticType={<Trans__>{"Traffic Source"}</Trans__>}
                  tooltip={
                    "Channel (e.g. social, paid, search) that brought in the most visitors to your site"
                  }
                />

                <MetricsCard
                  className={classNames(
                    "__wab_instance",
                    sty.metricsCard__pVu4V
                  )}
                  icon={
                    <Icon47Icon
                      className={classNames(projectcss.all, sty.svg__n6Fp)}
                      role={"img"}
                    />
                  }
                  statisticType={<Trans__>{"Active Users"}</Trans__>}
                />

                <MetricsCard
                  className={classNames(
                    "__wab_instance",
                    sty.metricsCard__y8Tn
                  )}
                />
              </Stack__>
              <Stack__
                as={"section"}
                data-plasmic-name={"keyMetrics2"}
                data-plasmic-override={overrides.keyMetrics2}
                hasGap={true}
                className={classNames(projectcss.all, sty.keyMetrics2)}
              >
                <SectionMetrics
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetrics__pk7VY
                  )}
                  content={
                    <SimpleChart
                      data-plasmic-name={"chart"}
                      data-plasmic-override={overrides.chart}
                      className={classNames("__wab_instance", sty.chart)}
                      data={[
                        { region: "APAC", revenue: 3294, spend: 2675 },
                        { region: "EMEA", revenue: 3245, spend: 3895 },
                        { region: "LATAM", revenue: 2165, spend: 3498 },
                        { region: "AMER", revenue: 3215, spend: 1656 }
                      ]}
                      direction={"vertical"}
                      interactive={true}
                      stacked={false}
                      type={"bar"}
                    />
                  }
                  isAction={true}
                />

                <SectionMetrics
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetrics__socan
                  )}
                  content={null}
                />
              </Stack__>
              <Stack__
                as={"section"}
                data-plasmic-name={"keyMetrics3"}
                data-plasmic-override={overrides.keyMetrics3}
                hasGap={true}
                className={classNames(projectcss.all, sty.keyMetrics3)}
              >
                <SectionMetrics
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetrics__uvuSa
                  )}
                  content={
                    <CustomTable
                      data-plasmic-name={"customTable"}
                      data-plasmic-override={overrides.customTable}
                      className={classNames("__wab_instance", sty.customTable)}
                      noData={true}
                      topBar={true}
                    />
                  }
                />
              </Stack__>
            </React.Fragment>
          }
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "dashboard",
    "pageInfo",
    "hiKatiePena",
    "welcomeBackToRhom",
    "button",
    "keyMetrics",
    "percentageBadge",
    "keyMetrics2",
    "chart",
    "keyMetrics3",
    "customTable"
  ],
  dashboard: [
    "dashboard",
    "pageInfo",
    "hiKatiePena",
    "welcomeBackToRhom",
    "button",
    "keyMetrics",
    "percentageBadge",
    "keyMetrics2",
    "chart",
    "keyMetrics3",
    "customTable"
  ],
  pageInfo: ["pageInfo", "hiKatiePena", "welcomeBackToRhom", "button"],
  hiKatiePena: ["hiKatiePena"],
  welcomeBackToRhom: ["welcomeBackToRhom"],
  button: ["button"],
  keyMetrics: ["keyMetrics", "percentageBadge"],
  percentageBadge: ["percentageBadge"],
  keyMetrics2: ["keyMetrics2", "chart"],
  chart: ["chart"],
  keyMetrics3: ["keyMetrics3", "customTable"],
  customTable: ["customTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  dashboard: typeof Dashboard;
  pageInfo: typeof PageInfo;
  hiKatiePena: "div";
  welcomeBackToRhom: "div";
  button: typeof Button;
  keyMetrics: "section";
  percentageBadge: typeof PercentageBadge;
  keyMetrics2: "section";
  chart: typeof SimpleChart;
  keyMetrics3: "section";
  customTable: typeof CustomTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOverview__VariantsArgs;
    args?: PlasmicOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOverview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOverview__ArgProps,
          internalVariantPropNames: PlasmicOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicOverview";
  } else {
    func.displayName = `PlasmicOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicOverview = Object.assign(
  // Top-level PlasmicOverview renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    dashboard: makeNodeComponent("dashboard"),
    pageInfo: makeNodeComponent("pageInfo"),
    hiKatiePena: makeNodeComponent("hiKatiePena"),
    welcomeBackToRhom: makeNodeComponent("welcomeBackToRhom"),
    button: makeNodeComponent("button"),
    keyMetrics: makeNodeComponent("keyMetrics"),
    percentageBadge: makeNodeComponent("percentageBadge"),
    keyMetrics2: makeNodeComponent("keyMetrics2"),
    chart: makeNodeComponent("chart"),
    keyMetrics3: makeNodeComponent("keyMetrics3"),
    customTable: makeNodeComponent("customTable"),

    // Metadata about props expected for PlasmicOverview
    internalVariantProps: PlasmicOverview__VariantProps,
    internalArgProps: PlasmicOverview__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Overview",
      description: "Quick summary of your main insights.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOverview;
/* prettier-ignore-end */
