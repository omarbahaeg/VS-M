// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: xrHIipmjGkuW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Sidebar from "../../Sidebar"; // plasmic-import: MaimrxZZ2uDo/component
import Header from "../../Header"; // plasmic-import: zd496FfthYEg/component
import RightBarToggle from "../../RightBarToggle"; // plasmic-import: 7-guXMnuxTk_/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: gWWU5Ob64_0l/component
import NotificationButton from "../../NotificationButton"; // plasmic-import: KnYNZm1t2IR5/component
import MessagesButton from "../../MessagesButton"; // plasmic-import: Ir4fGGB2J2Ay/component
import HomeButton from "../../HomeButton"; // plasmic-import: vc4QrCJM7nhW/component
import SidebarToggleButton from "../../SidebarToggleButton"; // plasmic-import: vp-0ZJI-DQym/component
import PageInfo from "../../PageInfo"; // plasmic-import: -5yQM3hZscI3/component
import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component
import Footer from "../../Footer"; // plasmic-import: dIME4mUiH-Rp/component
import RightBar from "../../RightBar"; // plasmic-import: pW9ClsR7IfI0/component

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: xrHIipmjGkuW/css

import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: qKMzzxYWCT9r/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon

createPlasmicElementProxy;

export type PlasmicDashboard__VariantMembers = {};
export type PlasmicDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboard__VariantsArgs;
export const PlasmicDashboard__VariantProps = new Array<VariantPropType>();

export type PlasmicDashboard__ArgsType = {
  contentSection?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDashboard__ArgsType;
export const PlasmicDashboard__ArgProps = new Array<ArgPropType>(
  "contentSection"
);

export type PlasmicDashboard__OverridesType = {
  app?: Flex__<"div">;
  sidebar?: Flex__<typeof Sidebar>;
  body?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  rightBarToggle?: Flex__<typeof RightBarToggle>;
  messagesButton?: Flex__<typeof MessagesButton>;
  sidebarToggleButton?: Flex__<typeof SidebarToggleButton>;
  content?: Flex__<"div">;
  contentBody?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  rightBar?: Flex__<typeof RightBar>;
  overlay?: Flex__<"section">;
};

export interface DefaultDashboardProps {
  contentSection?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props: {
  variants: PlasmicDashboard__VariantsArgs;
  args: PlasmicDashboard__ArgsType;
  overrides: PlasmicDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "rightBarToggle.collapsed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebar.isVisible",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <div
      data-plasmic-name={"app"}
      data-plasmic-override={overrides.app}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.app
      )}
    >
      <Sidebar
        data-plasmic-name={"sidebar"}
        data-plasmic-override={overrides.sidebar}
        className={classNames("__wab_instance", sty.sidebar)}
        isVisible={generateStateValueProp($state, ["sidebar", "isVisible"])}
        onIsVisibleChange={generateStateOnChangeProp($state, [
          "sidebar",
          "isVisible"
        ])}
      />

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
          messagesButton={
            <MessagesButton
              data-plasmic-name={"messagesButton"}
              data-plasmic-override={overrides.messagesButton}
              className={classNames("__wab_instance", sty.messagesButton)}
            />
          }
          rightBarToggle2={
            <RightBarToggle
              data-plasmic-name={"rightBarToggle"}
              data-plasmic-override={overrides.rightBarToggle}
              className={classNames("__wab_instance", sty.rightBarToggle)}
              collapsed={generateStateValueProp($state, [
                "rightBarToggle",
                "collapsed"
              ])}
              onCollapsedChange={generateStateOnChangeProp($state, [
                "rightBarToggle",
                "collapsed"
              ])}
            />
          }
        >
          <SidebarToggleButton
            data-plasmic-name={"sidebarToggleButton"}
            data-plasmic-override={overrides.sidebarToggleButton}
            className={classNames("__wab_instance", sty.sidebarToggleButton)}
            onClick={async event => {
              const $steps = {};

              $steps["updateSidebarIsVisible"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["sidebar", "isVisible"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSidebarIsVisible"] != null &&
                typeof $steps["updateSidebarIsVisible"] === "object" &&
                typeof $steps["updateSidebarIsVisible"].then === "function"
              ) {
                $steps["updateSidebarIsVisible"] = await $steps[
                  "updateSidebarIsVisible"
                ];
              }
            }}
          />
        </Header>
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"contentBody"}
            data-plasmic-override={overrides.contentBody}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentBody)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <PageInfo
                    className={classNames(
                      "__wab_instance",
                      sty.pageInfo__cnhQu
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__e0C5T)}
                  />
                </React.Fragment>
              ),
              value: args.contentSection
            })}
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </Stack__>
      </div>
      {(
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : hasVariant(globalVariants, "screen", "tablet")
          ? true
          : (() => {
              try {
                return $state.rightBarToggle.collapsed === true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <RightBar
          data-plasmic-name={"rightBar"}
          data-plasmic-override={overrides.rightBar}
          className={classNames("__wab_instance", sty.rightBar)}
        />
      ) : null}
      <section
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        className={classNames(projectcss.all, sty.overlay)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  app: [
    "app",
    "sidebar",
    "body",
    "header",
    "rightBarToggle",
    "messagesButton",
    "sidebarToggleButton",
    "content",
    "contentBody",
    "footer",
    "rightBar",
    "overlay"
  ],
  sidebar: ["sidebar"],
  body: [
    "body",
    "header",
    "rightBarToggle",
    "messagesButton",
    "sidebarToggleButton",
    "content",
    "contentBody",
    "footer"
  ],
  header: ["header", "rightBarToggle", "messagesButton", "sidebarToggleButton"],
  rightBarToggle: ["rightBarToggle"],
  messagesButton: ["messagesButton"],
  sidebarToggleButton: ["sidebarToggleButton"],
  content: ["content", "contentBody", "footer"],
  contentBody: ["contentBody"],
  footer: ["footer"],
  rightBar: ["rightBar"],
  overlay: ["overlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  app: "div";
  sidebar: typeof Sidebar;
  body: "div";
  header: typeof Header;
  rightBarToggle: typeof RightBarToggle;
  messagesButton: typeof MessagesButton;
  sidebarToggleButton: typeof SidebarToggleButton;
  content: "div";
  contentBody: "div";
  footer: typeof Footer;
  rightBar: typeof RightBar;
  overlay: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboard__VariantsArgs;
    args?: PlasmicDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "app") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("app"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    body: makeNodeComponent("body"),
    header: makeNodeComponent("header"),
    rightBarToggle: makeNodeComponent("rightBarToggle"),
    messagesButton: makeNodeComponent("messagesButton"),
    sidebarToggleButton: makeNodeComponent("sidebarToggleButton"),
    content: makeNodeComponent("content"),
    contentBody: makeNodeComponent("contentBody"),
    footer: makeNodeComponent("footer"),
    rightBar: makeNodeComponent("rightBar"),
    overlay: makeNodeComponent("overlay"),

    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
