// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: Bvu9JAI_1x1z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CustomDropdown from "../../CustomDropdown"; // plasmic-import: oUw-Oq8BPl_P/component
import CustomButton from "../../CustomButton"; // plasmic-import: r1AkQsrHSZtQ/component
import ActionsList from "../../ActionsList"; // plasmic-import: VUxalQKdyCYj/component
import ActionListItems from "../../ActionListItems"; // plasmic-import: _msz16lTRhj1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicQ1.module.css"; // plasmic-import: Bvu9JAI_1x1z/css

import SettingSvgIcon from "./icons/PlasmicIcon__SettingSvg"; // plasmic-import: GwVz15svOXJ1/icon

createPlasmicElementProxy;

export type PlasmicQ1__VariantMembers = {};
export type PlasmicQ1__VariantsArgs = {};
type VariantPropType = keyof PlasmicQ1__VariantsArgs;
export const PlasmicQ1__VariantProps = new Array<VariantPropType>();

export type PlasmicQ1__ArgsType = {};
type ArgPropType = keyof PlasmicQ1__ArgsType;
export const PlasmicQ1__ArgProps = new Array<ArgPropType>();

export type PlasmicQ1__OverridesType = {
  root?: Flex__<"div">;
  customDropdown?: Flex__<typeof CustomDropdown>;
  customButton?: Flex__<typeof CustomButton>;
};

export interface DefaultQ1Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQ1__RenderFunc(props: {
  variants: PlasmicQ1__VariantsArgs;
  args: PlasmicQ1__ArgsType;
  overrides: PlasmicQ1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "customDropdown.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "customButton.isDown",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.customDropdown.isOpen === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "isDown";
              }
              throw e;
            }
          })()
      },
      {
        path: "actionListItems.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "actionListItems2.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <CustomDropdown
        data-plasmic-name={"customDropdown"}
        data-plasmic-override={overrides.customDropdown}
        className={classNames("__wab_instance", sty.customDropdown)}
        isOpen={generateStateValueProp($state, ["customDropdown", "isOpen"])}
        onIsOpenChange={generateStateOnChangeProp($state, [
          "customDropdown",
          "isOpen"
        ])}
      >
        <CustomButton
          data-plasmic-name={"customButton"}
          data-plasmic-override={overrides.customButton}
          className={classNames("__wab_instance", sty.customButton)}
          isDown={generateStateValueProp($state, ["customButton", "isDown"])}
          onIsDownChange={generateStateOnChangeProp($state, [
            "customButton",
            "isDown"
          ])}
        />
      </CustomDropdown>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "customDropdown", "customButton"],
  customDropdown: ["customDropdown", "customButton"],
  customButton: ["customButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  customDropdown: typeof CustomDropdown;
  customButton: typeof CustomButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQ1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQ1__VariantsArgs;
    args?: PlasmicQ1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQ1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicQ1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQ1__ArgProps,
          internalVariantPropNames: PlasmicQ1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQ1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQ1";
  } else {
    func.displayName = `PlasmicQ1.${nodeName}`;
  }
  return func;
}

export const PlasmicQ1 = Object.assign(
  // Top-level PlasmicQ1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    customDropdown: makeNodeComponent("customDropdown"),
    customButton: makeNodeComponent("customButton"),

    // Metadata about props expected for PlasmicQ1
    internalVariantProps: PlasmicQ1__VariantProps,
    internalArgProps: PlasmicQ1__ArgProps
  }
);

export default PlasmicQ1;
/* prettier-ignore-end */
