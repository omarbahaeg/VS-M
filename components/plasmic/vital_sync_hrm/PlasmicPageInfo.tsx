// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: -5yQM3hZscI3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicPageInfo.module.css"; // plasmic-import: -5yQM3hZscI3/css

import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: qKMzzxYWCT9r/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon

createPlasmicElementProxy;

export type PlasmicPageInfo__VariantMembers = {};
export type PlasmicPageInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageInfo__VariantsArgs;
export const PlasmicPageInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicPageInfo__ArgsType = {
  title2?: React.ReactNode;
  description?: React.ReactNode;
  action2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPageInfo__ArgsType;
export const PlasmicPageInfo__ArgProps = new Array<ArgPropType>(
  "title2",
  "description",
  "action2"
);

export type PlasmicPageInfo__OverridesType = {
  pageInfo?: Flex__<"div">;
  title?: Flex__<"div">;
  action?: Flex__<"div">;
};

export interface DefaultPageInfoProps {
  title2?: React.ReactNode;
  description?: React.ReactNode;
  action2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageInfo__RenderFunc(props: {
  variants: PlasmicPageInfo__VariantsArgs;
  args: PlasmicPageInfo__ArgsType;
  overrides: PlasmicPageInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"pageInfo"}
      data-plasmic-override={overrides.pageInfo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.pageInfo
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        hasGap={true}
        className={classNames(projectcss.all, sty.title)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iZCw5
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.pageRoute
                      .substring(1)
                      .replace(/^./, char => char.toUpperCase());
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Page Title";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ),
          value: args.title2,
          className: classNames(sty.slotTargetTitle2)
        })}
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h10V4
              )}
            >
              <Trans__>{"Page Description Here."}</Trans__>
            </div>
          ),
          value: args.description,
          className: classNames(sty.slotTargetDescription)
        })}
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"action"}
        data-plasmic-override={overrides.action}
        hasGap={true}
        className={classNames(projectcss.all, sty.action)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__tiF9D)}
              color={"green"}
              shape={"rounded"}
              showStartIcon={true}
              size={"compact"}
              startIcon={
                <PlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__uvm0X)}
                  role={"img"}
                />
              }
              submitsForm={false}
            >
              <Trans__>{"New User"}</Trans__>
            </Button>
          ),
          value: args.action2
        })}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pageInfo: ["pageInfo", "title", "action"],
  title: ["title"],
  action: ["action"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pageInfo: "div";
  title: "div";
  action: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageInfo__VariantsArgs;
    args?: PlasmicPageInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageInfo__ArgProps,
          internalVariantPropNames: PlasmicPageInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pageInfo") {
    func.displayName = "PlasmicPageInfo";
  } else {
    func.displayName = `PlasmicPageInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicPageInfo = Object.assign(
  // Top-level PlasmicPageInfo renders the root element
  makeNodeComponent("pageInfo"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    action: makeNodeComponent("action"),

    // Metadata about props expected for PlasmicPageInfo
    internalVariantProps: PlasmicPageInfo__VariantProps,
    internalArgProps: PlasmicPageInfo__ArgProps
  }
);

export default PlasmicPageInfo;
/* prettier-ignore-end */
