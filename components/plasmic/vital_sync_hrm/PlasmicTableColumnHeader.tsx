// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: 6J6LHNmu-UTh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicTableColumnHeader.module.css"; // plasmic-import: 6J6LHNmu-UTh/css

import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: uv-esoD0qkDh/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: e46BsyJ2bjKq/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: fQuvc6bYBWs_/icon

createPlasmicElementProxy;

export type PlasmicTableColumnHeader__VariantMembers = {
  stateTypes: "sorting" | "info" | "checkBox" | "empty";
  sortTypes: "ascending" | "descending";
  endRow: "endRow";
};
export type PlasmicTableColumnHeader__VariantsArgs = {
  stateTypes?: SingleChoiceArg<"sorting" | "info" | "checkBox" | "empty">;
  sortTypes?: MultiChoiceArg<"ascending" | "descending">;
  endRow?: SingleBooleanChoiceArg<"endRow">;
};
type VariantPropType = keyof PlasmicTableColumnHeader__VariantsArgs;
export const PlasmicTableColumnHeader__VariantProps =
  new Array<VariantPropType>("stateTypes", "sortTypes", "endRow");

export type PlasmicTableColumnHeader__ArgsType = {
  children?: React.ReactNode;
  infoTooltip?: string;
};
type ArgPropType = keyof PlasmicTableColumnHeader__ArgsType;
export const PlasmicTableColumnHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "infoTooltip"
);

export type PlasmicTableColumnHeader__OverridesType = {
  root?: Flex__<"div">;
  state?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  sorting?: Flex__<"div">;
  infoIcon?: Flex__<"div">;
  line?: Flex__<"span">;
};

export interface DefaultTableColumnHeaderProps {
  children?: React.ReactNode;
  infoTooltip?: string;
  stateTypes?: SingleChoiceArg<"sorting" | "info" | "checkBox" | "empty">;
  sortTypes?: MultiChoiceArg<"ascending" | "descending">;
  endRow?: SingleBooleanChoiceArg<"endRow">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTableColumnHeader__RenderFunc(props: {
  variants: PlasmicTableColumnHeader__VariantsArgs;
  args: PlasmicTableColumnHeader__ArgsType;
  overrides: PlasmicTableColumnHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          infoTooltip: $translator?.("Tooltip info...") ?? "Tooltip info..."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args, $translator]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stateTypes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stateTypes
      },
      {
        path: "sortTypes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sortTypes
      },
      {
        path: "endRow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.endRow
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootendRow]: hasVariant($state, "endRow", "endRow"),
          [sty.rootsortTypes_ascending]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.rootsortTypes_ascending_stateTypes_sorting]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "ascending"),
          [sty.rootsortTypes_descending]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          ),
          [sty.rootsortTypes_descending_stateTypes_sorting]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "descending"),
          [sty.rootstateTypes_checkBox]: hasVariant(
            $state,
            "stateTypes",
            "checkBox"
          ),
          [sty.rootstateTypes_empty]: hasVariant($state, "stateTypes", "empty"),
          [sty.rootstateTypes_info]: hasVariant($state, "stateTypes", "info"),
          [sty.rootstateTypes_sorting]: hasVariant(
            $state,
            "stateTypes",
            "sorting"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return (() => {
                    if ($state.stateTypes === "sorting") {
                      if (!Array.isArray($state.sortTypes)) {
                        $state.sortTypes = [];
                      }
                      const ascendingIndex =
                        $state.sortTypes.indexOf("ascending");
                      const descendingIndex =
                        $state.sortTypes.indexOf("descending");
                      if (ascendingIndex === -1 && descendingIndex === -1) {
                        return $state.sortTypes.push("ascending");
                      } else if (ascendingIndex !== -1) {
                        $state.sortTypes.splice(ascendingIndex, 1);
                        return $state.sortTypes.push("descending");
                      } else if (descendingIndex !== -1) {
                        return $state.sortTypes.splice(descendingIndex, 1);
                      }
                    }
                  })();
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"state"}
        data-plasmic-override={overrides.state}
        hasGap={true}
        className={classNames(projectcss.all, sty.state, {
          [sty.statesortTypes_ascending]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.statesortTypes_descending]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          ),
          [sty.statestateTypes_checkBox]: hasVariant(
            $state,
            "stateTypes",
            "checkBox"
          ),
          [sty.statestateTypes_empty]: hasVariant(
            $state,
            "stateTypes",
            "empty"
          ),
          [sty.statestateTypes_info]: hasVariant($state, "stateTypes", "info"),
          [sty.statestateTypes_sorting]: hasVariant(
            $state,
            "stateTypes",
            "sorting"
          )
        })}
      >
        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox, {
            [sty.checkboxstateTypes_checkBox]: hasVariant(
              $state,
              "stateTypes",
              "checkBox"
            )
          })}
          hideLabel={true}
          isChecked={
            generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
          }
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
              eventArgs[0]
            );
          }}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <Trans__>{"Enter some text"}</Trans__>
          </div>
        </Checkbox>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxstateTypes_checkBox]: hasVariant(
              $state,
              "stateTypes",
              "checkBox"
            ),
            [sty.freeBoxstateTypes_empty]: hasVariant(
              $state,
              "stateTypes",
              "empty"
            ),
            [sty.freeBoxstateTypes_info]: hasVariant(
              $state,
              "stateTypes",
              "info"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Name"}</Trans__>,
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
        <AntdTooltip
          className={classNames("__wab_instance", sty.tooltip__qfadY, {
            [sty.tooltipsortTypes_ascending__qfadYGTfT]: hasVariant(
              $state,
              "sortTypes",
              "ascending"
            ),
            [sty.tooltipsortTypes_ascending_stateTypes_sorting__qfadYGTfTNrt9F]:
              hasVariant($state, "stateTypes", "sorting") &&
              hasVariant($state, "sortTypes", "ascending"),
            [sty.tooltipsortTypes_descending__qfadY8HJjj]: hasVariant(
              $state,
              "sortTypes",
              "descending"
            ),
            [sty.tooltipsortTypes_descending_stateTypes_sorting__qfadY8HJjjNrt9F]:
              hasVariant($state, "stateTypes", "sorting") &&
              hasVariant($state, "sortTypes", "descending"),
            [sty.tooltipstateTypes_checkBox__qfadYnkuVm]: hasVariant(
              $state,
              "stateTypes",
              "checkBox"
            ),
            [sty.tooltipstateTypes_empty__qfadYh6JoR]: hasVariant(
              $state,
              "stateTypes",
              "empty"
            ),
            [sty.tooltipstateTypes_info__qfadYnkn1N]: hasVariant(
              $state,
              "stateTypes",
              "info"
            ),
            [sty.tooltipstateTypes_sorting__qfadYNrt9F]: hasVariant(
              $state,
              "stateTypes",
              "sorting"
            )
          })}
          titleText={
            hasVariant($state, "sortTypes", "descending")
              ? "Click to cancel sorting"
              : hasVariant($state, "sortTypes", "ascending")
              ? "Click to sort descending"
              : "Click to sort ascending"
          }
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"sorting"}
            data-plasmic-override={overrides.sorting}
            hasGap={true}
            className={classNames(projectcss.all, sty.sorting)}
          >
            <Icon35Icon
              className={classNames(projectcss.all, sty.svg__bmOrH, {
                [sty.svgsortTypes_ascending__bmOrHGTfT]: hasVariant(
                  $state,
                  "sortTypes",
                  "ascending"
                ),
                [sty.svgsortTypes_ascending_stateTypes_sorting__bmOrHGTfTNrt9F]:
                  hasVariant($state, "stateTypes", "sorting") &&
                  hasVariant($state, "sortTypes", "ascending"),
                [sty.svgstateTypes_sorting__bmOrHNrt9F]: hasVariant(
                  $state,
                  "stateTypes",
                  "sorting"
                )
              })}
              role={"img"}
            />

            <Icon36Icon
              className={classNames(projectcss.all, sty.svg___3KXqS, {
                [sty.svgsortTypes_ascending___3KXqSGTfT]: hasVariant(
                  $state,
                  "sortTypes",
                  "ascending"
                ),
                [sty.svgsortTypes_descending___3KXqS8HJjj]: hasVariant(
                  $state,
                  "sortTypes",
                  "descending"
                ),
                [sty.svgsortTypes_descending_stateTypes_sorting___3KXqS8HJjjNrt9F]:
                  hasVariant($state, "stateTypes", "sorting") &&
                  hasVariant($state, "sortTypes", "descending"),
                [sty.svgstateTypes_sorting___3KXqSNrt9F]: hasVariant(
                  $state,
                  "stateTypes",
                  "sorting"
                )
              })}
              role={"img"}
            />
          </Stack__>
        </AntdTooltip>
        <AntdTooltip
          className={classNames("__wab_instance", sty.tooltip__sdn88, {
            [sty.tooltipstateTypes_checkBox__sdn88NkuVm]: hasVariant(
              $state,
              "stateTypes",
              "checkBox"
            ),
            [sty.tooltipstateTypes_empty__sdn88H6JoR]: hasVariant(
              $state,
              "stateTypes",
              "empty"
            ),
            [sty.tooltipstateTypes_info__sdn88Nkn1N]: hasVariant(
              $state,
              "stateTypes",
              "info"
            )
          })}
          titleText={args.infoTooltip}
        >
          <div
            data-plasmic-name={"infoIcon"}
            data-plasmic-override={overrides.infoIcon}
            className={classNames(projectcss.all, sty.infoIcon)}
          >
            <Icon37Icon
              className={classNames(projectcss.all, sty.svg__u7GHt)}
              role={"img"}
            />
          </div>
        </AntdTooltip>
      </Stack__>
      {(
        hasVariant($state, "stateTypes", "sorting") && triggers.hover_root
          ? true
          : (() => {
              try {
                return (
                  !$state.endRow &&
                  !($state.stateTypes === "empty") &&
                  !($state.stateTypes === "checkBox") &&
                  !$state.sortTypes.includes("ascending") &&
                  !$state.sortTypes.includes("descending")
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <span
          data-plasmic-name={"line"}
          data-plasmic-override={overrides.line}
          className={classNames(projectcss.all, projectcss.span, sty.line, {
            [sty.linestateTypes_sorting]: hasVariant(
              $state,
              "stateTypes",
              "sorting"
            )
          })}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "state",
    "checkbox",
    "text",
    "freeBox",
    "sorting",
    "infoIcon",
    "line"
  ],
  state: ["state", "checkbox", "text", "freeBox", "sorting", "infoIcon"],
  checkbox: ["checkbox", "text"],
  text: ["text"],
  freeBox: ["freeBox"],
  sorting: ["sorting"],
  infoIcon: ["infoIcon"],
  line: ["line"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  state: "div";
  checkbox: typeof Checkbox;
  text: "div";
  freeBox: "div";
  sorting: "div";
  infoIcon: "div";
  line: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableColumnHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableColumnHeader__VariantsArgs;
    args?: PlasmicTableColumnHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTableColumnHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTableColumnHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTableColumnHeader__ArgProps,
          internalVariantPropNames: PlasmicTableColumnHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTableColumnHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableColumnHeader";
  } else {
    func.displayName = `PlasmicTableColumnHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicTableColumnHeader = Object.assign(
  // Top-level PlasmicTableColumnHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    state: makeNodeComponent("state"),
    checkbox: makeNodeComponent("checkbox"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    sorting: makeNodeComponent("sorting"),
    infoIcon: makeNodeComponent("infoIcon"),
    line: makeNodeComponent("line"),

    // Metadata about props expected for PlasmicTableColumnHeader
    internalVariantProps: PlasmicTableColumnHeader__VariantProps,
    internalArgProps: PlasmicTableColumnHeader__ArgProps
  }
);

export default PlasmicTableColumnHeader;
/* prettier-ignore-end */
