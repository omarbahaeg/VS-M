// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: SyYLCRWlXb0u

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TableSearch from "../../TableSearch"; // plasmic-import: v9TOdYeoUJJU/component
import CustomDropdown from "../../CustomDropdown"; // plasmic-import: oUw-Oq8BPl_P/component
import CustomButton from "../../CustomButton"; // plasmic-import: r1AkQsrHSZtQ/component
import ActionsList from "../../ActionsList"; // plasmic-import: VUxalQKdyCYj/component
import ActionListItems from "../../ActionListItems"; // plasmic-import: _msz16lTRhj1/component
import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component
import TableColumnHeader from "../../TableColumnHeader"; // plasmic-import: 6J6LHNmu-UTh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCustomTable.module.css"; // plasmic-import: SyYLCRWlXb0u/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: s6V8mYogtXIl/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 9Xy14f7tX9Ax/icon
import SettingSvgIcon from "./icons/PlasmicIcon__SettingSvg"; // plasmic-import: GwVz15svOXJ1/icon
import ColumnHeightSvgIcon from "./icons/PlasmicIcon__ColumnHeightSvg"; // plasmic-import: UR9SzrRcmRdF/icon
import AntEmptySvgIcon from "./icons/PlasmicIcon__AntEmptySvg"; // plasmic-import: Kq2sI6IXlzM2/icon

createPlasmicElementProxy;

export type PlasmicCustomTable__VariantMembers = {
  noData: "noData";
};
export type PlasmicCustomTable__VariantsArgs = {
  noData?: SingleBooleanChoiceArg<"noData">;
};
type VariantPropType = keyof PlasmicCustomTable__VariantsArgs;
export const PlasmicCustomTable__VariantProps = new Array<VariantPropType>(
  "noData"
);

export type PlasmicCustomTable__ArgsType = {
  label?: React.ReactNode;
  icon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCustomTable__ArgsType;
export const PlasmicCustomTable__ArgProps = new Array<ArgPropType>(
  "label",
  "icon"
);

export type PlasmicCustomTable__OverridesType = {
  table?: Flex__<"div">;
  tableColumnActions?: Flex__<"div">;
  tableSearch?: Flex__<typeof TableSearch>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  checkbox?: Flex__<typeof Checkbox>;
  body?: Flex__<"div">;
  tableColumnHeader?: Flex__<"div">;
  tableColumnData?: Flex__<"div">;
  noDataSection?: Flex__<"div">;
};

export interface DefaultCustomTableProps {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  noData?: SingleBooleanChoiceArg<"noData">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCustomTable__RenderFunc(props: {
  variants: PlasmicCustomTable__VariantsArgs;
  args: PlasmicCustomTable__ArgsType;
  overrides: PlasmicCustomTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tableSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "noData",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noData
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"table"}
      data-plasmic-override={overrides.table}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.table
      )}
    >
      <div
        data-plasmic-name={"tableColumnActions"}
        data-plasmic-override={overrides.tableColumnActions}
        className={classNames(projectcss.all, sty.tableColumnActions)}
      >
        <TableSearch
          data-plasmic-name={"tableSearch"}
          data-plasmic-override={overrides.tableSearch}
          className={classNames("__wab_instance", sty.tableSearch)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["tableSearch", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          value={generateStateValueProp($state, ["tableSearch", "value"]) ?? ""}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <CustomDropdown
            className={classNames("__wab_instance", sty.customDropdown__vAsiM)}
            dropdownAlignment={"right"}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__wmtpp
                      )}
                    >
                      <Trans__>{"Download as CSV"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems___5MusI
                      )}
                    >
                      <Trans__>{"Download as JSON"}</Trans__>
                    </ActionListItems>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList__pOOl)}
                noTitle={true}
              />
            }
          >
            <CustomButton
              buttonLabel={<Trans__>{"Export"}</Trans__>}
              className={classNames("__wab_instance", sty.customButton__j4Bbo)}
              type={"labelOnly"}
            />
          </CustomDropdown>
          <CustomDropdown
            className={classNames("__wab_instance", sty.customDropdown__wNuH)}
            dropdownAlignment={"right"}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__nTvCa
                      )}
                      listItemClick={async event => {
                        const $steps = {};

                        $steps["updateVariant"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }
                                undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateVariant"] != null &&
                          typeof $steps["updateVariant"] === "object" &&
                          typeof $steps["updateVariant"].then === "function"
                        ) {
                          $steps["updateVariant"] = await $steps[
                            "updateVariant"
                          ];
                        }
                      }}
                    >
                      <Trans__>{"Larger"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__psHzh
                      )}
                    >
                      <Trans__>{"Middle"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__wJUnU
                      )}
                    >
                      <Trans__>{"Compact"}</Trans__>
                    </ActionListItems>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList__l1Xmb)}
                noTitle={true}
              />
            }
          >
            <CustomButton
              buttonIcon={
                <ColumnHeightSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.customButton__hl3Tz)}
              iconTooltip={$translator?.("Density") ?? "Density"}
              type={"iconOnly"}
            />
          </CustomDropdown>
          <CustomDropdown
            className={classNames("__wab_instance", sty.customDropdown__sjUiG)}
            dropdownAlignment={"right"}
            slot={
              <ActionsList
                actionsList={(_par =>
                  !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.checkbox),
                      isChecked:
                        generateStateValueProp($state, [
                          "checkbox",
                          __plasmic_idx_0,
                          "isChecked"
                        ]) ?? false,
                      key: currentIndex,
                      onChange: (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "checkbox[].isChecked",
                          initFunc: ({ $props, $state, $queries }) =>
                            "isChecked"
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Checkbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        {...child$Props}
                      />
                    );
                  })();
                })}
                className={classNames("__wab_instance", sty.actionsList__m2DKn)}
                dropdownTitle={<Trans__>{"Column Display"}</Trans__>}
              />
            }
          >
            <CustomButton
              className={classNames("__wab_instance", sty.customButton__xFTc)}
              iconTooltip={$translator?.("Settings") ?? "Settings"}
              type={"iconOnly"}
            />
          </CustomDropdown>
        </Stack__>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <div
          data-plasmic-name={"tableColumnHeader"}
          data-plasmic-override={overrides.tableColumnHeader}
          className={classNames(projectcss.all, sty.tableColumnHeader)}
        >
          <TableColumnHeader
            className={classNames(
              "__wab_instance",
              sty.tableColumnHeader__tfOr0
            )}
            stateTypes={"checkBox"}
          />

          <TableColumnHeader
            className={classNames(
              "__wab_instance",
              sty.tableColumnHeader__i6I0
            )}
            stateTypes={"empty"}
          />

          <TableColumnHeader
            className={classNames(
              "__wab_instance",
              sty.tableColumnHeader__oQvHq
            )}
            endRow={true}
            stateTypes={"sorting"}
          />
        </div>
        <div
          data-plasmic-name={"tableColumnData"}
          data-plasmic-override={overrides.tableColumnData}
          className={classNames(projectcss.all, sty.tableColumnData)}
        >
          {(() => {
            try {
              return $state.noData === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"noDataSection"}
              data-plasmic-override={overrides.noDataSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.noDataSection, {
                [sty.noDataSectionnoData]: hasVariant(
                  $state,
                  "noData",
                  "noData"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <AntEmptySvgIcon
                    className={classNames(projectcss.all, sty.svg__oJEp)}
                    role={"img"}
                  />
                ),

                value: args.icon
              })}
              {renderPlasmicSlot({
                defaultContents: <Trans__>{"No data"}</Trans__>,
                value: args.label,
                className: classNames(sty.slotTargetLabel)
              })}
            </Stack__>
          ) : null}
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  table: [
    "table",
    "tableColumnActions",
    "tableSearch",
    "freeBox",
    "svg",
    "checkbox",
    "body",
    "tableColumnHeader",
    "tableColumnData",
    "noDataSection"
  ],
  tableColumnActions: [
    "tableColumnActions",
    "tableSearch",
    "freeBox",
    "svg",
    "checkbox"
  ],
  tableSearch: ["tableSearch"],
  freeBox: ["freeBox", "svg", "checkbox"],
  svg: ["svg"],
  checkbox: ["checkbox"],
  body: ["body", "tableColumnHeader", "tableColumnData", "noDataSection"],
  tableColumnHeader: ["tableColumnHeader"],
  tableColumnData: ["tableColumnData", "noDataSection"],
  noDataSection: ["noDataSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  table: "div";
  tableColumnActions: "div";
  tableSearch: typeof TableSearch;
  freeBox: "div";
  svg: "svg";
  checkbox: typeof Checkbox;
  body: "div";
  tableColumnHeader: "div";
  tableColumnData: "div";
  noDataSection: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCustomTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCustomTable__VariantsArgs;
    args?: PlasmicCustomTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCustomTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCustomTable__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomTable__ArgProps,
          internalVariantPropNames: PlasmicCustomTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "table") {
    func.displayName = "PlasmicCustomTable";
  } else {
    func.displayName = `PlasmicCustomTable.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomTable = Object.assign(
  // Top-level PlasmicCustomTable renders the root element
  makeNodeComponent("table"),
  {
    // Helper components rendering sub-elements
    tableColumnActions: makeNodeComponent("tableColumnActions"),
    tableSearch: makeNodeComponent("tableSearch"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    checkbox: makeNodeComponent("checkbox"),
    body: makeNodeComponent("body"),
    tableColumnHeader: makeNodeComponent("tableColumnHeader"),
    tableColumnData: makeNodeComponent("tableColumnData"),
    noDataSection: makeNodeComponent("noDataSection"),

    // Metadata about props expected for PlasmicCustomTable
    internalVariantProps: PlasmicCustomTable__VariantProps,
    internalArgProps: PlasmicCustomTable__ArgProps
  }
);

export default PlasmicCustomTable;
/* prettier-ignore-end */
