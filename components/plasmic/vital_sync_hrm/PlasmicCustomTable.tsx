// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: SyYLCRWlXb0u

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Searchbox from "../../Searchbox"; // plasmic-import: HxIP9-DtSGaj/component
import CustomDropdown from "../../CustomDropdown"; // plasmic-import: oUw-Oq8BPl_P/component
import CustomButton from "../../CustomButton"; // plasmic-import: r1AkQsrHSZtQ/component
import ActionsList from "../../ActionsList"; // plasmic-import: VUxalQKdyCYj/component
import ActionListItems from "../../ActionListItems"; // plasmic-import: _msz16lTRhj1/component
import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component
import CtHeader from "../../CtHeader"; // plasmic-import: CjCWQ83VlxB3/component
import CtCheckbox from "../../CtCheckbox"; // plasmic-import: h4AhLHpwZjUP/component
import CtHeaderLabel from "../../CtHeaderLabel"; // plasmic-import: xSZETzH5yRT1/component
import CtContent from "../../CtContent"; // plasmic-import: 30qwjyl-gzyD/component
import CtContentData from "../../CtContentData"; // plasmic-import: 4t2Qy5WUSJVp/component
import CtMoreButton from "../../CtMoreButton"; // plasmic-import: V-WhOu_9VTgo/component
import CtNoData from "../../CtNoData"; // plasmic-import: iPx11GU5dJeG/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCustomTable.module.css"; // plasmic-import: SyYLCRWlXb0u/css

import SettingSvgIcon from "./icons/PlasmicIcon__SettingSvg"; // plasmic-import: GwVz15svOXJ1/icon
import ColumnHeightSvgIcon from "./icons/PlasmicIcon__ColumnHeightSvg"; // plasmic-import: UR9SzrRcmRdF/icon

createPlasmicElementProxy;

export type PlasmicCustomTable__VariantMembers = {
  noData: "noData";
  topBar: "topBar";
};
export type PlasmicCustomTable__VariantsArgs = {
  noData?: SingleBooleanChoiceArg<"noData">;
  topBar?: SingleBooleanChoiceArg<"topBar">;
};
type VariantPropType = keyof PlasmicCustomTable__VariantsArgs;
export const PlasmicCustomTable__VariantProps = new Array<VariantPropType>(
  "noData",
  "topBar"
);

export type PlasmicCustomTable__ArgsType = {};
type ArgPropType = keyof PlasmicCustomTable__ArgsType;
export const PlasmicCustomTable__ArgProps = new Array<ArgPropType>();

export type PlasmicCustomTable__OverridesType = {
  table?: Flex__<"div">;
  tableColumnActions?: Flex__<"div">;
  searchbox?: Flex__<typeof Searchbox>;
  freeBox?: Flex__<"div">;
  exportButton?: Flex__<typeof CustomDropdown>;
  densityButton?: Flex__<typeof CustomDropdown>;
  settingsButton?: Flex__<typeof CustomDropdown>;
  tableItems?: Flex__<typeof Checkbox>;
  tableBody?: Flex__<"section">;
  ctHeader?: Flex__<typeof CtHeader>;
  primaryCheckbox?: Flex__<typeof CtCheckbox>;
  ctHeaderLabel?: Flex__<typeof CtHeaderLabel>;
  ctHeaderLabel2?: Flex__<typeof CtHeaderLabel>;
  ctHeaderLabel3?: Flex__<typeof CtHeaderLabel>;
  ctContent?: Flex__<typeof CtContent>;
  contentSection?: Flex__<"section">;
  contentSection2?: Flex__<"section">;
  contentSection3?: Flex__<"section">;
  secondaryCheckbox?: Flex__<typeof CtCheckbox>;
  ctNoData?: Flex__<typeof CtNoData>;
};

export interface DefaultCustomTableProps {
  noData?: SingleBooleanChoiceArg<"noData">;
  topBar?: SingleBooleanChoiceArg<"topBar">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCustomTable__RenderFunc(props: {
  variants: PlasmicCustomTable__VariantsArgs;
  args: PlasmicCustomTable__ArgsType;
  overrides: PlasmicCustomTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "noData",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noData
      },
      {
        path: "tableItems[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "primaryCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "secondaryCheckbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "searchbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "topBar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.topBar
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "c0c3f78b-dfe5-4015-a5e3-04ffe1715358",
        userArgs: {},
        cacheKey: `plasmic.$.c0c3f78b-dfe5-4015-a5e3-04ffe1715358.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"table"}
      data-plasmic-override={overrides.table}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.table,
        {
          [sty.tablenoData]: hasVariant($state, "noData", "noData"),
          [sty.tabletopBar]: hasVariant($state, "topBar", "topBar")
        }
      )}
    >
      <div
        data-plasmic-name={"tableColumnActions"}
        data-plasmic-override={overrides.tableColumnActions}
        className={classNames(projectcss.all, sty.tableColumnActions, {
          [sty.tableColumnActionsnoData]: hasVariant(
            $state,
            "noData",
            "noData"
          ),
          [sty.tableColumnActionstopBar]: hasVariant($state, "topBar", "topBar")
        })}
      >
        <Searchbox
          data-plasmic-name={"searchbox"}
          data-plasmic-override={overrides.searchbox}
          className={classNames("__wab_instance", sty.searchbox)}
          onValueChange={generateStateOnChangeProp($state, [
            "searchbox",
            "value"
          ])}
          showStartIcon={true}
          value={generateStateValueProp($state, ["searchbox", "value"])}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <CustomDropdown
            data-plasmic-name={"exportButton"}
            data-plasmic-override={overrides.exportButton}
            className={classNames("__wab_instance", sty.exportButton)}
            dropdownAlignment={"right"}
            isOpen={undefined}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__rfP
                      )}
                    >
                      <Trans__>{"Download as CSV"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__c8UBj
                      )}
                    >
                      <Trans__>{"Download as JSON"}</Trans__>
                    </ActionListItems>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList__xdswB)}
                noTitle={true}
              />
            }
          >
            <CustomButton
              buttonLabel={<Trans__>{"Export"}</Trans__>}
              className={classNames("__wab_instance", sty.customButton__o2GQ6)}
              type={"labelOnly"}
            />
          </CustomDropdown>
          <CustomDropdown
            data-plasmic-name={"densityButton"}
            data-plasmic-override={overrides.densityButton}
            className={classNames("__wab_instance", sty.densityButton)}
            dropdownAlignment={"right"}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__va4Ei
                      )}
                    >
                      <Trans__>{"Larger"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__lCdGl
                      )}
                    >
                      <Trans__>{"Middle"}</Trans__>
                    </ActionListItems>
                    <ActionListItems
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems__h8K5G
                      )}
                    >
                      <Trans__>{"Compact"}</Trans__>
                    </ActionListItems>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList___58SS)}
                noTitle={true}
              />
            }
          >
            <CustomButton
              buttonIcon={
                <ColumnHeightSvgIcon
                  className={classNames(projectcss.all, sty.svg__iSjC)}
                  role={"img"}
                />
              }
              buttonLabel={<Trans__>{"Density"}</Trans__>}
              className={classNames("__wab_instance", sty.customButton__ooKeS)}
              type={"iconOnly"}
            />
          </CustomDropdown>
          <CustomDropdown
            data-plasmic-name={"settingsButton"}
            data-plasmic-override={overrides.settingsButton}
            className={classNames("__wab_instance", sty.settingsButton)}
            dropdownAlignment={"right"}
            slot={
              <ActionsList
                actionsList={(_par =>
                  !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.tableItems),
                      isChecked:
                        generateStateValueProp($state, [
                          "tableItems",
                          __plasmic_idx_0,
                          "isChecked"
                        ]) ?? false,
                      key: currentIndex,
                      onChange: (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "tableItems",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "tableItems[].isChecked",
                          initFunc: ({ $props, $state, $queries }) =>
                            "isChecked"
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Checkbox
                        data-plasmic-name={"tableItems"}
                        data-plasmic-override={overrides.tableItems}
                        {...child$Props}
                      />
                    );
                  })();
                })}
                className={classNames("__wab_instance", sty.actionsList__vuEzx)}
                dropdownTitle={<Trans__>{"Column Display"}</Trans__>}
              />
            }
          >
            <CustomButton
              buttonIcon={
                <SettingSvgIcon
                  className={classNames(projectcss.all, sty.svg___09Vju)}
                  role={"img"}
                />
              }
              buttonLabel={<Trans__>{"Settings"}</Trans__>}
              className={classNames("__wab_instance", sty.customButton__lCgje)}
              type={"iconOnly"}
            />
          </CustomDropdown>
        </Stack__>
      </div>
      <section
        data-plasmic-name={"tableBody"}
        data-plasmic-override={overrides.tableBody}
        className={classNames(projectcss.all, sty.tableBody, {
          [sty.tableBodynoData]: hasVariant($state, "noData", "noData")
        })}
      >
        <CtHeader
          data-plasmic-name={"ctHeader"}
          data-plasmic-override={overrides.ctHeader}
          className={classNames("__wab_instance", sty.ctHeader, {
            [sty.ctHeadernoData]: hasVariant($state, "noData", "noData")
          })}
          headerCheckboxSection2={
            <CtCheckbox
              data-plasmic-name={"primaryCheckbox"}
              data-plasmic-override={overrides.primaryCheckbox}
              aria-label={"Primary"}
              isChecked={
                generateStateValueProp($state, [
                  "primaryCheckbox",
                  "isChecked"
                ]) ?? false
              }
              isDisabled={(() => {
                try {
                  return $props.noData === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "isDisabled";
                  }
                  throw e;
                }
              })()}
              isIndeterminate={(() => {
                try {
                  return (
                    $state.secondaryCheckbox.some(cb => cb.isChecked) &&
                    !$state.secondaryCheckbox.every(cb => cb.isChecked)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "primaryCheckbox",
                  "isChecked"
                ])(eventArgs[0]);
              }}
            />
          }
        >
          <CtHeaderLabel
            data-plasmic-name={"ctHeaderLabel"}
            data-plasmic-override={overrides.ctHeaderLabel}
            className={classNames("__wab_instance", sty.ctHeaderLabel)}
            sorting={true}
          >
            <Trans__>{"Id"}</Trans__>
          </CtHeaderLabel>
          <CtHeaderLabel
            data-plasmic-name={"ctHeaderLabel2"}
            data-plasmic-override={overrides.ctHeaderLabel2}
            className={classNames("__wab_instance", sty.ctHeaderLabel2)}
            sorting={true}
          />

          <CtHeaderLabel
            data-plasmic-name={"ctHeaderLabel3"}
            data-plasmic-override={overrides.ctHeaderLabel3}
            className={classNames("__wab_instance", sty.ctHeaderLabel3)}
            info={true}
          >
            <Trans__>{"Email"}</Trans__>
          </CtHeaderLabel>
        </CtHeader>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.componentData.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <CtContent
              data-plasmic-name={"ctContent"}
              data-plasmic-override={overrides.ctContent}
              className={classNames("__wab_instance", sty.ctContent, {
                [sty.ctContentnoData]: hasVariant($state, "noData", "noData")
              })}
              key={currentIndex}
              secondaryCheckbox2={(() => {
                const child$Props = {
                  "aria-label": "Secondary",
                  className: classNames(
                    "__wab_instance",
                    sty.secondaryCheckbox
                  ),
                  isChecked:
                    generateStateValueProp($state, [
                      "secondaryCheckbox",
                      __plasmic_idx_0,
                      "isChecked"
                    ]) ?? false,
                  onChange: (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "secondaryCheckbox",
                      __plasmic_idx_0,
                      "isChecked"
                    ])(eventArgs[0]);
                  }
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "secondaryCheckbox[].isChecked",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $state.primaryCheckbox.isChecked === true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "isChecked";
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <CtCheckbox
                    data-plasmic-name={"secondaryCheckbox"}
                    data-plasmic-override={overrides.secondaryCheckbox}
                    {...child$Props}
                  />
                );
              })()}
            >
              <CtContentData
                className={classNames(
                  "__wab_instance",
                  sty.ctContentData___84Ye
                )}
              >
                <section
                  data-plasmic-name={"contentSection"}
                  data-plasmic-override={overrides.contentSection}
                  className={classNames(projectcss.all, sty.contentSection)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xvtLh
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return currentItem.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "None";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                </section>
              </CtContentData>
              <CtContentData
                className={classNames(
                  "__wab_instance",
                  sty.ctContentData__dKqD
                )}
              >
                <section
                  data-plasmic-name={"contentSection2"}
                  data-plasmic-override={overrides.contentSection2}
                  className={classNames(projectcss.all, sty.contentSection2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v6UpW
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return currentItem["Display Name"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "None";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                </section>
              </CtContentData>
              <CtContentData
                className={classNames(
                  "__wab_instance",
                  sty.ctContentData__cZoHr
                )}
              >
                <section
                  data-plasmic-name={"contentSection3"}
                  data-plasmic-override={overrides.contentSection3}
                  className={classNames(projectcss.all, sty.contentSection3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4G9Iw
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return currentItem.Email;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "None";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                </section>
              </CtContentData>
            </CtContent>
          );
        })}
        <CtNoData
          data-plasmic-name={"ctNoData"}
          data-plasmic-override={overrides.ctNoData}
          className={classNames("__wab_instance", sty.ctNoData, {
            [sty.ctNoDatanoData]: hasVariant($state, "noData", "noData"),
            [sty.ctNoDatatopBar]: hasVariant($state, "topBar", "topBar")
          })}
        />
      </section>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  table: [
    "table",
    "tableColumnActions",
    "searchbox",
    "freeBox",
    "exportButton",
    "densityButton",
    "settingsButton",
    "tableItems",
    "tableBody",
    "ctHeader",
    "primaryCheckbox",
    "ctHeaderLabel",
    "ctHeaderLabel2",
    "ctHeaderLabel3",
    "ctContent",
    "contentSection",
    "contentSection2",
    "contentSection3",
    "secondaryCheckbox",
    "ctNoData"
  ],
  tableColumnActions: [
    "tableColumnActions",
    "searchbox",
    "freeBox",
    "exportButton",
    "densityButton",
    "settingsButton",
    "tableItems"
  ],
  searchbox: ["searchbox"],
  freeBox: [
    "freeBox",
    "exportButton",
    "densityButton",
    "settingsButton",
    "tableItems"
  ],
  exportButton: ["exportButton"],
  densityButton: ["densityButton"],
  settingsButton: ["settingsButton", "tableItems"],
  tableItems: ["tableItems"],
  tableBody: [
    "tableBody",
    "ctHeader",
    "primaryCheckbox",
    "ctHeaderLabel",
    "ctHeaderLabel2",
    "ctHeaderLabel3",
    "ctContent",
    "contentSection",
    "contentSection2",
    "contentSection3",
    "secondaryCheckbox",
    "ctNoData"
  ],
  ctHeader: [
    "ctHeader",
    "primaryCheckbox",
    "ctHeaderLabel",
    "ctHeaderLabel2",
    "ctHeaderLabel3"
  ],
  primaryCheckbox: ["primaryCheckbox"],
  ctHeaderLabel: ["ctHeaderLabel"],
  ctHeaderLabel2: ["ctHeaderLabel2"],
  ctHeaderLabel3: ["ctHeaderLabel3"],
  ctContent: [
    "ctContent",
    "contentSection",
    "contentSection2",
    "contentSection3",
    "secondaryCheckbox"
  ],
  contentSection: ["contentSection"],
  contentSection2: ["contentSection2"],
  contentSection3: ["contentSection3"],
  secondaryCheckbox: ["secondaryCheckbox"],
  ctNoData: ["ctNoData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  table: "div";
  tableColumnActions: "div";
  searchbox: typeof Searchbox;
  freeBox: "div";
  exportButton: typeof CustomDropdown;
  densityButton: typeof CustomDropdown;
  settingsButton: typeof CustomDropdown;
  tableItems: typeof Checkbox;
  tableBody: "section";
  ctHeader: typeof CtHeader;
  primaryCheckbox: typeof CtCheckbox;
  ctHeaderLabel: typeof CtHeaderLabel;
  ctHeaderLabel2: typeof CtHeaderLabel;
  ctHeaderLabel3: typeof CtHeaderLabel;
  ctContent: typeof CtContent;
  contentSection: "section";
  contentSection2: "section";
  contentSection3: "section";
  secondaryCheckbox: typeof CtCheckbox;
  ctNoData: typeof CtNoData;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCustomTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCustomTable__VariantsArgs;
    args?: PlasmicCustomTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCustomTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCustomTable__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomTable__ArgProps,
          internalVariantPropNames: PlasmicCustomTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "table") {
    func.displayName = "PlasmicCustomTable";
  } else {
    func.displayName = `PlasmicCustomTable.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomTable = Object.assign(
  // Top-level PlasmicCustomTable renders the root element
  makeNodeComponent("table"),
  {
    // Helper components rendering sub-elements
    tableColumnActions: makeNodeComponent("tableColumnActions"),
    searchbox: makeNodeComponent("searchbox"),
    freeBox: makeNodeComponent("freeBox"),
    exportButton: makeNodeComponent("exportButton"),
    densityButton: makeNodeComponent("densityButton"),
    settingsButton: makeNodeComponent("settingsButton"),
    tableItems: makeNodeComponent("tableItems"),
    tableBody: makeNodeComponent("tableBody"),
    ctHeader: makeNodeComponent("ctHeader"),
    primaryCheckbox: makeNodeComponent("primaryCheckbox"),
    ctHeaderLabel: makeNodeComponent("ctHeaderLabel"),
    ctHeaderLabel2: makeNodeComponent("ctHeaderLabel2"),
    ctHeaderLabel3: makeNodeComponent("ctHeaderLabel3"),
    ctContent: makeNodeComponent("ctContent"),
    contentSection: makeNodeComponent("contentSection"),
    contentSection2: makeNodeComponent("contentSection2"),
    contentSection3: makeNodeComponent("contentSection3"),
    secondaryCheckbox: makeNodeComponent("secondaryCheckbox"),
    ctNoData: makeNodeComponent("ctNoData"),

    // Metadata about props expected for PlasmicCustomTable
    internalVariantProps: PlasmicCustomTable__VariantProps,
    internalArgProps: PlasmicCustomTable__ArgProps
  }
);

export default PlasmicCustomTable;
/* prettier-ignore-end */
