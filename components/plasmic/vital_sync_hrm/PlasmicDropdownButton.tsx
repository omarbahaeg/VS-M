// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: oUw-Oq8BPl_P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Icon from "../../Icon"; // plasmic-import: brSTv-__77Vi/component
import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicDropdownButton.module.css"; // plasmic-import: oUw-Oq8BPl_P/css

import SettingsSvgIcon from "./icons/PlasmicIcon__SettingsSvg"; // plasmic-import: naJAblHQSjQc/icon

createPlasmicElementProxy;

export type PlasmicDropdownButton__VariantMembers = {
  isOpen: "isOpen";
};
export type PlasmicDropdownButton__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};
type VariantPropType = keyof PlasmicDropdownButton__VariantsArgs;
export const PlasmicDropdownButton__VariantProps = new Array<VariantPropType>(
  "isOpen"
);

export type PlasmicDropdownButton__ArgsType = {
  slot?: React.ReactNode;
  tooltipContents?: string;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDropdownButton__ArgsType;
export const PlasmicDropdownButton__ArgProps = new Array<ArgPropType>(
  "slot",
  "tooltipContents",
  "children2"
);

export type PlasmicDropdownButton__OverridesType = {
  dropdownSection?: Flex__<"div">;
  button?: Flex__<"div">;
  buttonLabel?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultDropdownButtonProps {
  slot?: React.ReactNode;
  tooltipContents?: string;
  children2?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdownButton__RenderFunc(props: {
  variants: PlasmicDropdownButton__VariantsArgs;
  args: PlasmicDropdownButton__ArgsType;
  overrides: PlasmicDropdownButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tooltipContents: $translator?.("Settings") ?? "Settings"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args, $translator]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"dropdownSection"}
      data-plasmic-override={overrides.dropdownSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.dropdownSection,
        { [sty.dropdownSectionisOpen]: hasVariant($state, "isOpen", "isOpen") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        hasGap={true}
        className={classNames(projectcss.all, sty.button)}
      >
        <div
          data-plasmic-name={"buttonLabel"}
          data-plasmic-override={overrides.buttonLabel}
          className={classNames(projectcss.all, sty.buttonLabel)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <Trans__>{"Button"}</Trans__>
          </div>
        </div>
        {renderPlasmicSlot({
          defaultContents: (
            <Icon className={classNames("__wab_instance", sty.icon__ydKav)} />
          ),

          value: args.children2
        })}
      </Stack__>
      {renderPlasmicSlot({
        defaultContents: (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fbwfd)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___2MkG4)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h07K7
                )}
              >
                <Trans__>{"Dropdown Title"}</Trans__>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oB3Jt)}
            >
              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__vgJ9N)}
                isChecked={true}
              >
                <Trans__>{"Table Label"}</Trans__>
              </Checkbox>
            </Stack__>
          </Stack__>
        ),
        value: args.slot
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dropdownSection: ["dropdownSection", "button", "buttonLabel", "text"],
  button: ["button", "buttonLabel", "text"],
  buttonLabel: ["buttonLabel", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dropdownSection: "div";
  button: "div";
  buttonLabel: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdownButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdownButton__VariantsArgs;
    args?: PlasmicDropdownButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdownButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDropdownButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdownButton__ArgProps,
          internalVariantPropNames: PlasmicDropdownButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dropdownSection") {
    func.displayName = "PlasmicDropdownButton";
  } else {
    func.displayName = `PlasmicDropdownButton.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownButton = Object.assign(
  // Top-level PlasmicDropdownButton renders the root element
  makeNodeComponent("dropdownSection"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    buttonLabel: makeNodeComponent("buttonLabel"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicDropdownButton
    internalVariantProps: PlasmicDropdownButton__VariantProps,
    internalArgProps: PlasmicDropdownButton__ArgProps
  }
);

export default PlasmicDropdownButton;
/* prettier-ignore-end */
