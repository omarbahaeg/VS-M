// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: W-vsKXw-_8bg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Sidebar from "../../Sidebar"; // plasmic-import: MaimrxZZ2uDo/component
import Header from "../../Header"; // plasmic-import: zd496FfthYEg/component
import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuDivider } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItemGroup } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdSubMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button2 from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Footer from "../../Footer"; // plasmic-import: dIME4mUiH-Rp/component
import RightBar from "../../RightBar"; // plasmic-import: pW9ClsR7IfI0/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicAnalytics.module.css"; // plasmic-import: W-vsKXw-_8bg/css

import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: qKMzzxYWCT9r/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon
import PointerCodeSvgIcon from "./icons/PlasmicIcon__PointerCodeSvg"; // plasmic-import: SRvQOL_VCeU2/icon
import CheckSvgIcon from "../plasmic_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicAnalytics__VariantMembers = {};
export type PlasmicAnalytics__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalytics__VariantsArgs;
export const PlasmicAnalytics__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalytics__ArgsType = {};
type ArgPropType = keyof PlasmicAnalytics__ArgsType;
export const PlasmicAnalytics__ArgProps = new Array<ArgPropType>();

export type PlasmicAnalytics__OverridesType = {
  home?: Flex__<"div">;
  sidebar?: Flex__<typeof Sidebar>;
  body?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  content?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame8?: Flex__<"div">;
  hiKatiePena?: Flex__<"div">;
  welcomeBackToRhom?: Flex__<"div">;
  frame1?: Flex__<"div">;
  menuDivider?: Flex__<typeof AntdMenuDivider>;
  itemGroup?: Flex__<typeof AntdMenuItemGroup>;
  subMenu?: Flex__<typeof AntdSubMenu>;
  frame10?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  table?: Flex__<typeof RichTable>;
  footer?: Flex__<typeof Footer>;
  rightBar?: Flex__<typeof RightBar>;
  overlay?: Flex__<"section">;
};

export interface DefaultAnalyticsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnalytics__RenderFunc(props: {
  variants: PlasmicAnalytics__VariantsArgs;
  args: PlasmicAnalytics__ArgsType;
  overrides: PlasmicAnalytics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    user: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "39fc56d4-2f5e-4102-bdd2-c72491c1dc13",
        userArgs: {},
        cacheKey: `plasmic.$.39fc56d4-2f5e-4102-bdd2-c72491c1dc13.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    eSign: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "dead7ebe-265e-4262-a3ae-78041d232a01",
        userArgs: {},
        cacheKey: `plasmic.$.dead7ebe-265e-4262-a3ae-78041d232a01.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    employees: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "c0c3f78b-dfe5-4015-a5e3-04ffe1715358",
        userArgs: {},
        cacheKey: `plasmic.$.c0c3f78b-dfe5-4015-a5e3-04ffe1715358.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAnalytics.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.home
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              user={$queries.user}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame7)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame8)}
                >
                  <div
                    data-plasmic-name={"hiKatiePena"}
                    data-plasmic-override={overrides.hiKatiePena}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.hiKatiePena
                    )}
                  >
                    <Trans__>{"User Management"}</Trans__>
                  </div>
                  <div
                    data-plasmic-name={"welcomeBackToRhom"}
                    data-plasmic-override={overrides.welcomeBackToRhom}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.welcomeBackToRhom
                    )}
                  >
                    <Trans__>{"Welcome back to Rhombus CRM dashboard"}</Trans__>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1"}
                  data-plasmic-override={overrides.frame1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__pCi21)}
                    color={"green"}
                    shape={"rounded"}
                    showStartIcon={true}
                    size={"compact"}
                    startIcon={
                      <PlusSvgIcon
                        className={classNames(projectcss.all, sty.svg__qaGId)}
                        role={"img"}
                      />
                    }
                    submitsForm={false}
                  >
                    <Trans__>{"New User"}</Trans__>
                  </Button>
                </Stack__>
              </Stack__>
              <AntdMenu
                className={classNames("__wab_instance", sty.menu___5TT5K)}
                defaultSelectedKeys={(() => {
                  try {
                    return $ctx.pagePath;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                multiple={true}
              >
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__aNqHr)}
                  disabled={false}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zz30V
                    )}
                  >
                    <Trans__>{"Menu item"}</Trans__>
                  </div>
                </AntdMenuItem>
                <AntdMenuDivider
                  data-plasmic-name={"menuDivider"}
                  data-plasmic-override={overrides.menuDivider}
                  className={classNames("__wab_instance", sty.menuDivider)}
                />

                <AntdMenuItemGroup
                  data-plasmic-name={"itemGroup"}
                  data-plasmic-override={overrides.itemGroup}
                  className={classNames("__wab_instance", sty.itemGroup)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__elsNb
                      )}
                    >
                      <Trans__>{"Group"}</Trans__>
                    </div>
                  }
                >
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem___5HJlr
                    )}
                    key={"menuItemKey"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jChiL
                      )}
                    >
                      <Trans__>{"Menu item"}</Trans__>
                    </div>
                  </AntdMenuItem>
                </AntdMenuItemGroup>
                <AntdSubMenu
                  data-plasmic-name={"subMenu"}
                  data-plasmic-override={overrides.subMenu}
                  className={classNames("__wab_instance", sty.subMenu)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e5YyG
                      )}
                    >
                      <Trans__>{"Sub-menu"}</Trans__>
                    </div>
                  }
                >
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__m8K3G
                    )}
                    key={"subMenuItemKey1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qimo
                      )}
                    >
                      <Trans__>{"Sub-menu item 1"}</Trans__>
                    </div>
                  </AntdMenuItem>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__mWpHl
                    )}
                    key={"subMenuItemKey2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dghJo
                      )}
                    >
                      <Trans__>{"Sub-menu item 2"}</Trans__>
                    </div>
                  </AntdMenuItem>
                </AntdSubMenu>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__plGAz)}
                  key={"menuItemKey2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jnAmz
                    )}
                  >
                    <Trans__>{"Menu item"}</Trans__>
                  </div>
                </AntdMenuItem>
              </AntdMenu>
              <AntdMenu
                className={classNames("__wab_instance", sty.menu__ndAiq)}
                expandIcon={
                  <PointerCodeSvgIcon
                    className={classNames(projectcss.all, sty.svg__sdcdf)}
                    role={"img"}
                  />
                }
              >
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem___7IQvu)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ncvtF)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Vfg0
                      )}
                    >
                      <Trans__>{"Menu item"}</Trans__>
                    </div>
                  </div>
                </AntdMenuItem>
              </AntdMenu>
              <div
                data-plasmic-name={"frame10"}
                data-plasmic-override={overrides.frame10}
                className={classNames(projectcss.all, sty.frame10)}
              >
                <TabsContainer
                  data-plasmic-name={"tabsContainer"}
                  data-plasmic-override={overrides.tabsContainer}
                  className={classNames("__wab_instance", sty.tabsContainer)}
                  initialKey={"tab1"}
                  previewAll={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a4ZG3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oeAuq
                          )}
                        >
                          <TabButton
                            className={classNames(
                              "__wab_instance",
                              sty.tabButton___7XbGu
                            )}
                            tabKey={"tab1"}
                          >
                            <Button2 color={"clear"}>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rrqsP
                                )}
                              >
                                <Trans__>{"Users"}</Trans__>
                              </div>
                            </Button2>
                          </TabButton>
                          <TabButton
                            className={classNames(
                              "__wab_instance",
                              sty.tabButton__p4DJu
                            )}
                            tabKey={"tab2"}
                          >
                            <Button2 color={"clear"}>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0GSn0
                                )}
                              >
                                <Trans__>{"Activity"}</Trans__>
                              </div>
                            </Button2>
                          </TabButton>
                          <TabUnderline
                            data-plasmic-name={"tabUnderline"}
                            data-plasmic-override={overrides.tabUnderline}
                            className={classNames(
                              "__wab_instance",
                              sty.tabUnderline
                            )}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iy6BP
                          )}
                        >
                          <TabContent
                            className={classNames(
                              "__wab_instance",
                              sty.tabContent___5GLVz
                            )}
                            tabKey={"tab1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__etvzP
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  canSelectRows: "multiple",
                                  className: classNames(
                                    "__wab_instance",
                                    sty.table
                                  ),
                                  data: (() => {
                                    try {
                                      return $queries.eSign.data.response[
                                        "Awaiting Signatures"
                                      ].documents;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  fields: (() => {
                                    const __composite = [
                                      {
                                        key: "id",
                                        fieldId: "id",
                                        isHidden: null
                                      },
                                      {
                                        key: "Profile Picture",
                                        fieldId: "Profile Picture",
                                        isHidden: null
                                      },
                                      {
                                        key: "Username",
                                        fieldId: "Username",
                                        isHidden: null
                                      },
                                      {
                                        key: "First Name",
                                        fieldId: "First Name",
                                        isHidden: null
                                      },
                                      {
                                        key: "Last Name",
                                        fieldId: "Last Name",
                                        isHidden: null
                                      },
                                      {
                                        key: "Nickname",
                                        fieldId: "Nickname",
                                        isHidden: null
                                      },
                                      {
                                        key: "Display Name",
                                        fieldId: "Display Name",
                                        disableSorting: null,
                                        title: null
                                      },
                                      {
                                        key: "Email",
                                        fieldId: "Email",
                                        disableSorting: null
                                      },
                                      {
                                        key: "Website",
                                        fieldId: "Website",
                                        isHidden: null
                                      },
                                      {
                                        key: "Biographical Info",
                                        fieldId: "Biographical Info",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_avatar",
                                        fieldId: "_employee_avatar",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_email",
                                        fieldId: "_employee_email",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_birthday",
                                        fieldId: "_employee_birthday",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_phone",
                                        fieldId: "_employee_phone",
                                        disableSorting: null,
                                        title: null,
                                        dataType: null,
                                        maximumFractionDigits: null,
                                        minimumFractionDigits: null
                                      },
                                      {
                                        key: "_employee_address",
                                        fieldId: "_employee_address",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_address_2",
                                        fieldId: "_employee_address_2",
                                        isHidden: null
                                      },
                                      {
                                        key: "city",
                                        fieldId: "city",
                                        isHidden: null
                                      },
                                      {
                                        key: "state_province",
                                        fieldId: "state_province",
                                        isHidden: null
                                      },
                                      {
                                        key: "zip_postal_code",
                                        fieldId: "zip_postal_code",
                                        isHidden: null
                                      },
                                      {
                                        key: "country",
                                        fieldId: "country",
                                        isHidden: null
                                      },
                                      {
                                        key: "_professional_summary",
                                        fieldId: "_professional_summary",
                                        isHidden: null
                                      },
                                      {
                                        key: "_employee_skills",
                                        fieldId: "_employee_skills",
                                        isHidden: null
                                      },
                                      {
                                        key: "facebook",
                                        fieldId: "facebook",
                                        isHidden: null
                                      },
                                      {
                                        key: "twitter",
                                        fieldId: "twitter",
                                        isHidden: null
                                      },
                                      {
                                        key: "linkedin",
                                        fieldId: "linkedin",
                                        isHidden: null
                                      },
                                      {
                                        key: "services_agreement_approval",
                                        fieldId: "services_agreement_approval",
                                        isHidden: null
                                      },
                                      {
                                        key: "services_agreement_status",
                                        fieldId: "services_agreement_status",
                                        isHidden: null
                                      },
                                      {
                                        key: "employee_status",
                                        fieldId: "employee_status",
                                        title: null
                                      },
                                      {
                                        key: "points",
                                        fieldId: "points",
                                        isHidden: null
                                      },
                                      {
                                        key: "alert",
                                        fieldId: "alert",
                                        isHidden: null
                                      },
                                      {
                                        key: "Registered on",
                                        fieldId: "Registered on",
                                        dataType: null,
                                        dateStyle: null,
                                        timeStyle: null,
                                        title: null
                                      },
                                      {
                                        key: "Is Online",
                                        fieldId: "Is Online",
                                        isHidden: null
                                      },
                                      {
                                        key: "Last Login",
                                        fieldId: "Last Login",
                                        isHidden: null
                                      },
                                      {
                                        key: "Last Logout",
                                        fieldId: "Last Logout",
                                        isHidden: null
                                      },
                                      {
                                        key: "Visited Pages",
                                        fieldId: "Visited Pages",
                                        isHidden: null
                                      }
                                    ];
                                    __composite["0"]["isHidden"] = true;
                                    __composite["1"]["isHidden"] = true;
                                    __composite["2"]["isHidden"] = true;
                                    __composite["3"]["isHidden"] = true;
                                    __composite["4"]["isHidden"] = true;
                                    __composite["5"]["isHidden"] = true;
                                    __composite["6"]["disableSorting"] = true;
                                    __composite["6"]["title"] = "Name";
                                    __composite["7"]["disableSorting"] = true;
                                    __composite["8"]["isHidden"] = true;
                                    __composite["9"]["isHidden"] = true;
                                    __composite["10"]["isHidden"] = true;
                                    __composite["11"]["isHidden"] = true;
                                    __composite["12"]["isHidden"] = true;
                                    __composite["13"]["disableSorting"] = true;
                                    __composite["13"]["title"] = "Phone";
                                    __composite["13"]["dataType"] = "auto";
                                    __composite["13"][
                                      "maximumFractionDigits"
                                    ] = 10;
                                    __composite["13"][
                                      "minimumFractionDigits"
                                    ] = 10;
                                    __composite["14"]["isHidden"] = true;
                                    __composite["15"]["isHidden"] = true;
                                    __composite["16"]["isHidden"] = true;
                                    __composite["17"]["isHidden"] = true;
                                    __composite["18"]["isHidden"] = true;
                                    __composite["19"]["isHidden"] = true;
                                    __composite["20"]["isHidden"] = true;
                                    __composite["21"]["isHidden"] = true;
                                    __composite["22"]["isHidden"] = true;
                                    __composite["23"]["isHidden"] = true;
                                    __composite["24"]["isHidden"] = true;
                                    __composite["25"]["isHidden"] = true;
                                    __composite["26"]["isHidden"] = true;
                                    __composite["27"]["title"] = "Status";
                                    __composite["28"]["isHidden"] = true;
                                    __composite["29"]["isHidden"] = true;
                                    __composite["30"]["dataType"] = "datetime";
                                    __composite["30"]["dateStyle"] = "medium";
                                    __composite["30"]["timeStyle"] = "none";
                                    __composite["30"]["title"] = "Join on";
                                    __composite["31"]["isHidden"] = true;
                                    __composite["32"]["isHidden"] = true;
                                    __composite["33"]["isHidden"] = true;
                                    __composite["34"]["isHidden"] = true;
                                    return __composite;
                                  })(),

                                  hideDensity: false,
                                  hideSelectionBar: true,
                                  rowActions: (() => {
                                    const __composite = [
                                      { type: "item", label: null },
                                      { type: null, label: null }
                                    ];
                                    __composite["0"]["label"] = "Edit";
                                    __composite["1"]["type"] = "item";
                                    __composite["1"]["label"] = "Delete";
                                    return __composite;
                                  })(),

                                  rowKey: ``,
                                  scopeClassName: sty["table__instance"],
                                  themeResetClassName: classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )
                                };

                                return (
                                  <RichTable
                                    data-plasmic-name={"table"}
                                    data-plasmic-override={overrides.table}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </TabContent>
                          <TabContent
                            className={classNames(
                              "__wab_instance",
                              sty.tabContent___9DI0B
                            )}
                            tabKey={"tab2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zDxp0
                              )}
                            />
                          </TabContent>
                        </div>
                      </div>
                    )}
                  </DataCtxReader__>
                </TabsContainer>
              </div>
            </Stack__>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
          <RightBar
            data-plasmic-name={"rightBar"}
            data-plasmic-override={overrides.rightBar}
            className={classNames("__wab_instance", sty.rightBar)}
          />

          <section
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames(projectcss.all, sty.overlay)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "sidebar",
    "body",
    "header",
    "content",
    "frame7",
    "frame8",
    "hiKatiePena",
    "welcomeBackToRhom",
    "frame1",
    "menuDivider",
    "itemGroup",
    "subMenu",
    "frame10",
    "tabsContainer",
    "tabUnderline",
    "table",
    "footer",
    "rightBar",
    "overlay"
  ],
  sidebar: ["sidebar"],
  body: [
    "body",
    "header",
    "content",
    "frame7",
    "frame8",
    "hiKatiePena",
    "welcomeBackToRhom",
    "frame1",
    "menuDivider",
    "itemGroup",
    "subMenu",
    "frame10",
    "tabsContainer",
    "tabUnderline",
    "table",
    "footer"
  ],
  header: ["header"],
  content: [
    "content",
    "frame7",
    "frame8",
    "hiKatiePena",
    "welcomeBackToRhom",
    "frame1",
    "menuDivider",
    "itemGroup",
    "subMenu",
    "frame10",
    "tabsContainer",
    "tabUnderline",
    "table"
  ],
  frame7: ["frame7", "frame8", "hiKatiePena", "welcomeBackToRhom", "frame1"],
  frame8: ["frame8", "hiKatiePena", "welcomeBackToRhom"],
  hiKatiePena: ["hiKatiePena"],
  welcomeBackToRhom: ["welcomeBackToRhom"],
  frame1: ["frame1"],
  menuDivider: ["menuDivider"],
  itemGroup: ["itemGroup"],
  subMenu: ["subMenu"],
  frame10: ["frame10", "tabsContainer", "tabUnderline", "table"],
  tabsContainer: ["tabsContainer", "tabUnderline", "table"],
  tabUnderline: ["tabUnderline"],
  table: ["table"],
  footer: ["footer"],
  rightBar: ["rightBar"],
  overlay: ["overlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  sidebar: typeof Sidebar;
  body: "div";
  header: typeof Header;
  content: "div";
  frame7: "div";
  frame8: "div";
  hiKatiePena: "div";
  welcomeBackToRhom: "div";
  frame1: "div";
  menuDivider: typeof AntdMenuDivider;
  itemGroup: typeof AntdMenuItemGroup;
  subMenu: typeof AntdSubMenu;
  frame10: "div";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  table: typeof RichTable;
  footer: typeof Footer;
  rightBar: typeof RightBar;
  overlay: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalytics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalytics__VariantsArgs;
    args?: PlasmicAnalytics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalytics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAnalytics__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnalytics__ArgProps,
          internalVariantPropNames: PlasmicAnalytics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnalytics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicAnalytics";
  } else {
    func.displayName = `PlasmicAnalytics.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalytics = Object.assign(
  // Top-level PlasmicAnalytics renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    body: makeNodeComponent("body"),
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    hiKatiePena: makeNodeComponent("hiKatiePena"),
    welcomeBackToRhom: makeNodeComponent("welcomeBackToRhom"),
    frame1: makeNodeComponent("frame1"),
    menuDivider: makeNodeComponent("menuDivider"),
    itemGroup: makeNodeComponent("itemGroup"),
    subMenu: makeNodeComponent("subMenu"),
    frame10: makeNodeComponent("frame10"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    table: makeNodeComponent("table"),
    footer: makeNodeComponent("footer"),
    rightBar: makeNodeComponent("rightBar"),
    overlay: makeNodeComponent("overlay"),

    // Metadata about props expected for PlasmicAnalytics
    internalVariantProps: PlasmicAnalytics__VariantProps,
    internalArgProps: PlasmicAnalytics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: " Analytics",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAnalytics;
/* prettier-ignore-end */
