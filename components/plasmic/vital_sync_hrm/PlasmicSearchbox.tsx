// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: HxIP9-DtSGaj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSearchbox.module.css"; // plasmic-import: HxIP9-DtSGaj/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: s6V8mYogtXIl/icon
import CloseSvgIcon from "./icons/PlasmicIcon__CloseSvg"; // plasmic-import: IGlXIVeYZFwp/icon

createPlasmicElementProxy;

export type PlasmicSearchbox__VariantMembers = {
  showStartIcon: "showStartIcon";
  collapsed: "collapsed";
  isDisabled: "isDisabled";
  color: "dark";
};
export type PlasmicSearchbox__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicSearchbox__VariantsArgs;
export const PlasmicSearchbox__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "collapsed",
  "isDisabled",
  "color"
);

export type PlasmicSearchbox__ArgsType = {
  placeholder?: string;
  ariaLabel?: string;
  ariaLabelledby?: string;
  name?: string;
  type?:
    | "text"
    | "password"
    | "hidden"
    | "number"
    | "date"
    | "datetime-local"
    | "time"
    | "email"
    | "tel";
  value?: string;
  onValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSearchbox__ArgsType;
export const PlasmicSearchbox__ArgProps = new Array<ArgPropType>(
  "placeholder",
  "ariaLabel",
  "ariaLabelledby",
  "name",
  "type",
  "value",
  "onValueChange"
);

export type PlasmicSearchbox__OverridesType = {
  searchbox?: Flex__<"div">;
  startIconContainer?: Flex__<"div">;
  searchInput?: Flex__<"input">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultSearchboxProps {
  placeholder?: string;
  ariaLabel?: string;
  ariaLabelledby?: string;
  name?: string;
  type?:
    | "text"
    | "password"
    | "hidden"
    | "number"
    | "date"
    | "datetime-local"
    | "time"
    | "email"
    | "tel";
  value?: string;
  onValueChange?: (val: string) => void;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchbox__RenderFunc(props: {
  variants: PlasmicSearchbox__VariantsArgs;
  args: PlasmicSearchbox__ArgsType;
  overrides: PlasmicSearchbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "Search...",
          type: "text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["value"]
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onValueChange"
      },
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [
    isSearchboxFocusVisibleWithin,
    triggerSearchboxFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false
  });
  const triggers = {
    focusVisibleWithin_searchbox: isSearchboxFocusVisibleWithin
  };

  return (
    <div
      data-plasmic-name={"searchbox"}
      data-plasmic-override={overrides.searchbox}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.searchbox,
        {
          [sty.searchbox___focusVisibleWithin]:
            triggers.focusVisibleWithin_searchbox,
          [sty.searchbox___focusVisibleWithin_color_dark]:
            hasVariant($state, "color", "dark") &&
            triggers.focusVisibleWithin_searchbox,
          [sty.searchboxcollapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          ),
          [sty.searchboxcolor_dark]: hasVariant($state, "color", "dark"),
          [sty.searchboxisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.searchboxshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerSearchboxFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"startIconContainer"}
        data-plasmic-override={overrides.startIconContainer}
        className={classNames(projectcss.all, sty.startIconContainer, {
          [sty.startIconContainercollapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          ),
          [sty.startIconContainershowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          )
        })}
      >
        <SearchSvgIcon
          className={classNames(projectcss.all, sty.svg__eUsqL, {
            [sty.svgcolor_dark__eUsqLjd9Bf]: hasVariant($state, "color", "dark")
          })}
          role={"img"}
        />
      </div>
      <input
        data-plasmic-name={"searchInput"}
        data-plasmic-override={overrides.searchInput}
        aria-label={args.ariaLabel}
        aria-labelledby={args.ariaLabelledby}
        className={classNames(
          projectcss.all,
          projectcss.input,
          sty.searchInput,
          "searchbox-search-input",
          {
            [sty.searchInput___focusVisibleWithin]:
              triggers.focusVisibleWithin_searchbox,
            [sty.searchInputcollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            ),
            [sty.searchInputcolor_dark]: hasVariant($state, "color", "dark"),
            [sty.searchInputisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            )
          }
        )}
        disabled={
          hasVariant($state, "isDisabled", "isDisabled") ? true : undefined
        }
        name={args.name}
        onChange={e => {
          generateStateOnChangeProp($state, ["searchInput", "value"])(
            e.target.value
          );
        }}
        placeholder={args.placeholder}
        ref={ref => {
          $refs["searchInput"] = ref;
        }}
        type={args.type}
        value={generateStateValueProp($state, ["searchInput", "value"]) ?? ""}
      />

      {(
        hasVariant($state, "collapsed", "collapsed")
          ? true
          : (() => {
              try {
                return $state.searchInput.value !== "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer, {
            [sty.endIconContainercollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateSearchInputValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["searchInput", "value"]
                    },
                    operation: 0,
                    value: ""
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSearchInputValue"] != null &&
              typeof $steps["updateSearchInputValue"] === "object" &&
              typeof $steps["updateSearchInputValue"].then === "function"
            ) {
              $steps["updateSearchInputValue"] = await $steps[
                "updateSearchInputValue"
              ];
            }
          }}
        >
          <CloseSvgIcon
            className={classNames(projectcss.all, sty.svg___6X7B)}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  searchbox: [
    "searchbox",
    "startIconContainer",
    "searchInput",
    "endIconContainer"
  ],
  startIconContainer: ["startIconContainer"],
  searchInput: ["searchInput"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  searchbox: "div";
  startIconContainer: "div";
  searchInput: "input";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchbox__VariantsArgs;
    args?: PlasmicSearchbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearchbox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchbox__ArgProps,
          internalVariantPropNames: PlasmicSearchbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "searchbox") {
    func.displayName = "PlasmicSearchbox";
  } else {
    func.displayName = `PlasmicSearchbox.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbox = Object.assign(
  // Top-level PlasmicSearchbox renders the root element
  makeNodeComponent("searchbox"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    searchInput: makeNodeComponent("searchInput"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicSearchbox
    internalVariantProps: PlasmicSearchbox__VariantProps,
    internalArgProps: PlasmicSearchbox__ArgProps
  }
);

export default PlasmicSearchbox;
/* prettier-ignore-end */
