// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: 9cv68har2lH1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CtCheckbox from "../../CtCheckbox"; // plasmic-import: h4AhLHpwZjUP/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCtData.module.css"; // plasmic-import: 9cv68har2lH1/css

import DownCircleSvgIcon from "./icons/PlasmicIcon__DownCircleSvg"; // plasmic-import: v7UTCNMEbebw/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: -T_ZDw4_KsiR/icon

createPlasmicElementProxy;

export type PlasmicCtData__VariantMembers = {
  checkbox: "checkbox";
  expand: "expand";
  more: "more";
  isOpen: "isOpen";
};
export type PlasmicCtData__VariantsArgs = {
  checkbox?: SingleBooleanChoiceArg<"checkbox">;
  expand?: SingleBooleanChoiceArg<"expand">;
  more?: SingleBooleanChoiceArg<"more">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};
type VariantPropType = keyof PlasmicCtData__VariantsArgs;
export const PlasmicCtData__VariantProps = new Array<VariantPropType>(
  "checkbox",
  "expand",
  "more",
  "isOpen"
);

export type PlasmicCtData__ArgsType = {
  contetnt?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCtData__ArgsType;
export const PlasmicCtData__ArgProps = new Array<ArgPropType>("contetnt");

export type PlasmicCtData__OverridesType = {
  root?: Flex__<"div">;
  checkboxSection?: Flex__<"div">;
  ctCheckbox?: Flex__<typeof CtCheckbox>;
  expandSection?: Flex__<"div">;
  contentSection?: Flex__<"div">;
  moreSection?: Flex__<"div">;
  detailsSection?: Flex__<"div">;
};

export interface DefaultCtDataProps {
  contetnt?: React.ReactNode;
  checkbox?: SingleBooleanChoiceArg<"checkbox">;
  expand?: SingleBooleanChoiceArg<"expand">;
  more?: SingleBooleanChoiceArg<"more">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtData__RenderFunc(props: {
  variants: PlasmicCtData__VariantsArgs;
  args: PlasmicCtData__ArgsType;
  overrides: PlasmicCtData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.checkbox
      },
      {
        path: "expand",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expand
      },
      {
        path: "more",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.more
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen
      },
      {
        path: "ctCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootexpand]: hasVariant($state, "expand", "expand"),
          [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen"),
          [sty.rootisOpen_expand]:
            hasVariant($state, "isOpen", "isOpen") &&
            hasVariant($state, "expand", "expand"),
          [sty.rootmore]: hasVariant($state, "more", "more")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__aaVXq, {
          [sty.freeBoxcheckbox__aaVXq3Ll6]: hasVariant(
            $state,
            "checkbox",
            "checkbox"
          ),
          [sty.freeBoxisOpen__aaVXq4HviL]: hasVariant(
            $state,
            "isOpen",
            "isOpen"
          ),
          [sty.freeBoxmore__aaVXqPwW88]: hasVariant($state, "more", "more")
        })}
      >
        <div
          data-plasmic-name={"checkboxSection"}
          data-plasmic-override={overrides.checkboxSection}
          className={classNames(projectcss.all, sty.checkboxSection, {
            [sty.checkboxSectioncheckbox]: hasVariant(
              $state,
              "checkbox",
              "checkbox"
            )
          })}
        >
          <CtCheckbox
            data-plasmic-name={"ctCheckbox"}
            data-plasmic-override={overrides.ctCheckbox}
            className={classNames("__wab_instance", sty.ctCheckbox)}
            isChecked={
              generateStateValueProp($state, ["ctCheckbox", "isChecked"]) ??
              false
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["ctCheckbox", "isChecked"])(
                eventArgs[0]
              );
            }}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__t8Fzc, {
            [sty.freeBoxisOpen__t8Fzc4HviL]: hasVariant(
              $state,
              "isOpen",
              "isOpen"
            )
          })}
        >
          <div
            data-plasmic-name={"expandSection"}
            data-plasmic-override={overrides.expandSection}
            className={classNames(projectcss.all, sty.expandSection, {
              [sty.expandSectionexpand]: hasVariant($state, "expand", "expand")
            })}
          >
            <DownCircleSvgIcon
              className={classNames(projectcss.all, sty.svg__bH7Vk, {
                [sty.svgexpand__bH7VkkFx0P]: hasVariant(
                  $state,
                  "expand",
                  "expand"
                ),
                [sty.svgisOpen_expand__bH7Vk4HviLKFx0P]:
                  hasVariant($state, "expand", "expand") &&
                  hasVariant($state, "isOpen", "isOpen")
              })}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"contentSection"}
            data-plasmic-override={overrides.contentSection}
            className={classNames(projectcss.all, sty.contentSection, {
              [sty.contentSectionisOpen]: hasVariant($state, "isOpen", "isOpen")
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.freeBox__dcMa3)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ff22J
                    )}
                  >
                    <Trans__>{"Name"}</Trans__>
                  </div>
                </div>
              ),
              value: args.contetnt
            })}
          </div>
        </div>
        <div
          data-plasmic-name={"moreSection"}
          data-plasmic-override={overrides.moreSection}
          className={classNames(projectcss.all, sty.moreSection, {
            [sty.moreSectionmore]: hasVariant($state, "more", "more")
          })}
        >
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__hf2Jw)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"detailsSection"}
        data-plasmic-override={overrides.detailsSection}
        className={classNames(projectcss.all, sty.detailsSection, {
          [sty.detailsSectioncheckbox]: hasVariant(
            $state,
            "checkbox",
            "checkbox"
          ),
          [sty.detailsSectionisOpen]: hasVariant($state, "isOpen", "isOpen")
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkboxSection",
    "ctCheckbox",
    "expandSection",
    "contentSection",
    "moreSection",
    "detailsSection"
  ],
  checkboxSection: ["checkboxSection", "ctCheckbox"],
  ctCheckbox: ["ctCheckbox"],
  expandSection: ["expandSection"],
  contentSection: ["contentSection"],
  moreSection: ["moreSection"],
  detailsSection: ["detailsSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkboxSection: "div";
  ctCheckbox: typeof CtCheckbox;
  expandSection: "div";
  contentSection: "div";
  moreSection: "div";
  detailsSection: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtData__VariantsArgs;
    args?: PlasmicCtData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtData__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtData__ArgProps,
          internalVariantPropNames: PlasmicCtData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCtData";
  } else {
    func.displayName = `PlasmicCtData.${nodeName}`;
  }
  return func;
}

export const PlasmicCtData = Object.assign(
  // Top-level PlasmicCtData renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkboxSection: makeNodeComponent("checkboxSection"),
    ctCheckbox: makeNodeComponent("ctCheckbox"),
    expandSection: makeNodeComponent("expandSection"),
    contentSection: makeNodeComponent("contentSection"),
    moreSection: makeNodeComponent("moreSection"),
    detailsSection: makeNodeComponent("detailsSection"),

    // Metadata about props expected for PlasmicCtData
    internalVariantProps: PlasmicCtData__VariantProps,
    internalArgProps: PlasmicCtData__ArgProps
  }
);

export default PlasmicCtData;
/* prettier-ignore-end */
