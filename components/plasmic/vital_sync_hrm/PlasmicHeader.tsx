// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: zd496FfthYEg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RightBarToggle from "../../RightBarToggle"; // plasmic-import: 7-guXMnuxTk_/component

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: zd496FfthYEg/css

import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: yj3hHsNYYAuP/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: tfoFva40Lasy/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: qYDC0LhkIc2_/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: fWVG_utiKGQ1/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  user?: any;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>("user");

export type PlasmicHeader__OverridesType = {
  header?: Flex__<"div">;
  rightBarToggle?: Flex__<typeof RightBarToggle>;
  breadcrumb?: Flex__<"div">;
  button?: Flex__<"div">;
  text106?: Flex__<"div">;
  text107?: Flex__<"div">;
  text108?: Flex__<"div">;
  text109?: Flex__<"div">;
  button2?: Flex__<"div">;
  text110?: Flex__<"div">;
  text111?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  userAvatar?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultHeaderProps {
  user?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.header
      )}
    >
      <Stack__
        as={"section"}
        hasGap={true}
        className={classNames(projectcss.all, sty.section__fSzN6)}
      >
        <Icon24Icon
          className={classNames(projectcss.all, sty.svg__rN6Bm)}
          role={"img"}
        />

        <RightBarToggle
          data-plasmic-name={"rightBarToggle"}
          data-plasmic-override={overrides.rightBarToggle}
          className={classNames("__wab_instance", sty.rightBarToggle)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"breadcrumb"}
          data-plasmic-override={overrides.breadcrumb}
          hasGap={true}
          className={classNames(projectcss.all, sty.breadcrumb)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            hasGap={true}
            className={classNames(projectcss.all, sty.button)}
          >
            <div
              data-plasmic-name={"text106"}
              data-plasmic-override={overrides.text106}
              className={classNames(projectcss.all, sty.text106)}
            >
              <div
                data-plasmic-name={"text107"}
                data-plasmic-override={overrides.text107}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text107
                )}
              >
                <Trans__>{"Dashboards"}</Trans__>
              </div>
            </div>
          </Stack__>
          <div
            data-plasmic-name={"text108"}
            data-plasmic-override={overrides.text108}
            className={classNames(projectcss.all, sty.text108)}
          >
            <div
              data-plasmic-name={"text109"}
              data-plasmic-override={overrides.text109}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text109
              )}
            >
              <Trans__>{"/"}</Trans__>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            hasGap={true}
            className={classNames(projectcss.all, sty.button2)}
          >
            <div
              data-plasmic-name={"text110"}
              data-plasmic-override={overrides.text110}
              className={classNames(projectcss.all, sty.text110)}
            >
              <div
                data-plasmic-name={"text111"}
                data-plasmic-override={overrides.text111}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text111
                )}
              >
                <Trans__>{"Default"}</Trans__>
              </div>
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"section"}
        hasGap={true}
        className={classNames(projectcss.all, sty.section___9DhMg)}
      >
        <Icon22Icon
          className={classNames(projectcss.all, sty.svg__zg93Y)}
          role={"img"}
        />

        <section className={classNames(projectcss.all, sty.section__inwFm)}>
          <Icon21Icon
            className={classNames(projectcss.all, sty.svg__vhrCq)}
            role={"img"}
          />

          <section className={classNames(projectcss.all, sty.section__dubfV)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8MT3L
              )}
            >
              <Trans__>{"0"}</Trans__>
            </div>
          </section>
        </section>
        <section className={classNames(projectcss.all, sty.section___2Mag)}>
          <Icon20Icon
            className={classNames(projectcss.all, sty.svg__pKyTw)}
            role={"img"}
          />

          <section className={classNames(projectcss.all, sty.section__rrn8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xtv6X
              )}
            >
              <Trans__>{"0"}</Trans__>
            </div>
          </section>
        </section>
      </Stack__>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"userAvatar"}
          data-plasmic-override={overrides.userAvatar}
          alt={""}
          className={classNames(sty.userAvatar)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          height={"40"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.user.data.response[6].avatar;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: "/plasmic/vital_sync_hrm/images/defaultUserImagePng.png",
                  fullWidth: 1280,
                  fullHeight: 1280,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
          width={"40"}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "rightBarToggle",
    "breadcrumb",
    "button",
    "text106",
    "text107",
    "text108",
    "text109",
    "button2",
    "text110",
    "text111",
    "freeBox",
    "userAvatar"
  ],
  rightBarToggle: ["rightBarToggle"],
  breadcrumb: [
    "breadcrumb",
    "button",
    "text106",
    "text107",
    "text108",
    "text109",
    "button2",
    "text110",
    "text111"
  ],
  button: ["button", "text106", "text107"],
  text106: ["text106", "text107"],
  text107: ["text107"],
  text108: ["text108", "text109"],
  text109: ["text109"],
  button2: ["button2", "text110", "text111"],
  text110: ["text110", "text111"],
  text111: ["text111"],
  freeBox: ["freeBox", "userAvatar"],
  userAvatar: ["userAvatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  rightBarToggle: typeof RightBarToggle;
  breadcrumb: "div";
  button: "div";
  text106: "div";
  text107: "div";
  text108: "div";
  text109: "div";
  button2: "div";
  text110: "div";
  text111: "div";
  freeBox: "div";
  userAvatar: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    rightBarToggle: makeNodeComponent("rightBarToggle"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    button: makeNodeComponent("button"),
    text106: makeNodeComponent("text106"),
    text107: makeNodeComponent("text107"),
    text108: makeNodeComponent("text108"),
    text109: makeNodeComponent("text109"),
    button2: makeNodeComponent("button2"),
    text110: makeNodeComponent("text110"),
    text111: makeNodeComponent("text111"),
    freeBox: makeNodeComponent("freeBox"),
    userAvatar: makeNodeComponent("userAvatar"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
