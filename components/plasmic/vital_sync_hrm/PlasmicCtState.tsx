// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: W3XppgG_PD08

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCtState.module.css"; // plasmic-import: W3XppgG_PD08/css

import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: fQuvc6bYBWs_/icon

createPlasmicElementProxy;

export type PlasmicCtState__VariantMembers = {
  stateTypes: "sorting" | "info";
  sortTypes: "ascending" | "descending";
};
export type PlasmicCtState__VariantsArgs = {
  stateTypes?: SingleChoiceArg<"sorting" | "info">;
  sortTypes?: MultiChoiceArg<"ascending" | "descending">;
};
type VariantPropType = keyof PlasmicCtState__VariantsArgs;
export const PlasmicCtState__VariantProps = new Array<VariantPropType>(
  "stateTypes",
  "sortTypes"
);

export type PlasmicCtState__ArgsType = {
  children?: React.ReactNode;
  infoTooltip?: string;
};
type ArgPropType = keyof PlasmicCtState__ArgsType;
export const PlasmicCtState__ArgProps = new Array<ArgPropType>(
  "children",
  "infoTooltip"
);

export type PlasmicCtState__OverridesType = {
  state?: Flex__<"div">;
  line?: Flex__<"div">;
  label?: Flex__<"div">;
  sorting?: Flex__<"div">;
  infoIcon?: Flex__<"div">;
};

export interface DefaultCtStateProps {
  children?: React.ReactNode;
  infoTooltip?: string;
  stateTypes?: SingleChoiceArg<"sorting" | "info">;
  sortTypes?: MultiChoiceArg<"ascending" | "descending">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtState__RenderFunc(props: {
  variants: PlasmicCtState__VariantsArgs;
  args: PlasmicCtState__ArgsType;
  overrides: PlasmicCtState__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          infoTooltip: $translator?.("Tooltip info...") ?? "Tooltip info..."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args, $translator]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stateTypes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stateTypes
      },
      {
        path: "sortTypes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sortTypes
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"state"}
      data-plasmic-override={overrides.state}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.state,
        {
          [sty.statesortTypes_ascending]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.statesortTypes_descending]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          ),
          [sty.statestateTypes_info]: hasVariant($state, "stateTypes", "info"),
          [sty.statestateTypes_sorting]: hasVariant(
            $state,
            "stateTypes",
            "sorting"
          ),
          [sty.statestateTypes_sorting_sortTypes_ascending]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "ascending"),
          [sty.statestateTypes_sorting_sortTypes_descending]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "descending")
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return (() => {
                    if ($state.stateTypes === "sorting") {
                      if (!Array.isArray($state.sortTypes)) {
                        $state.sortTypes = [];
                      }
                      const ascendingIndex =
                        $state.sortTypes.indexOf("ascending");
                      const descendingIndex =
                        $state.sortTypes.indexOf("descending");
                      if (ascendingIndex === -1 && descendingIndex === -1) {
                        return $state.sortTypes.push("ascending");
                      } else if (ascendingIndex !== -1) {
                        $state.sortTypes.splice(ascendingIndex, 1);
                        return $state.sortTypes.push("descending");
                      } else if (descendingIndex !== -1) {
                        return $state.sortTypes.splice(descendingIndex, 1);
                      }
                    }
                  })();
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
    >
      <div
        data-plasmic-name={"line"}
        data-plasmic-override={overrides.line}
        className={classNames(projectcss.all, sty.line, {
          [sty.linesortTypes_ascending]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.linesortTypes_descending]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          )
        })}
      />

      <div
        data-plasmic-name={"label"}
        data-plasmic-override={overrides.label}
        className={classNames(projectcss.all, sty.label, {
          [sty.labelsortTypes_ascending]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.labelsortTypes_descending]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          ),
          [sty.labelstateTypes_info]: hasVariant($state, "stateTypes", "info"),
          [sty.labelstateTypes_sorting]: hasVariant(
            $state,
            "stateTypes",
            "sorting"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: <Trans__>{"Name"}</Trans__>,
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
      <AntdTooltip
        className={classNames("__wab_instance", sty.tooltip__gxiBj, {
          [sty.tooltipsortTypes_ascending__gxiBjvl4Hk]: hasVariant(
            $state,
            "sortTypes",
            "ascending"
          ),
          [sty.tooltipsortTypes_descending__gxiBjLkQq]: hasVariant(
            $state,
            "sortTypes",
            "descending"
          ),
          [sty.tooltipstateTypes_info__gxiBjs9T0N]: hasVariant(
            $state,
            "stateTypes",
            "info"
          ),
          [sty.tooltipstateTypes_sorting__gxiBjUyfhM]: hasVariant(
            $state,
            "stateTypes",
            "sorting"
          ),
          [sty.tooltipstateTypes_sorting_sortTypes_ascending__gxiBjUyfhMVl4Hk]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "ascending"),
          [sty.tooltipstateTypes_sorting_sortTypes_descending__gxiBjUyfhMLkQq]:
            hasVariant($state, "stateTypes", "sorting") &&
            hasVariant($state, "sortTypes", "descending")
        })}
        titleText={
          hasVariant($state, "sortTypes", "descending")
            ? "Click to cancel sorting"
            : hasVariant($state, "sortTypes", "ascending")
            ? "Click to sort descending"
            : "Click to sort ascending"
        }
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"sorting"}
          data-plasmic-override={overrides.sorting}
          hasGap={true}
          className={classNames(projectcss.all, sty.sorting, {
            [sty.sortingstateTypes_sorting]: hasVariant(
              $state,
              "stateTypes",
              "sorting"
            )
          })}
        >
          <svg
            className={classNames(projectcss.all, sty.svg__ogHj, {
              [sty.svgsortTypes_ascending__ogHjVl4Hk]: hasVariant(
                $state,
                "sortTypes",
                "ascending"
              ),
              [sty.svgstateTypes_sorting__ogHjUyfhM]: hasVariant(
                $state,
                "stateTypes",
                "sorting"
              ),
              [sty.svgstateTypes_sorting_sortTypes_ascending__ogHjUyfhMVl4Hk]:
                hasVariant($state, "stateTypes", "sorting") &&
                hasVariant($state, "sortTypes", "ascending")
            })}
            role={"img"}
          />

          <svg
            className={classNames(projectcss.all, sty.svg__jJvSn, {
              [sty.svgsortTypes_ascending__jJvSnVl4Hk]: hasVariant(
                $state,
                "sortTypes",
                "ascending"
              ),
              [sty.svgsortTypes_descending__jJvSnLkQq]: hasVariant(
                $state,
                "sortTypes",
                "descending"
              ),
              [sty.svgstateTypes_sorting__jJvSnUyfhM]: hasVariant(
                $state,
                "stateTypes",
                "sorting"
              ),
              [sty.svgstateTypes_sorting_sortTypes_descending__jJvSnUyfhMLkQq]:
                hasVariant($state, "stateTypes", "sorting") &&
                hasVariant($state, "sortTypes", "descending")
            })}
            role={"img"}
          />
        </Stack__>
      </AntdTooltip>
      <AntdTooltip
        className={classNames("__wab_instance", sty.tooltip__n0OU, {
          [sty.tooltipstateTypes_info__n0OUS9T0N]: hasVariant(
            $state,
            "stateTypes",
            "info"
          )
        })}
        titleText={args.infoTooltip}
      >
        <div
          data-plasmic-name={"infoIcon"}
          data-plasmic-override={overrides.infoIcon}
          className={classNames(projectcss.all, sty.infoIcon)}
        >
          <Icon37Icon
            className={classNames(projectcss.all, sty.svg__kyEuD)}
            role={"img"}
          />
        </div>
      </AntdTooltip>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  state: ["state", "line", "label", "sorting", "infoIcon"],
  line: ["line"],
  label: ["label"],
  sorting: ["sorting"],
  infoIcon: ["infoIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  state: "div";
  line: "div";
  label: "div";
  sorting: "div";
  infoIcon: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtState__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtState__VariantsArgs;
    args?: PlasmicCtState__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtState__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtState__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtState__ArgProps,
          internalVariantPropNames: PlasmicCtState__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtState__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "state") {
    func.displayName = "PlasmicCtState";
  } else {
    func.displayName = `PlasmicCtState.${nodeName}`;
  }
  return func;
}

export const PlasmicCtState = Object.assign(
  // Top-level PlasmicCtState renders the root element
  makeNodeComponent("state"),
  {
    // Helper components rendering sub-elements
    line: makeNodeComponent("line"),
    label: makeNodeComponent("label"),
    sorting: makeNodeComponent("sorting"),
    infoIcon: makeNodeComponent("infoIcon"),

    // Metadata about props expected for PlasmicCtState
    internalVariantProps: PlasmicCtState__VariantProps,
    internalArgProps: PlasmicCtState__ArgProps
  }
);

export default PlasmicCtState;
/* prettier-ignore-end */
