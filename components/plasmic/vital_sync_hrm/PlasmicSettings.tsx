// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: q_91EH8DSqFr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dashboard from "../../Dashboard"; // plasmic-import: xrHIipmjGkuW/component
import PageInfo from "../../PageInfo"; // plasmic-import: -5yQM3hZscI3/component
import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component
import SectionCard from "../../SectionCard"; // plasmic-import: m-qBY6t_w4vi/component
import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSettings.module.css"; // plasmic-import: q_91EH8DSqFr/css

import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: mwG6BlSeVcwg/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon

createPlasmicElementProxy;

export type PlasmicSettings__VariantMembers = {};
export type PlasmicSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettings__VariantsArgs;
export const PlasmicSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicSettings__ArgsType = {};
type ArgPropType = keyof PlasmicSettings__ArgsType;
export const PlasmicSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicSettings__OverridesType = {
  main?: Flex__<"div">;
  dashboard?: Flex__<typeof Dashboard>;
  pageInfo?: Flex__<typeof PageInfo>;
  welcomeBackToRhom?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  h6?: Flex__<"h6">;
  text?: Flex__<"div">;
};

export interface DefaultSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettings__RenderFunc(props: {
  variants: PlasmicSettings__VariantsArgs;
  args: PlasmicSettings__ArgsType;
  overrides: PlasmicSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "isChecked"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSettings.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSettings.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSettings.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSettings.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSettings.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSettings.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.main
        )}
      >
        <Dashboard
          data-plasmic-name={"dashboard"}
          data-plasmic-override={overrides.dashboard}
          className={classNames("__wab_instance", sty.dashboard)}
          contentSection={
            <React.Fragment>
              <PageInfo
                data-plasmic-name={"pageInfo"}
                data-plasmic-override={overrides.pageInfo}
                action={
                  <React.Fragment>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__xlIbd
                      )}
                      color={"white"}
                      isDisabled={true}
                      shape={"rounded"}
                      size={"compact"}
                      startIcon={
                        <Icon43Icon
                          className={classNames(projectcss.all, sty.svg__sbEbX)}
                          role={"img"}
                        />
                      }
                      submitsForm={false}
                    >
                      <Trans__>{"Save Changes"}</Trans__>
                    </Button>
                    <Button
                      className={classNames("__wab_instance", sty.button__imSl)}
                      color={"green"}
                      shape={"rounded"}
                      showStartIcon={true}
                      size={"compact"}
                      startIcon={
                        <Icon43Icon
                          className={classNames(projectcss.all, sty.svg__cAqtd)}
                          role={"img"}
                        />
                      }
                      submitsForm={false}
                    >
                      <Trans__>{"Restore Defaults"}</Trans__>
                    </Button>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.pageInfo)}
                description={
                  <div
                    data-plasmic-name={"welcomeBackToRhom"}
                    data-plasmic-override={overrides.welcomeBackToRhom}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.welcomeBackToRhom
                    )}
                  >
                    <Trans__>
                      {"Adjust and configure site preferences."}
                    </Trans__>
                  </div>
                }
                isAction={true}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__mEaEc)}
                title={<Trans__>{"Preferences"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__iBhGz)}
                content={null}
                title={<Trans__>{"Account"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__akkGe)}
                content={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__awMtK)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9P6Bh
                      )}
                    >
                      <Checkbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        className={classNames("__wab_instance", sty.checkbox)}
                        isChecked={
                          generateStateValueProp($state, [
                            "checkbox",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "checkbox",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <h6
                          data-plasmic-name={"h6"}
                          data-plasmic-override={overrides.h6}
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6
                          )}
                        >
                          <Trans__>{"System Notifications"}</Trans__>
                        </h6>
                      </Checkbox>
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        <Trans__>
                          {
                            "Control which actions trigger email alerts (e.g., new employee requests, document approvals)."
                          }
                        </Trans__>
                      </div>
                    </div>
                  </Stack__>
                }
                title={<Trans__>{"Notification"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__iuvyk)}
                title={<Trans__>{"Employee & User Settings"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__jQsVu)}
                title={<Trans__>{"E-Signature"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__lk0F9)}
                title={<Trans__>{"Messages"}</Trans__>}
              />

              <SectionCard
                className={classNames("__wab_instance", sty.sectionCard__iHblO)}
                title={<Trans__>{"Backup & Recovery"}</Trans__>}
              />
            </React.Fragment>
          }
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "dashboard",
    "pageInfo",
    "welcomeBackToRhom",
    "checkbox",
    "h6",
    "text"
  ],
  dashboard: [
    "dashboard",
    "pageInfo",
    "welcomeBackToRhom",
    "checkbox",
    "h6",
    "text"
  ],
  pageInfo: ["pageInfo", "welcomeBackToRhom"],
  welcomeBackToRhom: ["welcomeBackToRhom"],
  checkbox: ["checkbox", "h6"],
  h6: ["h6"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  main: "div";
  dashboard: typeof Dashboard;
  pageInfo: typeof PageInfo;
  welcomeBackToRhom: "div";
  checkbox: typeof Checkbox;
  h6: "h6";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettings__VariantsArgs;
    args?: PlasmicSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettings__ArgProps,
          internalVariantPropNames: PlasmicSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicSettings";
  } else {
    func.displayName = `PlasmicSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicSettings = Object.assign(
  // Top-level PlasmicSettings renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    dashboard: makeNodeComponent("dashboard"),
    pageInfo: makeNodeComponent("pageInfo"),
    welcomeBackToRhom: makeNodeComponent("welcomeBackToRhom"),
    checkbox: makeNodeComponent("checkbox"),
    h6: makeNodeComponent("h6"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSettings
    internalVariantProps: PlasmicSettings__VariantProps,
    internalArgProps: PlasmicSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: " Settings",
      description: "Adjust and configure site preferences.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettings;
/* prettier-ignore-end */
