// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: ZuuWfkNiYXry

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSidebarNavigationLabel.module.css"; // plasmic-import: ZuuWfkNiYXry/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -hHWm0myDKZV/icon

createPlasmicElementProxy;

export type PlasmicSidebarNavigationLabel__VariantMembers = {
  showBadge: "showBadge";
  collapsed: "collapsed";
  pressed: "pressed";
};
export type PlasmicSidebarNavigationLabel__VariantsArgs = {
  showBadge?: SingleBooleanChoiceArg<"showBadge">;
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  pressed?: SingleBooleanChoiceArg<"pressed">;
};
type VariantPropType = keyof PlasmicSidebarNavigationLabel__VariantsArgs;
export const PlasmicSidebarNavigationLabel__VariantProps =
  new Array<VariantPropType>("showBadge", "collapsed", "pressed");

export type PlasmicSidebarNavigationLabel__ArgsType = {
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  pageLink?: string;
  badge?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSidebarNavigationLabel__ArgsType;
export const PlasmicSidebarNavigationLabel__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "children",
  "pageLink",
  "badge"
);

export type PlasmicSidebarNavigationLabel__OverridesType = {
  menuItem?: Flex__<"div">;
  navigation?: Flex__<"section">;
  leftContent?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  rightContent?: Flex__<"div">;
};

export interface DefaultSidebarNavigationLabelProps {
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  pageLink?: string;
  badge?: React.ReactNode;
  showBadge?: SingleBooleanChoiceArg<"showBadge">;
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  pressed?: SingleBooleanChoiceArg<"pressed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebarNavigationLabel__RenderFunc(props: {
  variants: PlasmicSidebarNavigationLabel__VariantsArgs;
  args: PlasmicSidebarNavigationLabel__ArgsType;
  overrides: PlasmicSidebarNavigationLabel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showBadge",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showBadge
      },
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      },
      {
        path: "pressed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $props.pageLink === $ctx.pagePath;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.pressed
      },
      {
        path: "isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"menuItem"}
      data-plasmic-override={overrides.menuItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.menuItem,
        {
          [sty.menuItemcollapsed]: hasVariant($state, "collapsed", "collapsed"),
          [sty.menuItempressed]: hasVariant($state, "pressed", "pressed"),
          [sty.menuItemshowBadge]: hasVariant($state, "showBadge", "showBadge")
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["goToPage"] = true
          ? (() => {
              const actionArgs = {
                destination: (() => {
                  try {
                    return $props.pageLink;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()
              };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToPage"] != null &&
          typeof $steps["goToPage"] === "object" &&
          typeof $steps["goToPage"].then === "function"
        ) {
          $steps["goToPage"] = await $steps["goToPage"];
        }
      }}
    >
      <Stack__
        as={"section"}
        data-plasmic-name={"navigation"}
        data-plasmic-override={overrides.navigation}
        hasGap={true}
        className={classNames(projectcss.all, sty.navigation, {
          [sty.navigationcollapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          ),
          [sty.navigationpressed]: hasVariant($state, "pressed", "pressed"),
          [sty.navigationshowBadge]: hasVariant(
            $state,
            "showBadge",
            "showBadge"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"leftContent"}
          data-plasmic-override={overrides.leftContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.leftContent)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__jXCj0)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconpressed]: hasVariant(
                $state,
                "pressed",
                "pressed"
              ),
              [sty.slotTargetStartIconshowBadge]: hasVariant(
                $state,
                "showBadge",
                "showBadge"
              )
            })
          })}
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxcollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              ),
              [sty.freeBoxshowBadge]: hasVariant(
                $state,
                "showBadge",
                "showBadge"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: <Trans__>{"Label"}</Trans__>,
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenpressed]: hasVariant(
                  $state,
                  "pressed",
                  "pressed"
                )
              })
            })}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"rightContent"}
          data-plasmic-override={overrides.rightContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.rightContent, {
            [sty.rightContentcollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            ),
            [sty.rightContentshowBadge]: hasVariant(
              $state,
              "showBadge",
              "showBadge"
            )
          })}
        >
          {(
            hasVariant($state, "collapsed", "collapsed")
              ? true
              : hasVariant($state, "showBadge", "showBadge")
              ? true
              : false
          )
            ? renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tjHcI)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___53Nxj
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.section.length;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "0";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ),
                value: args.badge
              })
            : null}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menuItem: [
    "menuItem",
    "navigation",
    "leftContent",
    "freeBox",
    "rightContent"
  ],
  navigation: ["navigation", "leftContent", "freeBox", "rightContent"],
  leftContent: ["leftContent", "freeBox"],
  freeBox: ["freeBox"],
  rightContent: ["rightContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  menuItem: "div";
  navigation: "section";
  leftContent: "div";
  freeBox: "div";
  rightContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarNavigationLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarNavigationLabel__VariantsArgs;
    args?: PlasmicSidebarNavigationLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarNavigationLabel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSidebarNavigationLabel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebarNavigationLabel__ArgProps,
          internalVariantPropNames: PlasmicSidebarNavigationLabel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebarNavigationLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "menuItem") {
    func.displayName = "PlasmicSidebarNavigationLabel";
  } else {
    func.displayName = `PlasmicSidebarNavigationLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarNavigationLabel = Object.assign(
  // Top-level PlasmicSidebarNavigationLabel renders the root element
  makeNodeComponent("menuItem"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    leftContent: makeNodeComponent("leftContent"),
    freeBox: makeNodeComponent("freeBox"),
    rightContent: makeNodeComponent("rightContent"),

    // Metadata about props expected for PlasmicSidebarNavigationLabel
    internalVariantProps: PlasmicSidebarNavigationLabel__VariantProps,
    internalArgProps: PlasmicSidebarNavigationLabel__ArgProps
  }
);

export default PlasmicSidebarNavigationLabel;
/* prettier-ignore-end */
