// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: xSZETzH5yRT1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import CtInfoIcon from "../../CtInfoIcon"; // plasmic-import: g9gKYSYktTlZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCtHeaderLabel.module.css"; // plasmic-import: xSZETzH5yRT1/css

import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: R0-jB0Rgolsy/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: LkmhWxmiuvWS/icon

createPlasmicElementProxy;

export type PlasmicCtHeaderLabel__VariantMembers = {
  info: "info";
  sorting: "sorting";
  ascending: "ascending";
  descending: "descending";
};
export type PlasmicCtHeaderLabel__VariantsArgs = {
  info?: SingleBooleanChoiceArg<"info">;
  sorting?: SingleBooleanChoiceArg<"sorting">;
  ascending?: SingleBooleanChoiceArg<"ascending">;
  descending?: SingleBooleanChoiceArg<"descending">;
};
type VariantPropType = keyof PlasmicCtHeaderLabel__VariantsArgs;
export const PlasmicCtHeaderLabel__VariantProps = new Array<VariantPropType>(
  "info",
  "sorting",
  "ascending",
  "descending"
);

export type PlasmicCtHeaderLabel__ArgsType = {};
type ArgPropType = keyof PlasmicCtHeaderLabel__ArgsType;
export const PlasmicCtHeaderLabel__ArgProps = new Array<ArgPropType>();

export type PlasmicCtHeaderLabel__OverridesType = {
  labelSection?: Flex__<"div">;
  line?: Flex__<"div">;
  text?: Flex__<"div">;
  ctSortingSection?: Flex__<"div">;
  tooltip?: Flex__<typeof AntdTooltip>;
  sortingState?: Flex__<"div">;
  ctInfoIcon?: Flex__<typeof CtInfoIcon>;
};

export interface DefaultCtHeaderLabelProps {
  info?: SingleBooleanChoiceArg<"info">;
  sorting?: SingleBooleanChoiceArg<"sorting">;
  ascending?: SingleBooleanChoiceArg<"ascending">;
  descending?: SingleBooleanChoiceArg<"descending">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtHeaderLabel__RenderFunc(props: {
  variants: PlasmicCtHeaderLabel__VariantsArgs;
  args: PlasmicCtHeaderLabel__ArgsType;
  overrides: PlasmicCtHeaderLabel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sorting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sorting
      },
      {
        path: "info",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.info
      },
      {
        path: "ascending",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ascending
      },
      {
        path: "descending",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.descending
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"labelSection"}
      data-plasmic-override={overrides.labelSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.labelSection,
        {
          [sty.labelSectionascending]: hasVariant(
            $state,
            "ascending",
            "ascending"
          ),
          [sty.labelSectiondescending]: hasVariant(
            $state,
            "descending",
            "descending"
          ),
          [sty.labelSectioninfo]: hasVariant($state, "info", "info"),
          [sty.labelSectionsorting]: hasVariant($state, "sorting", "sorting")
        }
      )}
    >
      <div
        data-plasmic-name={"line"}
        data-plasmic-override={overrides.line}
        className={classNames(projectcss.all, sty.line, {
          [sty.linesorting]: hasVariant($state, "sorting", "sorting")
        })}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textinfo]: hasVariant($state, "info", "info"),
          [sty.textsorting]: hasVariant($state, "sorting", "sorting")
        })}
      >
        <Trans__>{"Name"}</Trans__>
      </div>
      {(
        hasVariant($state, "descending", "descending")
          ? true
          : hasVariant($state, "ascending", "ascending")
          ? true
          : hasVariant($state, "sorting", "sorting")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"ctSortingSection"}
          data-plasmic-override={overrides.ctSortingSection}
          className={classNames(projectcss.all, sty.ctSortingSection, {
            [sty.ctSortingSectionascending]: hasVariant(
              $state,
              "ascending",
              "ascending"
            ),
            [sty.ctSortingSectiondescending]: hasVariant(
              $state,
              "descending",
              "descending"
            ),
            [sty.ctSortingSectionsorting]: hasVariant(
              $state,
              "sorting",
              "sorting"
            )
          })}
        >
          <AntdTooltip
            data-plasmic-name={"tooltip"}
            data-plasmic-override={overrides.tooltip}
            className={classNames("__wab_instance", sty.tooltip, {
              [sty.tooltipascending]: hasVariant(
                $state,
                "ascending",
                "ascending"
              ),
              [sty.tooltipdescending]: hasVariant(
                $state,
                "descending",
                "descending"
              ),
              [sty.tooltipsorting]: hasVariant($state, "sorting", "sorting")
            })}
            titleText={"Click to sort ascending"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"sortingState"}
              data-plasmic-override={overrides.sortingState}
              hasGap={true}
              className={classNames(projectcss.all, sty.sortingState, {
                [sty.sortingStateascending]: hasVariant(
                  $state,
                  "ascending",
                  "ascending"
                ),
                [sty.sortingStatesorting]: hasVariant(
                  $state,
                  "sorting",
                  "sorting"
                )
              })}
            >
              <Icon35Icon
                className={classNames(projectcss.all, sty.svg__c2Sb, {
                  [sty.svgascending__c2Sb2QFb0]: hasVariant(
                    $state,
                    "ascending",
                    "ascending"
                  )
                })}
                role={"img"}
              />

              <Icon36Icon
                className={classNames(projectcss.all, sty.svg__yx5Dz, {
                  [sty.svgdescending__yx5DzJem0I]: hasVariant(
                    $state,
                    "descending",
                    "descending"
                  )
                })}
                role={"img"}
              />
            </Stack__>
          </AntdTooltip>
        </div>
      ) : null}
      <CtInfoIcon
        data-plasmic-name={"ctInfoIcon"}
        data-plasmic-override={overrides.ctInfoIcon}
        className={classNames("__wab_instance", sty.ctInfoIcon, {
          [sty.ctInfoIconascending]: hasVariant(
            $state,
            "ascending",
            "ascending"
          ),
          [sty.ctInfoIconinfo]: hasVariant($state, "info", "info")
        })}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  labelSection: [
    "labelSection",
    "line",
    "text",
    "ctSortingSection",
    "tooltip",
    "sortingState",
    "ctInfoIcon"
  ],
  line: ["line"],
  text: ["text"],
  ctSortingSection: ["ctSortingSection", "tooltip", "sortingState"],
  tooltip: ["tooltip", "sortingState"],
  sortingState: ["sortingState"],
  ctInfoIcon: ["ctInfoIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  labelSection: "div";
  line: "div";
  text: "div";
  ctSortingSection: "div";
  tooltip: typeof AntdTooltip;
  sortingState: "div";
  ctInfoIcon: typeof CtInfoIcon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtHeaderLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtHeaderLabel__VariantsArgs;
    args?: PlasmicCtHeaderLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtHeaderLabel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtHeaderLabel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtHeaderLabel__ArgProps,
          internalVariantPropNames: PlasmicCtHeaderLabel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtHeaderLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "labelSection") {
    func.displayName = "PlasmicCtHeaderLabel";
  } else {
    func.displayName = `PlasmicCtHeaderLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicCtHeaderLabel = Object.assign(
  // Top-level PlasmicCtHeaderLabel renders the root element
  makeNodeComponent("labelSection"),
  {
    // Helper components rendering sub-elements
    line: makeNodeComponent("line"),
    text: makeNodeComponent("text"),
    ctSortingSection: makeNodeComponent("ctSortingSection"),
    tooltip: makeNodeComponent("tooltip"),
    sortingState: makeNodeComponent("sortingState"),
    ctInfoIcon: makeNodeComponent("ctInfoIcon"),

    // Metadata about props expected for PlasmicCtHeaderLabel
    internalVariantProps: PlasmicCtHeaderLabel__VariantProps,
    internalArgProps: PlasmicCtHeaderLabel__ArgProps
  }
);

export default PlasmicCtHeaderLabel;
/* prettier-ignore-end */
