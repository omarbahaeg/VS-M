// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: pW9ClsR7IfI0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicRightBar.module.css"; // plasmic-import: pW9ClsR7IfI0/css

import BugBeetleIcon from "./icons/PlasmicIcon__BugBeetle"; // plasmic-import: 3JB4AlATAt0H/icon
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: 4UaDaQ055sXh/icon
import BroadcastIcon from "./icons/PlasmicIcon__Broadcast"; // plasmic-import: eqQAoypOBOaa/icon

createPlasmicElementProxy;

export type PlasmicRightBar__VariantMembers = {};
export type PlasmicRightBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicRightBar__VariantsArgs;
export const PlasmicRightBar__VariantProps = new Array<VariantPropType>();

export type PlasmicRightBar__ArgsType = {};
type ArgPropType = keyof PlasmicRightBar__ArgsType;
export const PlasmicRightBar__ArgProps = new Array<ArgPropType>();

export type PlasmicRightBar__OverridesType = {
  rightBar?: Flex__<"div">;
  frame?: Flex__<"div">;
  content14?: Flex__<"div">;
  text127?: Flex__<"div">;
  text128?: Flex__<"div">;
  iconText10?: Flex__<"div">;
  iconSet16?: Flex__<"div">;
  text129?: Flex__<"div">;
  text130?: Flex__<"div">;
  text131?: Flex__<"div">;
  iconText11?: Flex__<"div">;
  iconSet17?: Flex__<"div">;
  text132?: Flex__<"div">;
  text133?: Flex__<"div">;
  text134?: Flex__<"div">;
  iconText12?: Flex__<"div">;
  iconSet18?: Flex__<"div">;
  text135?: Flex__<"div">;
  text136?: Flex__<"div">;
  text137?: Flex__<"div">;
  iconText13?: Flex__<"div">;
  iconSet19?: Flex__<"div">;
  text138?: Flex__<"div">;
  text139?: Flex__<"div">;
  text140?: Flex__<"div">;
};

export interface DefaultRightBarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRightBar__RenderFunc(props: {
  variants: PlasmicRightBar__VariantsArgs;
  args: PlasmicRightBar__ArgsType;
  overrides: PlasmicRightBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"rightBar"}
      data-plasmic-override={overrides.rightBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.rightBar
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame"}
        data-plasmic-override={overrides.frame}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"content14"}
          data-plasmic-override={overrides.content14}
          hasGap={true}
          className={classNames(projectcss.all, sty.content14)}
        >
          <div
            data-plasmic-name={"text127"}
            data-plasmic-override={overrides.text127}
            className={classNames(projectcss.all, sty.text127)}
          >
            <div
              data-plasmic-name={"text128"}
              data-plasmic-override={overrides.text128}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text128
              )}
            >
              <Trans__>{"Notifications"}</Trans__>
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"iconText10"}
          data-plasmic-override={overrides.iconText10}
          hasGap={true}
          className={classNames(projectcss.all, sty.iconText10)}
        >
          <div
            data-plasmic-name={"iconSet16"}
            data-plasmic-override={overrides.iconSet16}
            className={classNames(projectcss.all, sty.iconSet16)}
          >
            <BugBeetleIcon
              className={classNames(projectcss.all, sty.svg__z17KG)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"text129"}
            data-plasmic-override={overrides.text129}
            className={classNames(projectcss.all, sty.text129)}
          >
            <div
              data-plasmic-name={"text130"}
              data-plasmic-override={overrides.text130}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text130
              )}
            >
              <Trans__>{"You fixed a bug."}</Trans__>
            </div>
            <div
              data-plasmic-name={"text131"}
              data-plasmic-override={overrides.text131}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text131
              )}
            >
              <Trans__>{"Just now"}</Trans__>
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"iconText11"}
          data-plasmic-override={overrides.iconText11}
          hasGap={true}
          className={classNames(projectcss.all, sty.iconText11)}
        >
          <div
            data-plasmic-name={"iconSet17"}
            data-plasmic-override={overrides.iconSet17}
            className={classNames(projectcss.all, sty.iconSet17)}
          >
            <UserIcon
              className={classNames(projectcss.all, sty.svg__nHkJg)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"text132"}
            data-plasmic-override={overrides.text132}
            className={classNames(projectcss.all, sty.text132)}
          >
            <div
              data-plasmic-name={"text133"}
              data-plasmic-override={overrides.text133}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text133
              )}
            >
              <Trans__>{"New user registered."}</Trans__>
            </div>
            <div
              data-plasmic-name={"text134"}
              data-plasmic-override={overrides.text134}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text134
              )}
            >
              <Trans__>{"59 minutes ago"}</Trans__>
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"iconText12"}
          data-plasmic-override={overrides.iconText12}
          hasGap={true}
          className={classNames(projectcss.all, sty.iconText12)}
        >
          <div
            data-plasmic-name={"iconSet18"}
            data-plasmic-override={overrides.iconSet18}
            className={classNames(projectcss.all, sty.iconSet18)}
          >
            <BugBeetleIcon
              className={classNames(projectcss.all, sty.svg__bpJn)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"text135"}
            data-plasmic-override={overrides.text135}
            className={classNames(projectcss.all, sty.text135)}
          >
            <div
              data-plasmic-name={"text136"}
              data-plasmic-override={overrides.text136}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text136
              )}
            >
              <Trans__>{"You fixed a bug."}</Trans__>
            </div>
            <div
              data-plasmic-name={"text137"}
              data-plasmic-override={overrides.text137}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text137
              )}
            >
              <Trans__>{"12 hours ago"}</Trans__>
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"iconText13"}
          data-plasmic-override={overrides.iconText13}
          hasGap={true}
          className={classNames(projectcss.all, sty.iconText13)}
        >
          <div
            data-plasmic-name={"iconSet19"}
            data-plasmic-override={overrides.iconSet19}
            className={classNames(projectcss.all, sty.iconSet19)}
          >
            <BroadcastIcon
              className={classNames(projectcss.all, sty.svg__zOx06)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"text138"}
            data-plasmic-override={overrides.text138}
            className={classNames(projectcss.all, sty.text138)}
          >
            <div
              data-plasmic-name={"text139"}
              data-plasmic-override={overrides.text139}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text139
              )}
            >
              <Trans__>{"Andi Lane subscribed to you."}</Trans__>
            </div>
            <div
              data-plasmic-name={"text140"}
              data-plasmic-override={overrides.text140}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text140
              )}
            >
              <Trans__>{"Today, 11:59 AM"}</Trans__>
            </div>
          </div>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rightBar: [
    "rightBar",
    "frame",
    "content14",
    "text127",
    "text128",
    "iconText10",
    "iconSet16",
    "text129",
    "text130",
    "text131",
    "iconText11",
    "iconSet17",
    "text132",
    "text133",
    "text134",
    "iconText12",
    "iconSet18",
    "text135",
    "text136",
    "text137",
    "iconText13",
    "iconSet19",
    "text138",
    "text139",
    "text140"
  ],
  frame: [
    "frame",
    "content14",
    "text127",
    "text128",
    "iconText10",
    "iconSet16",
    "text129",
    "text130",
    "text131",
    "iconText11",
    "iconSet17",
    "text132",
    "text133",
    "text134",
    "iconText12",
    "iconSet18",
    "text135",
    "text136",
    "text137",
    "iconText13",
    "iconSet19",
    "text138",
    "text139",
    "text140"
  ],
  content14: ["content14", "text127", "text128"],
  text127: ["text127", "text128"],
  text128: ["text128"],
  iconText10: ["iconText10", "iconSet16", "text129", "text130", "text131"],
  iconSet16: ["iconSet16"],
  text129: ["text129", "text130", "text131"],
  text130: ["text130"],
  text131: ["text131"],
  iconText11: ["iconText11", "iconSet17", "text132", "text133", "text134"],
  iconSet17: ["iconSet17"],
  text132: ["text132", "text133", "text134"],
  text133: ["text133"],
  text134: ["text134"],
  iconText12: ["iconText12", "iconSet18", "text135", "text136", "text137"],
  iconSet18: ["iconSet18"],
  text135: ["text135", "text136", "text137"],
  text136: ["text136"],
  text137: ["text137"],
  iconText13: ["iconText13", "iconSet19", "text138", "text139", "text140"],
  iconSet19: ["iconSet19"],
  text138: ["text138", "text139", "text140"],
  text139: ["text139"],
  text140: ["text140"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rightBar: "div";
  frame: "div";
  content14: "div";
  text127: "div";
  text128: "div";
  iconText10: "div";
  iconSet16: "div";
  text129: "div";
  text130: "div";
  text131: "div";
  iconText11: "div";
  iconSet17: "div";
  text132: "div";
  text133: "div";
  text134: "div";
  iconText12: "div";
  iconSet18: "div";
  text135: "div";
  text136: "div";
  text137: "div";
  iconText13: "div";
  iconSet19: "div";
  text138: "div";
  text139: "div";
  text140: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRightBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRightBar__VariantsArgs;
    args?: PlasmicRightBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRightBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRightBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRightBar__ArgProps,
          internalVariantPropNames: PlasmicRightBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRightBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rightBar") {
    func.displayName = "PlasmicRightBar";
  } else {
    func.displayName = `PlasmicRightBar.${nodeName}`;
  }
  return func;
}

export const PlasmicRightBar = Object.assign(
  // Top-level PlasmicRightBar renders the root element
  makeNodeComponent("rightBar"),
  {
    // Helper components rendering sub-elements
    frame: makeNodeComponent("frame"),
    content14: makeNodeComponent("content14"),
    text127: makeNodeComponent("text127"),
    text128: makeNodeComponent("text128"),
    iconText10: makeNodeComponent("iconText10"),
    iconSet16: makeNodeComponent("iconSet16"),
    text129: makeNodeComponent("text129"),
    text130: makeNodeComponent("text130"),
    text131: makeNodeComponent("text131"),
    iconText11: makeNodeComponent("iconText11"),
    iconSet17: makeNodeComponent("iconSet17"),
    text132: makeNodeComponent("text132"),
    text133: makeNodeComponent("text133"),
    text134: makeNodeComponent("text134"),
    iconText12: makeNodeComponent("iconText12"),
    iconSet18: makeNodeComponent("iconSet18"),
    text135: makeNodeComponent("text135"),
    text136: makeNodeComponent("text136"),
    text137: makeNodeComponent("text137"),
    iconText13: makeNodeComponent("iconText13"),
    iconSet19: makeNodeComponent("iconSet19"),
    text138: makeNodeComponent("text138"),
    text139: makeNodeComponent("text139"),
    text140: makeNodeComponent("text140"),

    // Metadata about props expected for PlasmicRightBar
    internalVariantProps: PlasmicRightBar__VariantProps,
    internalArgProps: PlasmicRightBar__ArgProps
  }
);

export default PlasmicRightBar;
/* prettier-ignore-end */
