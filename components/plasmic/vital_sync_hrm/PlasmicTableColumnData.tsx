// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: LVvesv418Nzn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicTableColumnData.module.css"; // plasmic-import: LVvesv418Nzn/css

import DownCircleSvgIcon from "./icons/PlasmicIcon__DownCircleSvg"; // plasmic-import: v7UTCNMEbebw/icon
import MoreIcon from "./icons/PlasmicIcon__More"; // plasmic-import: yDdb5ybophgm/icon

createPlasmicElementProxy;

export type PlasmicTableColumnData__VariantMembers = {
  isOpen: "isOpen";
};
export type PlasmicTableColumnData__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};
type VariantPropType = keyof PlasmicTableColumnData__VariantsArgs;
export const PlasmicTableColumnData__VariantProps = new Array<VariantPropType>(
  "isOpen"
);

export type PlasmicTableColumnData__ArgsType = {
  column4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTableColumnData__ArgsType;
export const PlasmicTableColumnData__ArgProps = new Array<ArgPropType>(
  "column4"
);

export type PlasmicTableColumnData__OverridesType = {
  columnData?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  checkboxColumn?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  expandCollapsedColumn?: Flex__<"div">;
  contentColumn?: Flex__<"div">;
  moreColumn?: Flex__<"div">;
  details?: Flex__<"section">;
};

export interface DefaultTableColumnDataProps {
  column4?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTableColumnData__RenderFunc(props: {
  variants: PlasmicTableColumnData__VariantsArgs;
  args: PlasmicTableColumnData__ArgsType;
  overrides: PlasmicTableColumnData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"columnData"}
      data-plasmic-override={overrides.columnData}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.columnData,
        { [sty.columnDataisOpen]: hasVariant($state, "isOpen", "isOpen") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisOpen]: hasVariant($state, "isOpen", "isOpen")
        })}
      >
        <div
          data-plasmic-name={"checkboxColumn"}
          data-plasmic-override={overrides.checkboxColumn}
          className={classNames(projectcss.all, sty.checkboxColumn, {
            [sty.checkboxColumnisOpen]: hasVariant($state, "isOpen", "isOpen")
          })}
        >
          <Checkbox
            data-plasmic-name={"checkbox"}
            data-plasmic-override={overrides.checkbox}
            className={classNames("__wab_instance", sty.checkbox, {
              [sty.checkboxisOpen]: hasVariant($state, "isOpen", "isOpen")
            })}
            hideLabel={true}
            isChecked={
              generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                eventArgs[0]
              );
            }}
          />
        </div>
        <div
          data-plasmic-name={"expandCollapsedColumn"}
          data-plasmic-override={overrides.expandCollapsedColumn}
          className={classNames(projectcss.all, sty.expandCollapsedColumn, {
            [sty.expandCollapsedColumnisOpen]: hasVariant(
              $state,
              "isOpen",
              "isOpen"
            )
          })}
        >
          <DownCircleSvgIcon
            className={classNames(projectcss.all, sty.svg__jh8Dc, {
              [sty.svgisOpen__jh8DcLVdWf]: hasVariant(
                $state,
                "isOpen",
                "isOpen"
              )
            })}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"contentColumn"}
          data-plasmic-override={overrides.contentColumn}
          className={classNames(projectcss.all, sty.contentColumn, {
            [sty.contentColumnisOpen]: hasVariant($state, "isOpen", "isOpen")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y1En8
                )}
              >
                <Trans__>{"Enter some text"}</Trans__>
              </div>
            ),
            value: args.column4
          })}
        </div>
        <div
          data-plasmic-name={"moreColumn"}
          data-plasmic-override={overrides.moreColumn}
          className={classNames(projectcss.all, sty.moreColumn, {
            [sty.moreColumnisOpen]: hasVariant($state, "isOpen", "isOpen")
          })}
        >
          <MoreIcon
            className={classNames(projectcss.all, sty.svg___0MKqn, {
              [sty.svgisOpen___0MKqnlVdWf]: hasVariant(
                $state,
                "isOpen",
                "isOpen"
              )
            })}
            role={"img"}
          />
        </div>
      </div>
      {(
        hasVariant($state, "isOpen", "isOpen")
          ? true
          : (() => {
              try {
                return $state.isOpen === true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <section
          data-plasmic-name={"details"}
          data-plasmic-override={overrides.details}
          className={classNames(projectcss.all, sty.details, {
            [sty.detailsisOpen]: hasVariant($state, "isOpen", "isOpen")
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  columnData: [
    "columnData",
    "freeBox",
    "checkboxColumn",
    "checkbox",
    "expandCollapsedColumn",
    "contentColumn",
    "moreColumn",
    "details"
  ],
  freeBox: [
    "freeBox",
    "checkboxColumn",
    "checkbox",
    "expandCollapsedColumn",
    "contentColumn",
    "moreColumn"
  ],
  checkboxColumn: ["checkboxColumn", "checkbox"],
  checkbox: ["checkbox"],
  expandCollapsedColumn: ["expandCollapsedColumn"],
  contentColumn: ["contentColumn"],
  moreColumn: ["moreColumn"],
  details: ["details"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  columnData: "div";
  freeBox: "div";
  checkboxColumn: "div";
  checkbox: typeof Checkbox;
  expandCollapsedColumn: "div";
  contentColumn: "div";
  moreColumn: "div";
  details: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableColumnData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableColumnData__VariantsArgs;
    args?: PlasmicTableColumnData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTableColumnData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTableColumnData__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTableColumnData__ArgProps,
          internalVariantPropNames: PlasmicTableColumnData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTableColumnData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "columnData") {
    func.displayName = "PlasmicTableColumnData";
  } else {
    func.displayName = `PlasmicTableColumnData.${nodeName}`;
  }
  return func;
}

export const PlasmicTableColumnData = Object.assign(
  // Top-level PlasmicTableColumnData renders the root element
  makeNodeComponent("columnData"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    checkboxColumn: makeNodeComponent("checkboxColumn"),
    checkbox: makeNodeComponent("checkbox"),
    expandCollapsedColumn: makeNodeComponent("expandCollapsedColumn"),
    contentColumn: makeNodeComponent("contentColumn"),
    moreColumn: makeNodeComponent("moreColumn"),
    details: makeNodeComponent("details"),

    // Metadata about props expected for PlasmicTableColumnData
    internalVariantProps: PlasmicTableColumnData__VariantProps,
    internalArgProps: PlasmicTableColumnData__ArgProps
  }
);

export default PlasmicTableColumnData;
/* prettier-ignore-end */
