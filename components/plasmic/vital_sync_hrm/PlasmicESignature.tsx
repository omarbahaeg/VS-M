// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: zeyxpzA_le82

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dashboard from "../../Dashboard"; // plasmic-import: xrHIipmjGkuW/component
import PageInfo from "../../PageInfo"; // plasmic-import: -5yQM3hZscI3/component
import Button from "../../Button"; // plasmic-import: JRPPbMhYptfo/component
import CtTabs from "../../CtTabs"; // plasmic-import: 2l3jZIBKayAy/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import TabButton2 from "../../TabButton"; // plasmic-import: TAXiLlfQD5MN/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import CustomTable from "../../CustomTable"; // plasmic-import: SyYLCRWlXb0u/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicESignature.module.css"; // plasmic-import: zeyxpzA_le82/css

import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: qKMzzxYWCT9r/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 6im6f-sFV6o1/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 9Xy14f7tX9Ax/icon

createPlasmicElementProxy;

export type PlasmicESignature__VariantMembers = {};
export type PlasmicESignature__VariantsArgs = {};
type VariantPropType = keyof PlasmicESignature__VariantsArgs;
export const PlasmicESignature__VariantProps = new Array<VariantPropType>();

export type PlasmicESignature__ArgsType = {};
type ArgPropType = keyof PlasmicESignature__ArgsType;
export const PlasmicESignature__ArgProps = new Array<ArgPropType>();

export type PlasmicESignature__OverridesType = {
  main?: Flex__<"div">;
  dashboard?: Flex__<typeof Dashboard>;
  pageInfo?: Flex__<typeof PageInfo>;
  hiKatiePena?: Flex__<"div">;
  welcomeBackToRhom2?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  section?: Flex__<"div">;
  ctTabs?: Flex__<typeof CtTabs>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabBody?: Flex__<"div">;
  header?: Flex__<"div">;
  tabUnderline?: Flex__<typeof TabUnderline>;
  content?: Flex__<"div">;
};

export interface DefaultESignatureProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicESignature__RenderFunc(props: {
  variants: PlasmicESignature__VariantsArgs;
  args: PlasmicESignature__ArgsType;
  overrides: PlasmicESignature__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicESignature.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicESignature.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicESignature.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicESignature.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicESignature.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicESignature.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.main
        )}
      >
        <Dashboard
          data-plasmic-name={"dashboard"}
          data-plasmic-override={overrides.dashboard}
          className={classNames("__wab_instance", sty.dashboard)}
          contentSection={
            <React.Fragment>
              <PageInfo
                data-plasmic-name={"pageInfo"}
                data-plasmic-override={overrides.pageInfo}
                action={
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"green"}
                    shape={"rounded"}
                    showStartIcon={true}
                    size={"compact"}
                    startIcon={
                      <PlusSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    submitsForm={false}
                  >
                    <Trans__>{"Add New Document"}</Trans__>
                  </Button>
                }
                className={classNames("__wab_instance", sty.pageInfo)}
                description={
                  <div
                    data-plasmic-name={"welcomeBackToRhom2"}
                    data-plasmic-override={overrides.welcomeBackToRhom2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.welcomeBackToRhom2
                    )}
                  >
                    <Trans__>
                      {"Digital signing process for agreements."}
                    </Trans__>
                  </div>
                }
                isAction={true}
                title={
                  <div
                    data-plasmic-name={"hiKatiePena"}
                    data-plasmic-override={overrides.hiKatiePena}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.hiKatiePena
                    )}
                  >
                    <Trans__>{"E-Signature"}</Trans__>
                  </div>
                }
              />

              <div
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <CtTabs
                  data-plasmic-name={"ctTabs"}
                  data-plasmic-override={overrides.ctTabs}
                  className={classNames("__wab_instance", sty.ctTabs)}
                >
                  <TabsContainer
                    data-plasmic-name={"tabsContainer"}
                    data-plasmic-override={overrides.tabsContainer}
                    className={classNames("__wab_instance", sty.tabsContainer)}
                    initialKey={"tab1"}
                    previewAll={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"tabBody"}
                          data-plasmic-override={overrides.tabBody}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tabBody)}
                        >
                          <div
                            data-plasmic-name={"header"}
                            data-plasmic-override={overrides.header}
                            className={classNames(projectcss.all, sty.header)}
                          >
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__sxOX
                              )}
                              tabKey={"tab1"}
                            >
                              <TabButton2
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__cJa5P
                                )}
                                label={
                                  <Trans__>{"Awaiting Signatures"}</Trans__>
                                }
                                size={"compact"}
                              />
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__sC19M
                              )}
                              tabKey={"tab2"}
                            >
                              <TabButton2
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__lPjIa
                                )}
                                label={<Trans__>{"Drafts"}</Trans__>}
                                size={"compact"}
                              />
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__g8ZzK
                              )}
                              tabKey={"tab3"}
                            >
                              <TabButton2
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__nztuD
                                )}
                                label={<Trans__>{"Signed"}</Trans__>}
                                size={"compact"}
                              />
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton___1ClXh
                              )}
                              tabKey={"tab4"}
                            >
                              <TabButton2
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__sx2Jr
                                )}
                                label={<Trans__>{"Trash"}</Trans__>}
                                size={"compact"}
                              />
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__grLma
                              )}
                              tabKey={"tab5"}
                            >
                              <TabButton2
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__rMhAr
                                )}
                                label={<Trans__>{"Stand Alone"}</Trans__>}
                                size={"compact"}
                              />
                            </TabButton>
                            <TabUnderline
                              data-plasmic-name={"tabUnderline"}
                              data-plasmic-override={overrides.tabUnderline}
                              className={classNames(
                                "__wab_instance",
                                sty.tabUnderline
                              )}
                            />
                          </div>
                          <div
                            data-plasmic-name={"content"}
                            data-plasmic-override={overrides.content}
                            className={classNames(projectcss.all, sty.content)}
                          >
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__xqPS
                              )}
                              tabKey={"tab1"}
                            >
                              <CustomTable
                                className={classNames(
                                  "__wab_instance",
                                  sty.customTable__gnAyc
                                )}
                              />
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__rebGd
                              )}
                              tabKey={"tab2"}
                            >
                              <CustomTable
                                className={classNames(
                                  "__wab_instance",
                                  sty.customTable__toDla
                                )}
                              />
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__zTMzx
                              )}
                              tabKey={"tab3"}
                            >
                              <CustomTable
                                className={classNames(
                                  "__wab_instance",
                                  sty.customTable___94Se
                                )}
                              />
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__jK8Wo
                              )}
                              tabKey={"tab4"}
                            >
                              <CustomTable
                                className={classNames(
                                  "__wab_instance",
                                  sty.customTable__gPtgm
                                )}
                              />
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent___2Fllz
                              )}
                              tabKey={"tab5"}
                            >
                              <CustomTable
                                className={classNames(
                                  "__wab_instance",
                                  sty.customTable__i07Y
                                )}
                              />
                            </TabContent>
                          </div>
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </TabsContainer>
                </CtTabs>
              </div>
            </React.Fragment>
          }
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "dashboard",
    "pageInfo",
    "hiKatiePena",
    "welcomeBackToRhom2",
    "button",
    "svg",
    "section",
    "ctTabs",
    "tabsContainer",
    "tabBody",
    "header",
    "tabUnderline",
    "content"
  ],
  dashboard: [
    "dashboard",
    "pageInfo",
    "hiKatiePena",
    "welcomeBackToRhom2",
    "button",
    "svg",
    "section",
    "ctTabs",
    "tabsContainer",
    "tabBody",
    "header",
    "tabUnderline",
    "content"
  ],
  pageInfo: ["pageInfo", "hiKatiePena", "welcomeBackToRhom2", "button", "svg"],
  hiKatiePena: ["hiKatiePena"],
  welcomeBackToRhom2: ["welcomeBackToRhom2"],
  button: ["button", "svg"],
  svg: ["svg"],
  section: [
    "section",
    "ctTabs",
    "tabsContainer",
    "tabBody",
    "header",
    "tabUnderline",
    "content"
  ],
  ctTabs: [
    "ctTabs",
    "tabsContainer",
    "tabBody",
    "header",
    "tabUnderline",
    "content"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabBody",
    "header",
    "tabUnderline",
    "content"
  ],
  tabBody: ["tabBody", "header", "tabUnderline", "content"],
  header: ["header", "tabUnderline"],
  tabUnderline: ["tabUnderline"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  main: "div";
  dashboard: typeof Dashboard;
  pageInfo: typeof PageInfo;
  hiKatiePena: "div";
  welcomeBackToRhom2: "div";
  button: typeof Button;
  svg: "svg";
  section: "div";
  ctTabs: typeof CtTabs;
  tabsContainer: typeof TabsContainer;
  tabBody: "div";
  header: "div";
  tabUnderline: typeof TabUnderline;
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicESignature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicESignature__VariantsArgs;
    args?: PlasmicESignature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicESignature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicESignature__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicESignature__ArgProps,
          internalVariantPropNames: PlasmicESignature__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicESignature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicESignature";
  } else {
    func.displayName = `PlasmicESignature.${nodeName}`;
  }
  return func;
}

export const PlasmicESignature = Object.assign(
  // Top-level PlasmicESignature renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    dashboard: makeNodeComponent("dashboard"),
    pageInfo: makeNodeComponent("pageInfo"),
    hiKatiePena: makeNodeComponent("hiKatiePena"),
    welcomeBackToRhom2: makeNodeComponent("welcomeBackToRhom2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    section: makeNodeComponent("section"),
    ctTabs: makeNodeComponent("ctTabs"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabBody: makeNodeComponent("tabBody"),
    header: makeNodeComponent("header"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicESignature
    internalVariantProps: PlasmicESignature__VariantProps,
    internalArgProps: PlasmicESignature__ArgProps,

    // Page metadata
    pageMetadata: {
      title: " E-Signature",
      description: "Digital signing process for agreements.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicESignature;
/* prettier-ignore-end */
