// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: Ir4fGGB2J2Ay

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BadgeCount from "../../BadgeCount"; // plasmic-import: p0mnkpzglymX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicMessagesButton.module.css"; // plasmic-import: Ir4fGGB2J2Ay/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: qYDC0LhkIc2_/icon

createPlasmicElementProxy;

export type PlasmicMessagesButton__VariantMembers = {};
export type PlasmicMessagesButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicMessagesButton__VariantsArgs;
export const PlasmicMessagesButton__VariantProps = new Array<VariantPropType>();

export type PlasmicMessagesButton__ArgsType = {
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicMessagesButton__ArgsType;
export const PlasmicMessagesButton__ArgProps = new Array<ArgPropType>(
  "onClick"
);

export type PlasmicMessagesButton__OverridesType = {
  messagesButton?: Flex__<"section">;
  svg?: Flex__<"svg">;
  badgeCount?: Flex__<typeof BadgeCount>;
};

export interface DefaultMessagesButtonProps {
  onClick?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMessagesButton__RenderFunc(props: {
  variants: PlasmicMessagesButton__VariantsArgs;
  args: PlasmicMessagesButton__ArgsType;
  overrides: PlasmicMessagesButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <section
      data-plasmic-name={"messagesButton"}
      data-plasmic-override={overrides.messagesButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.messagesButton
      )}
      onClick={args.onClick}
    >
      <Icon21Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <BadgeCount
        data-plasmic-name={"badgeCount"}
        data-plasmic-override={overrides.badgeCount}
        className={classNames("__wab_instance", sty.badgeCount)}
      />
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  messagesButton: ["messagesButton", "svg", "badgeCount"],
  svg: ["svg"],
  badgeCount: ["badgeCount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  messagesButton: "section";
  svg: "svg";
  badgeCount: typeof BadgeCount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMessagesButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMessagesButton__VariantsArgs;
    args?: PlasmicMessagesButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMessagesButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMessagesButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMessagesButton__ArgProps,
          internalVariantPropNames: PlasmicMessagesButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMessagesButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "messagesButton") {
    func.displayName = "PlasmicMessagesButton";
  } else {
    func.displayName = `PlasmicMessagesButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMessagesButton = Object.assign(
  // Top-level PlasmicMessagesButton renders the root element
  makeNodeComponent("messagesButton"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    badgeCount: makeNodeComponent("badgeCount"),

    // Metadata about props expected for PlasmicMessagesButton
    internalVariantProps: PlasmicMessagesButton__VariantProps,
    internalArgProps: PlasmicMessagesButton__ArgProps
  }
);

export default PlasmicMessagesButton;
/* prettier-ignore-end */
