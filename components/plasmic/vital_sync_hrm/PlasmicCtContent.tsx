// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: 30qwjyl-gzyD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CtCheckbox from "../../CtCheckbox"; // plasmic-import: h4AhLHpwZjUP/component
import CtMoreButton from "../../CtMoreButton"; // plasmic-import: V-WhOu_9VTgo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicCtContent.module.css"; // plasmic-import: 30qwjyl-gzyD/css

createPlasmicElementProxy;

export type PlasmicCtContent__VariantMembers = {
  noData: "noData";
};
export type PlasmicCtContent__VariantsArgs = {
  noData?: SingleBooleanChoiceArg<"noData">;
};
type VariantPropType = keyof PlasmicCtContent__VariantsArgs;
export const PlasmicCtContent__VariantProps = new Array<VariantPropType>(
  "noData"
);

export type PlasmicCtContent__ArgsType = {
  primaryCheckboxIsChecked?: boolean;
  contentCheckboxSection2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCtContent__ArgsType;
export const PlasmicCtContent__ArgProps = new Array<ArgPropType>(
  "primaryCheckboxIsChecked",
  "contentCheckboxSection2"
);

export type PlasmicCtContent__OverridesType = {
  content?: Flex__<"section">;
  contentCheckboxSection?: Flex__<"section">;
  contentSection?: Flex__<"section">;
  text?: Flex__<"div">;
  contentMoreSection?: Flex__<"section">;
  ctMoreButton?: Flex__<typeof CtMoreButton>;
};

export interface DefaultCtContentProps {
  primaryCheckboxIsChecked?: boolean;
  contentCheckboxSection2?: React.ReactNode;
  noData?: SingleBooleanChoiceArg<"noData">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtContent__RenderFunc(props: {
  variants: PlasmicCtContent__VariantsArgs;
  args: PlasmicCtContent__ArgsType;
  overrides: PlasmicCtContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noData",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noData
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <section
      data-plasmic-name={"content"}
      data-plasmic-override={overrides.content}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.content,
        { [sty.contentnoData]: hasVariant($state, "noData", "noData") }
      )}
    >
      <section
        data-plasmic-name={"contentCheckboxSection"}
        data-plasmic-override={overrides.contentCheckboxSection}
        className={classNames(projectcss.all, sty.contentCheckboxSection)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <CtCheckbox
              aria-label={"Secondary"}
              className={classNames("__wab_instance", sty.ctCheckbox___7GSuh)}
              isChecked={(() => {
                try {
                  return $state.primaryCheckbox.isChecked;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "isChecked";
                  }
                  throw e;
                }
              })()}
            />
          ),

          value: args.contentCheckboxSection2
        })}
      </section>
      <section
        data-plasmic-name={"contentSection"}
        data-plasmic-override={overrides.contentSection}
        className={classNames(projectcss.all, sty.contentSection)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <Trans__>{"None"}</Trans__>
        </div>
      </section>
      <section
        data-plasmic-name={"contentMoreSection"}
        data-plasmic-override={overrides.contentMoreSection}
        className={classNames(projectcss.all, sty.contentMoreSection)}
      >
        <CtMoreButton
          data-plasmic-name={"ctMoreButton"}
          data-plasmic-override={overrides.ctMoreButton}
          className={classNames("__wab_instance", sty.ctMoreButton)}
        />
      </section>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  content: [
    "content",
    "contentCheckboxSection",
    "contentSection",
    "text",
    "contentMoreSection",
    "ctMoreButton"
  ],
  contentCheckboxSection: ["contentCheckboxSection"],
  contentSection: ["contentSection", "text"],
  text: ["text"],
  contentMoreSection: ["contentMoreSection", "ctMoreButton"],
  ctMoreButton: ["ctMoreButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  content: "section";
  contentCheckboxSection: "section";
  contentSection: "section";
  text: "div";
  contentMoreSection: "section";
  ctMoreButton: typeof CtMoreButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtContent__VariantsArgs;
    args?: PlasmicCtContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtContent__ArgProps,
          internalVariantPropNames: PlasmicCtContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "content") {
    func.displayName = "PlasmicCtContent";
  } else {
    func.displayName = `PlasmicCtContent.${nodeName}`;
  }
  return func;
}

export const PlasmicCtContent = Object.assign(
  // Top-level PlasmicCtContent renders the root element
  makeNodeComponent("content"),
  {
    // Helper components rendering sub-elements
    contentCheckboxSection: makeNodeComponent("contentCheckboxSection"),
    contentSection: makeNodeComponent("contentSection"),
    text: makeNodeComponent("text"),
    contentMoreSection: makeNodeComponent("contentMoreSection"),
    ctMoreButton: makeNodeComponent("ctMoreButton"),

    // Metadata about props expected for PlasmicCtContent
    internalVariantProps: PlasmicCtContent__VariantProps,
    internalArgProps: PlasmicCtContent__ArgProps
  }
);

export default PlasmicCtContent;
/* prettier-ignore-end */
