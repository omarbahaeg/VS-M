// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: K5hS48T_EbYY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Searchbox from "../../Searchbox"; // plasmic-import: HxIP9-DtSGaj/component
import CustomDropdown from "../../CustomDropdown"; // plasmic-import: oUw-Oq8BPl_P/component
import CustomButton from "../../CustomButton"; // plasmic-import: r1AkQsrHSZtQ/component
import ActionsList from "../../ActionsList"; // plasmic-import: VUxalQKdyCYj/component
import ActionListItems from "../../ActionListItems"; // plasmic-import: _msz16lTRhj1/component
import TableColumnHeader from "../../TableColumnHeader"; // plasmic-import: 6J6LHNmu-UTh/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicMainTable.module.css"; // plasmic-import: K5hS48T_EbYY/css

import SettingSvgIcon from "./icons/PlasmicIcon__SettingSvg"; // plasmic-import: GwVz15svOXJ1/icon

createPlasmicElementProxy;

export type PlasmicMainTable__VariantMembers = {};
export type PlasmicMainTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainTable__VariantsArgs;
export const PlasmicMainTable__VariantProps = new Array<VariantPropType>();

export type PlasmicMainTable__ArgsType = {};
type ArgPropType = keyof PlasmicMainTable__ArgsType;
export const PlasmicMainTable__ArgProps = new Array<ArgPropType>();

export type PlasmicMainTable__OverridesType = {
  tableBody?: Flex__<"div">;
  tableColumnActions?: Flex__<"div">;
  searchbox?: Flex__<typeof Searchbox>;
  customDropdown?: Flex__<typeof CustomDropdown>;
  customButton?: Flex__<typeof CustomButton>;
  actionListItems?: Flex__<typeof ActionListItems>;
  actionListItems2?: Flex__<typeof ActionListItems>;
  customDropdown2?: Flex__<typeof CustomDropdown>;
  customButton2?: Flex__<typeof CustomButton>;
  actionListItems3?: Flex__<typeof ActionListItems>;
  actionListItems4?: Flex__<typeof ActionListItems>;
  tableColumnHeader?: Flex__<"div">;
  tableColumnRow?: Flex__<"div">;
  table2?: Flex__<typeof RichTable>;
  table3?: Flex__<typeof RichTable>;
};

export interface DefaultMainTableProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainTable__RenderFunc(props: {
  variants: PlasmicMainTable__VariantsArgs;
  args: PlasmicMainTable__ArgsType;
  overrides: PlasmicMainTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "searchbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "actionListItems.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "actionListItems2.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "actionListItems3.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "actionListItems4.isPressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "customButton.isDown",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "customButton2.isDown",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "customDropdown.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "customDropdown2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "c0c3f78b-dfe5-4015-a5e3-04ffe1715358",
        userArgs: {},
        cacheKey: `plasmic.$.c0c3f78b-dfe5-4015-a5e3-04ffe1715358.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"tableBody"}
      data-plasmic-override={overrides.tableBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.tableBody
      )}
    >
      <div
        data-plasmic-name={"tableColumnActions"}
        data-plasmic-override={overrides.tableColumnActions}
        className={classNames(projectcss.all, sty.tableColumnActions)}
      >
        <Searchbox
          data-plasmic-name={"searchbox"}
          data-plasmic-override={overrides.searchbox}
          className={classNames("__wab_instance", sty.searchbox)}
          onValueChange={generateStateOnChangeProp($state, [
            "searchbox",
            "value"
          ])}
          value={generateStateValueProp($state, ["searchbox", "value"])}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__j4HIp)}
        >
          <CustomDropdown
            data-plasmic-name={"customDropdown"}
            data-plasmic-override={overrides.customDropdown}
            className={classNames("__wab_instance", sty.customDropdown)}
            dropdownAlignment={"right"}
            isOpen={generateStateValueProp($state, [
              "customDropdown",
              "isOpen"
            ])}
            onIsOpenChange={generateStateOnChangeProp($state, [
              "customDropdown",
              "isOpen"
            ])}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      data-plasmic-name={"actionListItems"}
                      data-plasmic-override={overrides.actionListItems}
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems
                      )}
                      isPressed={generateStateValueProp($state, [
                        "actionListItems",
                        "isPressed"
                      ])}
                      onIsPressedChange={generateStateOnChangeProp($state, [
                        "actionListItems",
                        "isPressed"
                      ])}
                    />

                    <ActionListItems
                      data-plasmic-name={"actionListItems2"}
                      data-plasmic-override={overrides.actionListItems2}
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems2
                      )}
                      isPressed={generateStateValueProp($state, [
                        "actionListItems2",
                        "isPressed"
                      ])}
                      onIsPressedChange={generateStateOnChangeProp($state, [
                        "actionListItems2",
                        "isPressed"
                      ])}
                    />
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList__fDYv)}
              />
            }
          >
            <CustomButton
              data-plasmic-name={"customButton"}
              data-plasmic-override={overrides.customButton}
              className={classNames("__wab_instance", sty.customButton)}
              isDown={generateStateValueProp($state, [
                "customButton",
                "isDown"
              ])}
              onIsDownChange={generateStateOnChangeProp($state, [
                "customButton",
                "isDown"
              ])}
            />
          </CustomDropdown>
          <CustomDropdown
            data-plasmic-name={"customDropdown2"}
            data-plasmic-override={overrides.customDropdown2}
            className={classNames("__wab_instance", sty.customDropdown2)}
            dropdownAlignment={"right"}
            isOpen={generateStateValueProp($state, [
              "customDropdown2",
              "isOpen"
            ])}
            onIsOpenChange={generateStateOnChangeProp($state, [
              "customDropdown2",
              "isOpen"
            ])}
            slot={
              <ActionsList
                actionsList={
                  <React.Fragment>
                    <ActionListItems
                      data-plasmic-name={"actionListItems3"}
                      data-plasmic-override={overrides.actionListItems3}
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems3
                      )}
                      isPressed={generateStateValueProp($state, [
                        "actionListItems3",
                        "isPressed"
                      ])}
                      onIsPressedChange={generateStateOnChangeProp($state, [
                        "actionListItems3",
                        "isPressed"
                      ])}
                    />

                    <ActionListItems
                      data-plasmic-name={"actionListItems4"}
                      data-plasmic-override={overrides.actionListItems4}
                      className={classNames(
                        "__wab_instance",
                        sty.actionListItems4
                      )}
                      isPressed={generateStateValueProp($state, [
                        "actionListItems4",
                        "isPressed"
                      ])}
                      onIsPressedChange={generateStateOnChangeProp($state, [
                        "actionListItems4",
                        "isPressed"
                      ])}
                    />
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.actionsList__upAd)}
              />
            }
          >
            <CustomButton
              data-plasmic-name={"customButton2"}
              data-plasmic-override={overrides.customButton2}
              className={classNames("__wab_instance", sty.customButton2)}
              isDown={generateStateValueProp($state, [
                "customButton2",
                "isDown"
              ])}
              onIsDownChange={generateStateOnChangeProp($state, [
                "customButton2",
                "isDown"
              ])}
            />
          </CustomDropdown>
        </Stack__>
      </div>
      <div
        data-plasmic-name={"tableColumnHeader"}
        data-plasmic-override={overrides.tableColumnHeader}
        className={classNames(projectcss.all, sty.tableColumnHeader)}
      >
        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__vHmJr)}
          stateTypes={"checkBox"}
        />

        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__csnvm)}
          stateTypes={"empty"}
        />

        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__j0F4D)}
          endRow={true}
          stateTypes={"sorting"}
        />
      </div>
      <div
        data-plasmic-name={"tableColumnRow"}
        data-plasmic-override={overrides.tableColumnRow}
        className={classNames(projectcss.all, sty.tableColumnRow)}
      />

      <div className={classNames(projectcss.all, sty.freeBox__l41V)}>
        {(() => {
          const child$Props = {
            canSelectRows: "multiple",
            className: classNames("__wab_instance", sty.table2),
            data: (() => {
              try {
                return $queries.query.data.response.map(item => ({
                  id: item.id,
                  displayName: item.display_name,
                  points: item.points,
                  username: item.username
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            fields: (() => {
              const __composite = [
                { key: "id", fieldId: "id" },
                {
                  key: "displayName",
                  fieldId: "displayName",
                  disableSorting: null
                },
                { key: "points", fieldId: "points" },
                { key: "username", fieldId: "username" }
              ];
              __composite["1"]["disableSorting"] = true;
              return __composite;
            })(),

            hideDensity: false,
            hideSelectionBar: true,
            onRowSelectionChanged: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKey",
                ["table2", "selectedRowKey"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRow",
                ["table2", "selectedRow"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRows",
                ["table2", "selectedRows"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKeys",
                ["table2", "selectedRowKeys"],
                RichTable_Helpers
              ).apply(null, eventArgs);
            },
            scopeClassName: sty["table2__instance"],
            selectedRowKey: generateStateValueProp($state, [
              "table2",
              "selectedRowKey"
            ]),
            selectedRowKeys: generateStateValueProp($state, [
              "table2",
              "selectedRowKeys"
            ]),
            themeResetClassName: classNames(
              projectcss.root_reset,
              projectcss.root_reset_tags,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "selectedRowKey",
                plasmicStateName: "table2.selectedRowKey"
              },
              {
                name: "selectedRow",
                plasmicStateName: "table2.selectedRow"
              },
              {
                name: "selectedRows",
                plasmicStateName: "table2.selectedRows"
              },
              {
                name: "selectedRowKeys",
                plasmicStateName: "table2.selectedRowKeys"
              }
            ],
            [],
            RichTable_Helpers ?? {},
            child$Props
          );

          return (
            <RichTable
              data-plasmic-name={"table2"}
              data-plasmic-override={overrides.table2}
              {...child$Props}
            />
          );
        })()}
        {(() => {
          const child$Props = {
            canSelectRows: "multiple",
            className: classNames("__wab_instance", sty.table3),
            fields: (() => {
              const __composite = [
                { key: "id", fieldId: "id" },
                {
                  key: "displayName",
                  fieldId: "displayName",
                  disableSorting: null
                },
                { key: "points", fieldId: "points" },
                { key: "username", fieldId: "username" }
              ];
              __composite["1"]["disableSorting"] = true;
              return __composite;
            })(),

            hideDensity: false,
            hideSelectionBar: true,
            onRowSelectionChanged: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKey",
                ["table3", "selectedRowKey"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRow",
                ["table3", "selectedRow"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRows",
                ["table3", "selectedRows"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKeys",
                ["table3", "selectedRowKeys"],
                RichTable_Helpers
              ).apply(null, eventArgs);
            },
            scopeClassName: sty["table3__instance"],
            selectedRowKey: generateStateValueProp($state, [
              "table3",
              "selectedRowKey"
            ]),
            selectedRowKeys: generateStateValueProp($state, [
              "table3",
              "selectedRowKeys"
            ]),
            themeResetClassName: classNames(
              projectcss.root_reset,
              projectcss.root_reset_tags,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "selectedRowKey",
                plasmicStateName: "table3.selectedRowKey"
              },
              {
                name: "selectedRow",
                plasmicStateName: "table3.selectedRow"
              },
              {
                name: "selectedRows",
                plasmicStateName: "table3.selectedRows"
              },
              {
                name: "selectedRowKeys",
                plasmicStateName: "table3.selectedRowKeys"
              }
            ],
            [],
            RichTable_Helpers ?? {},
            child$Props
          );

          return (
            <RichTable
              data-plasmic-name={"table3"}
              data-plasmic-override={overrides.table3}
              {...child$Props}
            />
          );
        })()}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tableBody: [
    "tableBody",
    "tableColumnActions",
    "searchbox",
    "customDropdown",
    "customButton",
    "actionListItems",
    "actionListItems2",
    "customDropdown2",
    "customButton2",
    "actionListItems3",
    "actionListItems4",
    "tableColumnHeader",
    "tableColumnRow",
    "table2",
    "table3"
  ],
  tableColumnActions: [
    "tableColumnActions",
    "searchbox",
    "customDropdown",
    "customButton",
    "actionListItems",
    "actionListItems2",
    "customDropdown2",
    "customButton2",
    "actionListItems3",
    "actionListItems4"
  ],
  searchbox: ["searchbox"],
  customDropdown: [
    "customDropdown",
    "customButton",
    "actionListItems",
    "actionListItems2"
  ],
  customButton: ["customButton"],
  actionListItems: ["actionListItems"],
  actionListItems2: ["actionListItems2"],
  customDropdown2: [
    "customDropdown2",
    "customButton2",
    "actionListItems3",
    "actionListItems4"
  ],
  customButton2: ["customButton2"],
  actionListItems3: ["actionListItems3"],
  actionListItems4: ["actionListItems4"],
  tableColumnHeader: ["tableColumnHeader"],
  tableColumnRow: ["tableColumnRow"],
  table2: ["table2"],
  table3: ["table3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tableBody: "div";
  tableColumnActions: "div";
  searchbox: typeof Searchbox;
  customDropdown: typeof CustomDropdown;
  customButton: typeof CustomButton;
  actionListItems: typeof ActionListItems;
  actionListItems2: typeof ActionListItems;
  customDropdown2: typeof CustomDropdown;
  customButton2: typeof CustomButton;
  actionListItems3: typeof ActionListItems;
  actionListItems4: typeof ActionListItems;
  tableColumnHeader: "div";
  tableColumnRow: "div";
  table2: typeof RichTable;
  table3: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainTable__VariantsArgs;
    args?: PlasmicMainTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMainTable__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainTable__ArgProps,
          internalVariantPropNames: PlasmicMainTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tableBody") {
    func.displayName = "PlasmicMainTable";
  } else {
    func.displayName = `PlasmicMainTable.${nodeName}`;
  }
  return func;
}

export const PlasmicMainTable = Object.assign(
  // Top-level PlasmicMainTable renders the root element
  makeNodeComponent("tableBody"),
  {
    // Helper components rendering sub-elements
    tableColumnActions: makeNodeComponent("tableColumnActions"),
    searchbox: makeNodeComponent("searchbox"),
    customDropdown: makeNodeComponent("customDropdown"),
    customButton: makeNodeComponent("customButton"),
    actionListItems: makeNodeComponent("actionListItems"),
    actionListItems2: makeNodeComponent("actionListItems2"),
    customDropdown2: makeNodeComponent("customDropdown2"),
    customButton2: makeNodeComponent("customButton2"),
    actionListItems3: makeNodeComponent("actionListItems3"),
    actionListItems4: makeNodeComponent("actionListItems4"),
    tableColumnHeader: makeNodeComponent("tableColumnHeader"),
    tableColumnRow: makeNodeComponent("tableColumnRow"),
    table2: makeNodeComponent("table2"),
    table3: makeNodeComponent("table3"),

    // Metadata about props expected for PlasmicMainTable
    internalVariantProps: PlasmicMainTable__VariantProps,
    internalArgProps: PlasmicMainTable__ArgProps
  }
);

export default PlasmicMainTable;
/* prettier-ignore-end */
