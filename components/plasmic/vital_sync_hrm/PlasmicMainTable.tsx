// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: K5hS48T_EbYY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import TableSearch from "../../TableSearch"; // plasmic-import: v9TOdYeoUJJU/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import DropdownButton from "../../DropdownButton"; // plasmic-import: oUw-Oq8BPl_P/component
import Checkbox from "../../Checkbox"; // plasmic-import: ssintioay6Yy/component
import Icon from "../../Icon"; // plasmic-import: brSTv-__77Vi/component
import TableColumnHeader from "../../TableColumnHeader"; // plasmic-import: 6J6LHNmu-UTh/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicMainTable.module.css"; // plasmic-import: K5hS48T_EbYY/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: s6V8mYogtXIl/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 9Xy14f7tX9Ax/icon
import SettingsSvgIcon from "./icons/PlasmicIcon__SettingsSvg"; // plasmic-import: naJAblHQSjQc/icon

createPlasmicElementProxy;

export type PlasmicMainTable__VariantMembers = {};
export type PlasmicMainTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainTable__VariantsArgs;
export const PlasmicMainTable__VariantProps = new Array<VariantPropType>();

export type PlasmicMainTable__ArgsType = {};
type ArgPropType = keyof PlasmicMainTable__ArgsType;
export const PlasmicMainTable__ArgProps = new Array<ArgPropType>();

export type PlasmicMainTable__OverridesType = {
  root?: Flex__<"div">;
  tableColumnActions?: Flex__<"div">;
  tableSearch?: Flex__<typeof TableSearch>;
  button?: Flex__<typeof AntdButton>;
  dropdownButton?: Flex__<typeof DropdownButton>;
  dropdown?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  tableColumnHeader?: Flex__<"div">;
  tableColumnRow?: Flex__<"div">;
  table2?: Flex__<typeof RichTable>;
  table3?: Flex__<typeof RichTable>;
};

export interface DefaultMainTableProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainTable__RenderFunc(props: {
  variants: PlasmicMainTable__VariantsArgs;
  args: PlasmicMainTable__ArgsType;
  overrides: PlasmicMainTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "tableSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "jy9oBFjmhhSMLYBVGZ4Xm2",
        opId: "c0c3f78b-dfe5-4015-a5e3-04ffe1715358",
        userArgs: {},
        cacheKey: `plasmic.$.c0c3f78b-dfe5-4015-a5e3-04ffe1715358.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"tableColumnActions"}
        data-plasmic-override={overrides.tableColumnActions}
        className={classNames(projectcss.all, sty.tableColumnActions)}
      >
        <TableSearch
          data-plasmic-name={"tableSearch"}
          data-plasmic-override={overrides.tableSearch}
          className={classNames("__wab_instance", sty.tableSearch)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["tableSearch", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          value={generateStateValueProp($state, ["tableSearch", "value"]) ?? ""}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__j4HIp)}
        >
          <AntdDropdown
            className={classNames("__wab_instance", sty.dropdown__znizs)}
            dropdownMenuScopeClassName={sty["dropdown__znizs__dropdownMenu"]}
            fakeOpen={false}
            menuItems={() => (
              <React.Fragment>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__gyLpa)}
                  key={"menu-item-1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zL2Pw
                    )}
                  >
                    <Trans__>{"Menu item"}</Trans__>
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__m5WQ)}
                  key={"menu-item-2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iHid1
                    )}
                  >
                    <Trans__>{"Menu item"}</Trans__>
                  </div>
                </AntdMenuItem>
              </React.Fragment>
            )}
            menuItemsJson={(() => {
              const __composite = [
                { type: null, value: "action1", label: null },
                { type: "item", value: "action2", label: null }
              ];
              __composite["0"]["type"] = "item";
              __composite["0"]["label"] = "Download as CSV";
              __composite["1"]["label"] = "Download as JSON";
              return __composite;
            })()}
          >
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return undefined;
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q9N4E
                )}
              >
                <Trans__>{"Export"}</Trans__>
              </div>
            </AntdButton>
          </AntdDropdown>
          <DropdownButton
            data-plasmic-name={"dropdownButton"}
            data-plasmic-override={overrides.dropdownButton}
            className={classNames("__wab_instance", sty.dropdownButton)}
            slot={
              <Stack__
                as={"div"}
                data-plasmic-name={"dropdown"}
                data-plasmic-override={overrides.dropdown}
                hasGap={true}
                className={classNames(projectcss.all, sty.dropdown)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zuRp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5QKqU
                    )}
                  >
                    <Trans__>{"Column Display"}</Trans__>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fXXaZ)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    [2, 3, 4]
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.checkbox),
                        isChecked:
                          generateStateValueProp($state, [
                            "checkbox",
                            __plasmic_idx_0,
                            "isChecked"
                          ]) ?? false,
                        key: currentIndex,
                        onChange: (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "checkbox",
                            __plasmic_idx_0,
                            "isChecked"
                          ])(eventArgs[0]);
                        }
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "checkbox[].isChecked",
                            initFunc: ({ $props, $state, $queries }) =>
                              "isChecked"
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Checkbox
                          data-plasmic-name={"checkbox"}
                          data-plasmic-override={overrides.checkbox}
                          {...child$Props}
                        >
                          <Trans__>{"Table Label"}</Trans__>
                        </Checkbox>
                      );
                    })();
                  })}
                </Stack__>
              </Stack__>
            }
          />
        </Stack__>
      </div>
      <div
        data-plasmic-name={"tableColumnHeader"}
        data-plasmic-override={overrides.tableColumnHeader}
        className={classNames(projectcss.all, sty.tableColumnHeader)}
      >
        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__vHmJr)}
          stateTypes={"checkBox"}
        />

        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__csnvm)}
          stateTypes={"empty"}
        />

        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__j0F4D)}
          endRow={true}
          stateTypes={"sorting"}
        />
      </div>
      <div
        data-plasmic-name={"tableColumnRow"}
        data-plasmic-override={overrides.tableColumnRow}
        className={classNames(projectcss.all, sty.tableColumnRow)}
      >
        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__rktrE)}
          stateTypes={"checkBox"}
        />

        <TableColumnHeader
          className={classNames(
            "__wab_instance",
            sty.tableColumnHeader___9ZnYj
          )}
          stateTypes={"empty"}
        />

        <TableColumnHeader
          className={classNames("__wab_instance", sty.tableColumnHeader__mmdM3)}
          endRow={true}
          stateTypes={"sorting"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__l41V)}>
        {(() => {
          const child$Props = {
            canSelectRows: "multiple",
            className: classNames("__wab_instance", sty.table2),
            data: (() => {
              try {
                return $queries.query.data.response.map(item => ({
                  id: item.id,
                  displayName: item.display_name,
                  points: item.points,
                  username: item.username
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            fields: (() => {
              const __composite = [
                { key: "id", fieldId: "id" },
                {
                  key: "displayName",
                  fieldId: "displayName",
                  disableSorting: null
                },
                { key: "points", fieldId: "points" },
                { key: "username", fieldId: "username" }
              ];
              __composite["1"]["disableSorting"] = true;
              return __composite;
            })(),

            hideDensity: false,
            hideSelectionBar: true,
            onRowSelectionChanged: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKey",
                ["table2", "selectedRowKey"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRow",
                ["table2", "selectedRow"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRows",
                ["table2", "selectedRows"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKeys",
                ["table2", "selectedRowKeys"],
                RichTable_Helpers
              ).apply(null, eventArgs);
            },
            scopeClassName: sty["table2__instance"],
            selectedRowKey: generateStateValueProp($state, [
              "table2",
              "selectedRowKey"
            ]),
            selectedRowKeys: generateStateValueProp($state, [
              "table2",
              "selectedRowKeys"
            ]),
            themeResetClassName: classNames(
              projectcss.root_reset,
              projectcss.root_reset_tags,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "selectedRowKey",
                plasmicStateName: "table2.selectedRowKey"
              },
              {
                name: "selectedRow",
                plasmicStateName: "table2.selectedRow"
              },
              {
                name: "selectedRows",
                plasmicStateName: "table2.selectedRows"
              },
              {
                name: "selectedRowKeys",
                plasmicStateName: "table2.selectedRowKeys"
              }
            ],
            [],
            RichTable_Helpers ?? {},
            child$Props
          );

          return (
            <RichTable
              data-plasmic-name={"table2"}
              data-plasmic-override={overrides.table2}
              {...child$Props}
            />
          );
        })()}
        {(() => {
          const child$Props = {
            canSelectRows: "multiple",
            className: classNames("__wab_instance", sty.table3),
            fields: (() => {
              const __composite = [
                { key: "id", fieldId: "id" },
                {
                  key: "displayName",
                  fieldId: "displayName",
                  disableSorting: null
                },
                { key: "points", fieldId: "points" },
                { key: "username", fieldId: "username" }
              ];
              __composite["1"]["disableSorting"] = true;
              return __composite;
            })(),

            hideDensity: false,
            hideSelectionBar: true,
            onRowSelectionChanged: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKey",
                ["table3", "selectedRowKey"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRow",
                ["table3", "selectedRow"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRows",
                ["table3", "selectedRows"],
                RichTable_Helpers
              ).apply(null, eventArgs);
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedRowKeys",
                ["table3", "selectedRowKeys"],
                RichTable_Helpers
              ).apply(null, eventArgs);
            },
            scopeClassName: sty["table3__instance"],
            selectedRowKey: generateStateValueProp($state, [
              "table3",
              "selectedRowKey"
            ]),
            selectedRowKeys: generateStateValueProp($state, [
              "table3",
              "selectedRowKeys"
            ]),
            themeResetClassName: classNames(
              projectcss.root_reset,
              projectcss.root_reset_tags,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "selectedRowKey",
                plasmicStateName: "table3.selectedRowKey"
              },
              {
                name: "selectedRow",
                plasmicStateName: "table3.selectedRow"
              },
              {
                name: "selectedRows",
                plasmicStateName: "table3.selectedRows"
              },
              {
                name: "selectedRowKeys",
                plasmicStateName: "table3.selectedRowKeys"
              }
            ],
            [],
            RichTable_Helpers ?? {},
            child$Props
          );

          return (
            <RichTable
              data-plasmic-name={"table3"}
              data-plasmic-override={overrides.table3}
              {...child$Props}
            />
          );
        })()}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tableColumnActions",
    "tableSearch",
    "button",
    "dropdownButton",
    "dropdown",
    "checkbox",
    "tableColumnHeader",
    "tableColumnRow",
    "table2",
    "table3"
  ],
  tableColumnActions: [
    "tableColumnActions",
    "tableSearch",
    "button",
    "dropdownButton",
    "dropdown",
    "checkbox"
  ],
  tableSearch: ["tableSearch"],
  button: ["button"],
  dropdownButton: ["dropdownButton", "dropdown", "checkbox"],
  dropdown: ["dropdown", "checkbox"],
  checkbox: ["checkbox"],
  tableColumnHeader: ["tableColumnHeader"],
  tableColumnRow: ["tableColumnRow"],
  table2: ["table2"],
  table3: ["table3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tableColumnActions: "div";
  tableSearch: typeof TableSearch;
  button: typeof AntdButton;
  dropdownButton: typeof DropdownButton;
  dropdown: "div";
  checkbox: typeof Checkbox;
  tableColumnHeader: "div";
  tableColumnRow: "div";
  table2: typeof RichTable;
  table3: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainTable__VariantsArgs;
    args?: PlasmicMainTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMainTable__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainTable__ArgProps,
          internalVariantPropNames: PlasmicMainTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainTable";
  } else {
    func.displayName = `PlasmicMainTable.${nodeName}`;
  }
  return func;
}

export const PlasmicMainTable = Object.assign(
  // Top-level PlasmicMainTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tableColumnActions: makeNodeComponent("tableColumnActions"),
    tableSearch: makeNodeComponent("tableSearch"),
    button: makeNodeComponent("button"),
    dropdownButton: makeNodeComponent("dropdownButton"),
    dropdown: makeNodeComponent("dropdown"),
    checkbox: makeNodeComponent("checkbox"),
    tableColumnHeader: makeNodeComponent("tableColumnHeader"),
    tableColumnRow: makeNodeComponent("tableColumnRow"),
    table2: makeNodeComponent("table2"),
    table3: makeNodeComponent("table3"),

    // Metadata about props expected for PlasmicMainTable
    internalVariantProps: PlasmicMainTable__VariantProps,
    internalArgProps: PlasmicMainTable__ArgProps
  }
);

export default PlasmicMainTable;
/* prettier-ignore-end */
