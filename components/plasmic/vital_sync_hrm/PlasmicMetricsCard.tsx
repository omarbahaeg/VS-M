// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: Xjkst95OHMzJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import CtInfoIcon from "../../CtInfoIcon"; // plasmic-import: g9gKYSYktTlZ/component
import PercentageBadge from "../../PercentageBadge"; // plasmic-import: wOG229KbexC2/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicMetricsCard.module.css"; // plasmic-import: Xjkst95OHMzJ/css

import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: OOawLNcAQduZ/icon

createPlasmicElementProxy;

export type PlasmicMetricsCard__VariantMembers = {
  addional: "info" | "percentage";
  styleType: "minimal";
};
export type PlasmicMetricsCard__VariantsArgs = {
  addional?: MultiChoiceArg<"info" | "percentage">;
  styleType?: SingleChoiceArg<"minimal">;
};
type VariantPropType = keyof PlasmicMetricsCard__VariantsArgs;
export const PlasmicMetricsCard__VariantProps = new Array<VariantPropType>(
  "addional",
  "styleType"
);

export type PlasmicMetricsCard__ArgsType = {
  statisticType?: React.ReactNode;
  tooltip?: string;
  rollingNumber?: React.ReactNode;
  icon?: React.ReactNode;
  percentageBadge2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMetricsCard__ArgsType;
export const PlasmicMetricsCard__ArgProps = new Array<ArgPropType>(
  "statisticType",
  "tooltip",
  "rollingNumber",
  "icon",
  "percentageBadge2"
);

export type PlasmicMetricsCard__OverridesType = {
  metricsCard?: Flex__<"section">;
  iconSection?: Flex__<"div">;
  contentSection?: Flex__<"div">;
  statisticTypeSection?: Flex__<"div">;
  tooltip?: Flex__<typeof AntdTooltip>;
  ctInfoIcon?: Flex__<typeof CtInfoIcon>;
  rolling?: Flex__<"div">;
  h5?: Flex__<"h5">;
};

export interface DefaultMetricsCardProps {
  statisticType?: React.ReactNode;
  tooltip?: string;
  rollingNumber?: React.ReactNode;
  icon?: React.ReactNode;
  percentageBadge2?: React.ReactNode;
  addional?: MultiChoiceArg<"info" | "percentage">;
  styleType?: SingleChoiceArg<"minimal">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMetricsCard__RenderFunc(props: {
  variants: PlasmicMetricsCard__VariantsArgs;
  args: PlasmicMetricsCard__ArgsType;
  overrides: PlasmicMetricsCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tooltip: "Tooltip contents"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ctInfoIcon.outline",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "outline"
      },
      {
        path: "addional",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.addional
      },
      {
        path: "styleType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.styleType
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"section"}
      data-plasmic-name={"metricsCard"}
      data-plasmic-override={overrides.metricsCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.metricsCard,
        {
          [sty.metricsCardaddional_info]: hasVariant(
            $state,
            "addional",
            "info"
          ),
          [sty.metricsCardaddional_percentage]: hasVariant(
            $state,
            "addional",
            "percentage"
          ),
          [sty.metricsCardstyleType_minimal]: hasVariant(
            $state,
            "styleType",
            "minimal"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"iconSection"}
        data-plasmic-override={overrides.iconSection}
        className={classNames(projectcss.all, sty.iconSection, {
          [sty.iconSectionstyleType_minimal]: hasVariant(
            $state,
            "styleType",
            "minimal"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Icon45Icon
              className={classNames(projectcss.all, sty.svg__gZ1K)}
              role={"img"}
            />
          ),

          value: args.icon,
          className: classNames(sty.slotTargetIcon)
        })}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"contentSection"}
        data-plasmic-override={overrides.contentSection}
        hasGap={true}
        className={classNames(projectcss.all, sty.contentSection)}
      >
        <div
          data-plasmic-name={"statisticTypeSection"}
          data-plasmic-override={overrides.statisticTypeSection}
          className={classNames(projectcss.all, sty.statisticTypeSection)}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Statistic Type"}</Trans__>,
            value: args.statisticType,
            className: classNames(sty.slotTargetStatisticType)
          })}
          <AntdTooltip
            data-plasmic-name={"tooltip"}
            data-plasmic-override={overrides.tooltip}
            className={classNames("__wab_instance", sty.tooltip, {
              [sty.tooltipaddional_info]: hasVariant($state, "addional", "info")
            })}
            titleText={args.tooltip}
          >
            <CtInfoIcon
              data-plasmic-name={"ctInfoIcon"}
              data-plasmic-override={overrides.ctInfoIcon}
              className={classNames("__wab_instance", sty.ctInfoIcon)}
              onOutlineChange={generateStateOnChangeProp($state, [
                "ctInfoIcon",
                "outline"
              ])}
              outline={generateStateValueProp($state, [
                "ctInfoIcon",
                "outline"
              ])}
            />
          </AntdTooltip>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"rolling"}
          data-plasmic-override={overrides.rolling}
          hasGap={true}
          className={classNames(projectcss.all, sty.rolling)}
        >
          <h5
            data-plasmic-name={"h5"}
            data-plasmic-override={overrides.h5}
            className={classNames(projectcss.all, projectcss.h5, sty.h5)}
          >
            {renderPlasmicSlot({
              defaultContents: <Trans__>{"0.00"}</Trans__>,
              value: args.rollingNumber,
              className: classNames(sty.slotTargetRollingNumber)
            })}
          </h5>
          {(hasVariant($state, "addional", "percentage") ? true : false)
            ? renderPlasmicSlot({
                defaultContents: (
                  <PercentageBadge
                    className={classNames(
                      "__wab_instance",
                      sty.percentageBadge___6YjuG
                    )}
                  />
                ),

                value: args.percentageBadge2
              })
            : null}
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  metricsCard: [
    "metricsCard",
    "iconSection",
    "contentSection",
    "statisticTypeSection",
    "tooltip",
    "ctInfoIcon",
    "rolling",
    "h5"
  ],
  iconSection: ["iconSection"],
  contentSection: [
    "contentSection",
    "statisticTypeSection",
    "tooltip",
    "ctInfoIcon",
    "rolling",
    "h5"
  ],
  statisticTypeSection: ["statisticTypeSection", "tooltip", "ctInfoIcon"],
  tooltip: ["tooltip", "ctInfoIcon"],
  ctInfoIcon: ["ctInfoIcon"],
  rolling: ["rolling", "h5"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  metricsCard: "section";
  iconSection: "div";
  contentSection: "div";
  statisticTypeSection: "div";
  tooltip: typeof AntdTooltip;
  ctInfoIcon: typeof CtInfoIcon;
  rolling: "div";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMetricsCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMetricsCard__VariantsArgs;
    args?: PlasmicMetricsCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMetricsCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMetricsCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMetricsCard__ArgProps,
          internalVariantPropNames: PlasmicMetricsCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMetricsCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "metricsCard") {
    func.displayName = "PlasmicMetricsCard";
  } else {
    func.displayName = `PlasmicMetricsCard.${nodeName}`;
  }
  return func;
}

export const PlasmicMetricsCard = Object.assign(
  // Top-level PlasmicMetricsCard renders the root element
  makeNodeComponent("metricsCard"),
  {
    // Helper components rendering sub-elements
    iconSection: makeNodeComponent("iconSection"),
    contentSection: makeNodeComponent("contentSection"),
    statisticTypeSection: makeNodeComponent("statisticTypeSection"),
    tooltip: makeNodeComponent("tooltip"),
    ctInfoIcon: makeNodeComponent("ctInfoIcon"),
    rolling: makeNodeComponent("rolling"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicMetricsCard
    internalVariantProps: PlasmicMetricsCard__VariantProps,
    internalArgProps: PlasmicMetricsCard__ArgProps
  }
);

export default PlasmicMetricsCard;
/* prettier-ignore-end */
