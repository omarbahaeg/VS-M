// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: TXVIWb_8PPG_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: emalQdNAiu4w/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSectionMetrics.module.css"; // plasmic-import: TXVIWb_8PPG_/css

createPlasmicElementProxy;

export type PlasmicSectionMetrics__VariantMembers = {
  isAction: "isAction";
};
export type PlasmicSectionMetrics__VariantsArgs = {
  isAction?: SingleBooleanChoiceArg<"isAction">;
};
type VariantPropType = keyof PlasmicSectionMetrics__VariantsArgs;
export const PlasmicSectionMetrics__VariantProps = new Array<VariantPropType>(
  "isAction"
);

export type PlasmicSectionMetrics__ArgsType = {
  content?: React.ReactNode;
  title?: React.ReactNode;
  actions?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSectionMetrics__ArgsType;
export const PlasmicSectionMetrics__ArgProps = new Array<ArgPropType>(
  "content",
  "title",
  "actions"
);

export type PlasmicSectionMetrics__OverridesType = {
  section?: Flex__<"div">;
  headerSection?: Flex__<"div">;
  h4?: Flex__<"h4">;
  actionSectgion?: Flex__<"div">;
  contentSection?: Flex__<"div">;
};

export interface DefaultSectionMetricsProps {
  content?: React.ReactNode;
  title?: React.ReactNode;
  actions?: React.ReactNode;
  isAction?: SingleBooleanChoiceArg<"isAction">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionMetrics__RenderFunc(props: {
  variants: PlasmicSectionMetrics__VariantsArgs;
  args: PlasmicSectionMetrics__ArgsType;
  overrides: PlasmicSectionMetrics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isAction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isAction
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"section"}
      data-plasmic-override={overrides.section}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.section,
        { [sty.sectionisAction]: hasVariant($state, "isAction", "isAction") }
      )}
    >
      <div
        data-plasmic-name={"headerSection"}
        data-plasmic-override={overrides.headerSection}
        className={classNames(projectcss.all, sty.headerSection, {
          [sty.headerSectionisAction]: hasVariant(
            $state,
            "isAction",
            "isAction"
          )
        })}
      >
        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(projectcss.all, projectcss.h4, sty.h4)}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Section Title"}</Trans__>,
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </h4>
        <div
          data-plasmic-name={"actionSectgion"}
          data-plasmic-override={overrides.actionSectgion}
          className={classNames(projectcss.all, sty.actionSectgion, {
            [sty.actionSectgionisAction]: hasVariant(
              $state,
              "isAction",
              "isAction"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Select
                className={classNames("__wab_instance", sty.select__b0VsO)}
                color={"clear"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "week";
                  __composite["0"]["label"] = "This Week";
                  __composite["1"]["value"] = "month";
                  __composite["1"]["label"] = "This Month";
                  __composite["2"]["value"] = "year";
                  __composite["2"]["label"] = "This Year";
                  return __composite;
                })()}
                value={"week"}
              />
            ),

            value: args.actions
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"contentSection"}
        data-plasmic-override={overrides.contentSection}
        className={classNames(projectcss.all, sty.contentSection)}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.content
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section: [
    "section",
    "headerSection",
    "h4",
    "actionSectgion",
    "contentSection"
  ],
  headerSection: ["headerSection", "h4", "actionSectgion"],
  h4: ["h4"],
  actionSectgion: ["actionSectgion"],
  contentSection: ["contentSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section: "div";
  headerSection: "div";
  h4: "h4";
  actionSectgion: "div";
  contentSection: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionMetrics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionMetrics__VariantsArgs;
    args?: PlasmicSectionMetrics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionMetrics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionMetrics__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionMetrics__ArgProps,
          internalVariantPropNames: PlasmicSectionMetrics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionMetrics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section") {
    func.displayName = "PlasmicSectionMetrics";
  } else {
    func.displayName = `PlasmicSectionMetrics.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionMetrics = Object.assign(
  // Top-level PlasmicSectionMetrics renders the root element
  makeNodeComponent("section"),
  {
    // Helper components rendering sub-elements
    headerSection: makeNodeComponent("headerSection"),
    h4: makeNodeComponent("h4"),
    actionSectgion: makeNodeComponent("actionSectgion"),
    contentSection: makeNodeComponent("contentSection"),

    // Metadata about props expected for PlasmicSectionMetrics
    internalVariantProps: PlasmicSectionMetrics__VariantProps,
    internalArgProps: PlasmicSectionMetrics__ArgProps
  }
);

export default PlasmicSectionMetrics;
/* prettier-ignore-end */
