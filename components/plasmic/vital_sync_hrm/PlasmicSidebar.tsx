// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: MaimrxZZ2uDo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: wVHeFJcN9sea/component
import SidebarToggle from "../../SidebarToggle"; // plasmic-import: ApLXdRYqAk86/component
import Searchbox from "../../Searchbox"; // plasmic-import: HxIP9-DtSGaj/component
import SidebarNavigationDropdown from "../../SidebarNavigationDropdown"; // plasmic-import: M2BFYvan2hjN/component
import SidebarNavigationSubitem from "../../SidebarNavigationSubitem"; // plasmic-import: HEiaqG6S4t6W/component
import SidebarNavigationItem from "../../SidebarNavigationItem"; // plasmic-import: ZuuWfkNiYXry/component
import BadgeLabel from "../../BadgeLabel"; // plasmic-import: LXPYsuIaJqY7/component
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: MaimrxZZ2uDo/css

import VitalSyncBrandMarkFullColorSvgIcon from "./icons/PlasmicIcon__VitalSyncBrandMarkFullColorSvg"; // plasmic-import: 8hkhCDveuUnG/icon
import VitalSyncWordMarkSvgIcon from "./icons/PlasmicIcon__VitalSyncWordMarkSvg"; // plasmic-import: 3l0KPQLrYeJ1/icon
import MenuOpenSvgIcon from "./icons/PlasmicIcon__MenuOpenSvg"; // plasmic-import: 9ASPN5fdPsXG/icon
import CloseSvgIcon from "./icons/PlasmicIcon__CloseSvg"; // plasmic-import: IGlXIVeYZFwp/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: t1CcSEYsK3cc/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -hHWm0myDKZV/icon
import UserPlusSvgIcon from "./icons/PlasmicIcon__UserPlusSvg"; // plasmic-import: pR-88zDwQEnc/icon
import PencilBoltSvgIcon from "./icons/PlasmicIcon__PencilBoltSvg"; // plasmic-import: fxeDYeFnMhcL/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: qYDC0LhkIc2_/icon
import UserEditSvgIcon from "./icons/PlasmicIcon__UserEditSvg"; // plasmic-import: A7wi4bTyysuA/icon
import PointerCodeSvgIcon from "./icons/PlasmicIcon__PointerCodeSvg"; // plasmic-import: SRvQOL_VCeU2/icon
import SettingsSvgIcon from "./icons/PlasmicIcon__SettingsSvg"; // plasmic-import: naJAblHQSjQc/icon
import CloudPlusSvgIcon from "./icons/PlasmicIcon__CloudPlusSvg"; // plasmic-import: uOmgSDCdFDth/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 4yHxNVuFeMxE/icon

createPlasmicElementProxy;

export type PlasmicSidebar__VariantMembers = {
  collapsed: "collapsed";
  isVisible: "isVisible";
};
export type PlasmicSidebar__VariantsArgs = {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  isVisible?: SingleBooleanChoiceArg<"isVisible">;
};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "collapsed",
  "isVisible"
);

export type PlasmicSidebar__ArgsType = {
  onIsVisibleChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>(
  "onIsVisibleChange"
);

export type PlasmicSidebar__OverridesType = {
  body?: Flex__<"div">;
  sidebar?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  navigationHeader?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  sidebarToggle?: Flex__<typeof SidebarToggle>;
  sidebarToggleResponsive?: Flex__<typeof SidebarToggle>;
  searchbox?: Flex__<typeof Searchbox>;
  navigation?: Flex__<"div">;
  sidebarNavigationSubitem?: Flex__<typeof SidebarNavigationSubitem>;
  sidebarNavigationSubitem3?: Flex__<typeof SidebarNavigationSubitem>;
  navigation2?: Flex__<"div">;
  title?: Flex__<"div">;
  navigation3?: Flex__<"div">;
  title2?: Flex__<"div">;
  sidebarNavigationSubitem2?: Flex__<typeof SidebarNavigationSubitem>;
  sidebarNavigationSubitem4?: Flex__<typeof SidebarNavigationSubitem>;
  sidebarNavigationSubitem5?: Flex__<typeof SidebarNavigationSubitem>;
  sidebarNavigationSubitem6?: Flex__<typeof SidebarNavigationSubitem>;
  accountSection?: Flex__<"div">;
  avatarLabel?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  nameRolle?: Flex__<"div">;
  badgeLabel?: Flex__<typeof BadgeLabel>;
  tooltip?: Flex__<typeof AntdTooltip>;
};

export interface DefaultSidebarProps {
  onIsVisibleChange?: (val: any) => void;
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  isVisible?: SingleBooleanChoiceArg<"isVisible">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      },
      {
        path: "searchbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isVisible",
        type: "writable",
        variableType: "variant",

        valueProp: "isVisible",
        onChangeProp: "onIsVisibleChange"
      },
      {
        path: "sidebarToggle.expand",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebarToggleResponsive.expand",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebarNavigationSubitem.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarNavigationSubitem2.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarNavigationSubitem3.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarNavigationSubitem4.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarNavigationSubitem5.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarNavigationSubitem6.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.pageLink === $ctx.pagePath;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isBodyHover, triggerBodyHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_body: isBodyHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <div
      data-plasmic-name={"body"}
      data-plasmic-override={overrides.body}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.body,
        {
          [sty.bodycollapsed]: hasVariant($state, "collapsed", "collapsed"),
          [sty.bodyisVisible]: hasVariant($state, "isVisible", "isVisible")
        }
      )}
      data-plasmic-trigger-props={[triggerBodyHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebar"}
        data-plasmic-override={overrides.sidebar}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebar, {
          [sty.sidebarcollapsed]: hasVariant($state, "collapsed", "collapsed"),
          [sty.sidebarisVisible]: hasVariant($state, "isVisible", "isVisible")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxcollapsed]: hasVariant($state, "collapsed", "collapsed")
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"navigationHeader"}
            data-plasmic-override={overrides.navigationHeader}
            hasGap={true}
            className={classNames(projectcss.all, sty.navigationHeader, {
              [sty.navigationHeadercollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo, {
                [sty.logocollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                ),
                [sty.logoisVisible]: hasVariant(
                  $state,
                  "isVisible",
                  "isVisible"
                )
              })}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              wordmark={
                <VitalSyncWordMarkSvgIcon
                  className={classNames(projectcss.all, sty.svg__l8W0S, {
                    [sty.svgcollapsed__l8W0SiUi1M]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    )
                  })}
                  role={"img"}
                />
              }
            />

            <SidebarToggle
              data-plasmic-name={"sidebarToggle"}
              data-plasmic-override={overrides.sidebarToggle}
              className={classNames("__wab_instance", sty.sidebarToggle, {
                [sty.sidebarTogglecollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                ),
                [sty.sidebarToggleisVisible]: hasVariant(
                  $state,
                  "isVisible",
                  "isVisible"
                )
              })}
              collapsedIcon={
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "isVisible", "isVisible")
                      ? CloseSvgIcon
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? CloseSvgIcon
                      : MenuOpenSvgIcon
                  }
                  className={classNames(projectcss.all, sty.svg__vl5Nj, {
                    [sty.svgisVisible__vl5Njz07S0]: hasVariant(
                      $state,
                      "isVisible",
                      "isVisible"
                    )
                  })}
                  role={"img"}
                />
              }
              expand={generateStateValueProp($state, [
                "sidebarToggle",
                "expand"
              ])}
              expandIcon={
                <Icon25Icon
                  className={classNames(projectcss.all, sty.svg__k3GGf)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.sidebarToggle.expand =
                              !$state.sidebarToggle.expand;
                            return ($state.collapsed =
                              $state.sidebarToggle.expand);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onExpandChange={generateStateOnChangeProp($state, [
                "sidebarToggle",
                "expand"
              ])}
            />

            {(
              hasVariant($state, "isVisible", "isVisible")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : false
            ) ? (
              <SidebarToggle
                data-plasmic-name={"sidebarToggleResponsive"}
                data-plasmic-override={overrides.sidebarToggleResponsive}
                className={classNames(
                  "__wab_instance",
                  sty.sidebarToggleResponsive,
                  {
                    [sty.sidebarToggleResponsivecollapsed]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    ),
                    [sty.sidebarToggleResponsiveisVisible]: hasVariant(
                      $state,
                      "isVisible",
                      "isVisible"
                    )
                  }
                )}
                collapsedIcon={
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant($state, "isVisible", "isVisible")
                        ? CloseSvgIcon
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? CloseSvgIcon
                        : MenuOpenSvgIcon
                    }
                    className={classNames(projectcss.all, sty.svg__lDyYr, {
                      [sty.svgisVisible__lDyYrz07S0]: hasVariant(
                        $state,
                        "isVisible",
                        "isVisible"
                      )
                    })}
                    role={"img"}
                  />
                }
                expand={generateStateValueProp($state, [
                  "sidebarToggleResponsive",
                  "expand"
                ])}
                expandIcon={
                  <Icon25Icon
                    className={classNames(projectcss.all, sty.svg___4XP1)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsVisible"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "isVisible",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsVisible"] != null &&
                    typeof $steps["updateIsVisible"] === "object" &&
                    typeof $steps["updateIsVisible"].then === "function"
                  ) {
                    $steps["updateIsVisible"] = await $steps["updateIsVisible"];
                  }
                }}
                onExpandChange={generateStateOnChangeProp($state, [
                  "sidebarToggleResponsive",
                  "expand"
                ])}
              />
            ) : null}
          </Stack__>
          <Searchbox
            data-plasmic-name={"searchbox"}
            data-plasmic-override={overrides.searchbox}
            className={classNames("__wab_instance", sty.searchbox, {
              [sty.searchboxcollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") &&
              triggers.hover_body
                ? undefined
                : hasVariant($state, "collapsed", "collapsed")
                ? true
                : undefined
            }
            color={"dark"}
            onValueChange={generateStateOnChangeProp($state, [
              "searchbox",
              "value"
            ])}
            showStartIcon={true}
            value={generateStateValueProp($state, ["searchbox", "value"])}
          />

          <div
            data-plasmic-name={"navigation"}
            data-plasmic-override={overrides.navigation}
            className={classNames(projectcss.all, sty.navigation, {
              [sty.navigationcollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <SidebarNavigationDropdown
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationDropdown__fum8J,
                {
                  [sty.sidebarNavigationDropdowncollapsed__fum8JiUi1M]:
                    hasVariant($state, "collapsed", "collapsed")
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              isOpen={(() => {
                try {
                  return (
                    $state.sidebarNavigationSubitem.active === true ||
                    $state.sidebarNavigationSubitem3.active === true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "isOpen";
                  }
                  throw e;
                }
              })()}
              label={<Trans__>{"Dashboard"}</Trans__>}
              subItems={
                <React.Fragment>
                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem
                    )}
                    label={<Trans__>{"Overview"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem",
                      "active"
                    ])}
                    pageLink={`/`}
                  />

                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem3"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem3}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem3",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem3
                    )}
                    label={<Trans__>{"Analytics"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem3",
                      "active"
                    ])}
                    pageLink={`/dashboard/analytics`}
                  />
                </React.Fragment>
              }
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"navigation2"}
            data-plasmic-override={overrides.navigation2}
            hasGap={true}
            className={classNames(projectcss.all, sty.navigation2, {
              [sty.navigation2collapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title, {
                [sty.titlecollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dW9T,
                  {
                    [sty.textcollapsed__dW9TiUi1M]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    )
                  }
                )}
              >
                <Trans__>{"Tools"}</Trans__>
              </div>
            </div>
            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem__aI5E,
                {
                  [sty.sidebarNavigationItemcollapsed__aI5EiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <UserPlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__tEg7K)}
                  role={"img"}
                />
              }
              label={<Trans__>{"Requests"}</Trans__>}
              pageLink={`/requests`}
            />

            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem__wa8Df,
                {
                  [sty.sidebarNavigationItemcollapsed__wa8DFiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <PencilBoltSvgIcon
                  className={classNames(projectcss.all, sty.svg__rnmwa)}
                  role={"img"}
                />
              }
              label={<Trans__>{"E-Signature"}</Trans__>}
              pageLink={`/e-sign`}
            />

            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem__vD4X1,
                {
                  [sty.sidebarNavigationItemcollapsed__vD4X1IUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <Icon21Icon
                  className={classNames(projectcss.all, sty.svg__npPHs)}
                  role={"img"}
                />
              }
              label={<Trans__>{"Messages"}</Trans__>}
              pageLink={`/messages`}
            />

            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem__m1WaZ,
                {
                  [sty.sidebarNavigationItemcollapsed__m1WaZiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <UserEditSvgIcon
                  className={classNames(projectcss.all, sty.svg__ht617)}
                  role={"img"}
                />
              }
              label={<Trans__>{"User Management"}</Trans__>}
              pageLink={`/user-management`}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"navigation3"}
            data-plasmic-override={overrides.navigation3}
            hasGap={true}
            className={classNames(projectcss.all, sty.navigation3, {
              [sty.navigation3collapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <div
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(projectcss.all, sty.title2, {
                [sty.title2collapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cpag3,
                  {
                    [sty.textcollapsed__cpag3IUi1M]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    )
                  }
                )}
              >
                <Trans__>{"Manage"}</Trans__>
              </div>
            </div>
            <SidebarNavigationDropdown
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationDropdown___6NnS,
                {
                  [sty.sidebarNavigationDropdowncollapsed___6NnSiUi1M]:
                    hasVariant($state, "collapsed", "collapsed")
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <PointerCodeSvgIcon
                  className={classNames(projectcss.all, sty.svg___8CrqZ)}
                  role={"img"}
                />
              }
              label={<Trans__>{"Records"}</Trans__>}
              subItems={
                <React.Fragment>
                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem2"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem2}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem2",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem2
                    )}
                    label={<Trans__>{"Forms"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem2",
                      "active"
                    ])}
                    pageLink={`/records/forms`}
                  />

                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem4"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem4}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem4",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem4
                    )}
                    label={<Trans__>{"Emails"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem4",
                      "active"
                    ])}
                    pageLink={`/records/emails`}
                  />

                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem5"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem5}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem5",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem5
                    )}
                    label={<Trans__>{"Submissions"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem5",
                      "active"
                    ])}
                    pageLink={`/records/submissions`}
                  />

                  <SidebarNavigationSubitem
                    data-plasmic-name={"sidebarNavigationSubitem6"}
                    data-plasmic-override={overrides.sidebarNavigationSubitem6}
                    active={generateStateValueProp($state, [
                      "sidebarNavigationSubitem6",
                      "active"
                    ])}
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarNavigationSubitem6
                    )}
                    label={<Trans__>{"Automations"}</Trans__>}
                    onActiveChange={generateStateOnChangeProp($state, [
                      "sidebarNavigationSubitem6",
                      "active"
                    ])}
                    pageLink={`/records/automations`}
                  />
                </React.Fragment>
              }
            />

            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem___2Kt5V,
                {
                  [sty.sidebarNavigationItemcollapsed___2Kt5ViUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <SettingsSvgIcon
                  className={classNames(projectcss.all, sty.svg__eTkW0)}
                  role={"img"}
                />
              }
              label={<Trans__>{"Settings"}</Trans__>}
              pageLink={`/settings`}
            />

            <SidebarNavigationItem
              className={classNames(
                "__wab_instance",
                sty.sidebarNavigationItem__u9Bcy,
                {
                  [sty.sidebarNavigationItemcollapsed__u9BcyiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
              collapsed={
                hasVariant($state, "collapsed", "collapsed") &&
                triggers.hover_body
                  ? undefined
                  : hasVariant($state, "collapsed", "collapsed")
                  ? true
                  : undefined
              }
              icon={
                <CloudPlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__wsyMd)}
                  role={"img"}
                />
              }
              label={<Trans__>{"Backups"}</Trans__>}
              pageLink={`/backups`}
            />
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"accountSection"}
          data-plasmic-override={overrides.accountSection}
          hasGap={true}
          className={classNames(projectcss.all, sty.accountSection, {
            [sty.accountSectioncollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"avatarLabel"}
            data-plasmic-override={overrides.avatarLabel}
            hasGap={true}
            className={classNames(projectcss.all, sty.avatarLabel)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgcollapsed]: hasVariant($state, "collapsed", "collapsed")
              })}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/vital_sync_hrm/images/defaultUserImagePng.png",
                fullWidth: 1280,
                fullHeight: 1280,
                aspectRatio: undefined
              }}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"nameRolle"}
              data-plasmic-override={overrides.nameRolle}
              hasGap={true}
              className={classNames(projectcss.all, sty.nameRolle, {
                [sty.nameRollecollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__atUgn,
                  {
                    [sty.textcollapsed__atUgNiUi1M]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    )
                  }
                )}
              >
                <Trans__>{"Jhone Smith"}</Trans__>
              </div>
              <BadgeLabel
                data-plasmic-name={"badgeLabel"}
                data-plasmic-override={overrides.badgeLabel}
                className={classNames("__wab_instance", sty.badgeLabel)}
              >
                <Trans__>{"Admin"}</Trans__>
              </BadgeLabel>
            </Stack__>
          </Stack__>
          <AntdTooltip
            data-plasmic-name={"tooltip"}
            data-plasmic-override={overrides.tooltip}
            className={classNames("__wab_instance", sty.tooltip)}
            titleText={"Open Profile"}
          >
            <Icon17Icon
              className={classNames(projectcss.all, sty.svg__c8Wep, {
                [sty.svgcollapsed__c8WepiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
              role={"img"}
            />
          </AntdTooltip>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "sidebar",
    "freeBox",
    "navigationHeader",
    "logo",
    "sidebarToggle",
    "sidebarToggleResponsive",
    "searchbox",
    "navigation",
    "sidebarNavigationSubitem",
    "sidebarNavigationSubitem3",
    "navigation2",
    "title",
    "navigation3",
    "title2",
    "sidebarNavigationSubitem2",
    "sidebarNavigationSubitem4",
    "sidebarNavigationSubitem5",
    "sidebarNavigationSubitem6",
    "accountSection",
    "avatarLabel",
    "img",
    "nameRolle",
    "badgeLabel",
    "tooltip"
  ],
  sidebar: [
    "sidebar",
    "freeBox",
    "navigationHeader",
    "logo",
    "sidebarToggle",
    "sidebarToggleResponsive",
    "searchbox",
    "navigation",
    "sidebarNavigationSubitem",
    "sidebarNavigationSubitem3",
    "navigation2",
    "title",
    "navigation3",
    "title2",
    "sidebarNavigationSubitem2",
    "sidebarNavigationSubitem4",
    "sidebarNavigationSubitem5",
    "sidebarNavigationSubitem6",
    "accountSection",
    "avatarLabel",
    "img",
    "nameRolle",
    "badgeLabel",
    "tooltip"
  ],
  freeBox: [
    "freeBox",
    "navigationHeader",
    "logo",
    "sidebarToggle",
    "sidebarToggleResponsive",
    "searchbox",
    "navigation",
    "sidebarNavigationSubitem",
    "sidebarNavigationSubitem3",
    "navigation2",
    "title",
    "navigation3",
    "title2",
    "sidebarNavigationSubitem2",
    "sidebarNavigationSubitem4",
    "sidebarNavigationSubitem5",
    "sidebarNavigationSubitem6"
  ],
  navigationHeader: [
    "navigationHeader",
    "logo",
    "sidebarToggle",
    "sidebarToggleResponsive"
  ],
  logo: ["logo"],
  sidebarToggle: ["sidebarToggle"],
  sidebarToggleResponsive: ["sidebarToggleResponsive"],
  searchbox: ["searchbox"],
  navigation: [
    "navigation",
    "sidebarNavigationSubitem",
    "sidebarNavigationSubitem3"
  ],
  sidebarNavigationSubitem: ["sidebarNavigationSubitem"],
  sidebarNavigationSubitem3: ["sidebarNavigationSubitem3"],
  navigation2: ["navigation2", "title"],
  title: ["title"],
  navigation3: [
    "navigation3",
    "title2",
    "sidebarNavigationSubitem2",
    "sidebarNavigationSubitem4",
    "sidebarNavigationSubitem5",
    "sidebarNavigationSubitem6"
  ],
  title2: ["title2"],
  sidebarNavigationSubitem2: ["sidebarNavigationSubitem2"],
  sidebarNavigationSubitem4: ["sidebarNavigationSubitem4"],
  sidebarNavigationSubitem5: ["sidebarNavigationSubitem5"],
  sidebarNavigationSubitem6: ["sidebarNavigationSubitem6"],
  accountSection: [
    "accountSection",
    "avatarLabel",
    "img",
    "nameRolle",
    "badgeLabel",
    "tooltip"
  ],
  avatarLabel: ["avatarLabel", "img", "nameRolle", "badgeLabel"],
  img: ["img"],
  nameRolle: ["nameRolle", "badgeLabel"],
  badgeLabel: ["badgeLabel"],
  tooltip: ["tooltip"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  sidebar: "div";
  freeBox: "div";
  navigationHeader: "div";
  logo: typeof Logo;
  sidebarToggle: typeof SidebarToggle;
  sidebarToggleResponsive: typeof SidebarToggle;
  searchbox: typeof Searchbox;
  navigation: "div";
  sidebarNavigationSubitem: typeof SidebarNavigationSubitem;
  sidebarNavigationSubitem3: typeof SidebarNavigationSubitem;
  navigation2: "div";
  title: "div";
  navigation3: "div";
  title2: "div";
  sidebarNavigationSubitem2: typeof SidebarNavigationSubitem;
  sidebarNavigationSubitem4: typeof SidebarNavigationSubitem;
  sidebarNavigationSubitem5: typeof SidebarNavigationSubitem;
  sidebarNavigationSubitem6: typeof SidebarNavigationSubitem;
  accountSection: "div";
  avatarLabel: "div";
  img: typeof PlasmicImg__;
  nameRolle: "div";
  badgeLabel: typeof BadgeLabel;
  tooltip: typeof AntdTooltip;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSidebar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    freeBox: makeNodeComponent("freeBox"),
    navigationHeader: makeNodeComponent("navigationHeader"),
    logo: makeNodeComponent("logo"),
    sidebarToggle: makeNodeComponent("sidebarToggle"),
    sidebarToggleResponsive: makeNodeComponent("sidebarToggleResponsive"),
    searchbox: makeNodeComponent("searchbox"),
    navigation: makeNodeComponent("navigation"),
    sidebarNavigationSubitem: makeNodeComponent("sidebarNavigationSubitem"),
    sidebarNavigationSubitem3: makeNodeComponent("sidebarNavigationSubitem3"),
    navigation2: makeNodeComponent("navigation2"),
    title: makeNodeComponent("title"),
    navigation3: makeNodeComponent("navigation3"),
    title2: makeNodeComponent("title2"),
    sidebarNavigationSubitem2: makeNodeComponent("sidebarNavigationSubitem2"),
    sidebarNavigationSubitem4: makeNodeComponent("sidebarNavigationSubitem4"),
    sidebarNavigationSubitem5: makeNodeComponent("sidebarNavigationSubitem5"),
    sidebarNavigationSubitem6: makeNodeComponent("sidebarNavigationSubitem6"),
    accountSection: makeNodeComponent("accountSection"),
    avatarLabel: makeNodeComponent("avatarLabel"),
    img: makeNodeComponent("img"),
    nameRolle: makeNodeComponent("nameRolle"),
    badgeLabel: makeNodeComponent("badgeLabel"),
    tooltip: makeNodeComponent("tooltip"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
