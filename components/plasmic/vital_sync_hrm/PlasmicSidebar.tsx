// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qFgf32neWRE8gRveVBaatz
// Component: MaimrxZZ2uDo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: wVHeFJcN9sea/component
import SidebarToggle from "../../SidebarToggle"; // plasmic-import: ApLXdRYqAk86/component
import TextInput from "../../TextInput"; // plasmic-import: ca9OvSNLUBNw/component
import SidebarNavigation from "../../SidebarNavigation"; // plasmic-import: M2BFYvan2hjN/component
import SubItem from "../../SubItem"; // plasmic-import: Dbp6QW6F8Oz_/component
import SidebarNavigationLabel from "../../SidebarNavigationLabel"; // plasmic-import: ZuuWfkNiYXry/component
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";

import { useScreenVariants as useScreenVariantsujc2VYpomBng } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UJC2VYpomBng/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qFgf32neWRE8gRveVBaatz/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: MaimrxZZ2uDo/css

import VitalSyncBrandMarkFullColorSvgIcon from "./icons/PlasmicIcon__VitalSyncBrandMarkFullColorSvg"; // plasmic-import: 8hkhCDveuUnG/icon
import VitalSyncWordMarkSvgIcon from "./icons/PlasmicIcon__VitalSyncWordMarkSvg"; // plasmic-import: 3l0KPQLrYeJ1/icon
import MenuOpenSvgIcon from "./icons/PlasmicIcon__MenuOpenSvg"; // plasmic-import: 9ASPN5fdPsXG/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: t1CcSEYsK3cc/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: s6V8mYogtXIl/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 9Xy14f7tX9Ax/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -hHWm0myDKZV/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: buLjXiTjgKgo/icon
import UserPlusSvgIcon from "./icons/PlasmicIcon__UserPlusSvg"; // plasmic-import: pR-88zDwQEnc/icon
import PencilBoltSvgIcon from "./icons/PlasmicIcon__PencilBoltSvg"; // plasmic-import: fxeDYeFnMhcL/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: qYDC0LhkIc2_/icon
import UserEditSvgIcon from "./icons/PlasmicIcon__UserEditSvg"; // plasmic-import: A7wi4bTyysuA/icon
import PointerCodeSvgIcon from "./icons/PlasmicIcon__PointerCodeSvg"; // plasmic-import: SRvQOL_VCeU2/icon
import SettingsSvgIcon from "./icons/PlasmicIcon__SettingsSvg"; // plasmic-import: naJAblHQSjQc/icon
import CloudPlusSvgIcon from "./icons/PlasmicIcon__CloudPlusSvg"; // plasmic-import: uOmgSDCdFDth/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 4yHxNVuFeMxE/icon

createPlasmicElementProxy;

export type PlasmicSidebar__VariantMembers = {
  collapsed: "collapsed";
};
export type PlasmicSidebar__VariantsArgs = {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "collapsed"
);

export type PlasmicSidebar__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar__OverridesType = {
  sidebar?: Flex__<"div">;
  navigationHeader?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  icons?: Flex__<"div">;
  sidebarToggle?: Flex__<typeof SidebarToggle>;
  textInput?: Flex__<typeof TextInput>;
  navigation?: Flex__<"div">;
  badge17?: Flex__<"div">;
  badgeNum?: Flex__<"div">;
  subItem?: Flex__<typeof SubItem>;
  navigation2?: Flex__<"div">;
  title?: Flex__<"div">;
  navigation3?: Flex__<"div">;
  title2?: Flex__<"div">;
  badge18?: Flex__<"div">;
  badgeNum2?: Flex__<"div">;
  account?: Flex__<"div">;
  avatarLabel?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  nameRolle?: Flex__<"div">;
  tooltip?: Flex__<typeof AntdTooltip>;
};

export interface DefaultSidebarProps {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsujc2VYpomBng()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"sidebar"}
      data-plasmic-override={overrides.sidebar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.sidebar,
        { [sty.sidebarcollapsed]: hasVariant($state, "collapsed", "collapsed") }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__iBuk7)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"navigationHeader"}
          data-plasmic-override={overrides.navigationHeader}
          hasGap={true}
          className={classNames(projectcss.all, sty.navigationHeader, {
            [sty.navigationHeadercollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo, {
              [sty.logocollapsed]: hasVariant($state, "collapsed", "collapsed")
            })}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            wordmark={
              <VitalSyncWordMarkSvgIcon
                className={classNames(projectcss.all, sty.svg__l8W0S, {
                  [sty.svgcollapsed__l8W0SiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                })}
                role={"img"}
              />
            }
          />

          <div
            data-plasmic-name={"icons"}
            data-plasmic-override={overrides.icons}
            className={classNames(projectcss.all, sty.icons)}
            onClick={async event => {
              const $steps = {};

              $steps["updateCollapsed"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "collapsed",
                      operation: 2,
                      value: "collapsed"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCollapsed"] != null &&
                typeof $steps["updateCollapsed"] === "object" &&
                typeof $steps["updateCollapsed"].then === "function"
              ) {
                $steps["updateCollapsed"] = await $steps["updateCollapsed"];
              }
            }}
          >
            <SidebarToggle
              data-plasmic-name={"sidebarToggle"}
              data-plasmic-override={overrides.sidebarToggle}
              className={classNames("__wab_instance", sty.sidebarToggle, {
                [sty.sidebarTogglecollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
              collapsedIcon={
                <MenuOpenSvgIcon
                  className={classNames(projectcss.all, sty.svg__vl5Nj)}
                  role={"img"}
                />
              }
              expandIcon={
                <Icon25Icon
                  className={classNames(projectcss.all, sty.svg__k3GGf)}
                  role={"img"}
                />
              }
            />
          </div>
        </Stack__>
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          autoFocus={false}
          className={classNames("__wab_instance", sty.textInput, {
            [sty.textInputcollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={$translator?.("Search") ?? "Search"}
          showStartIcon={true}
          value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
        />

        <div
          data-plasmic-name={"navigation"}
          data-plasmic-override={overrides.navigation}
          className={classNames(projectcss.all, sty.navigation, {
            [sty.navigationcollapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <SidebarNavigation
            badge={
              <div
                data-plasmic-name={"badge17"}
                data-plasmic-override={overrides.badge17}
                className={classNames(projectcss.all, sty.badge17)}
              >
                <div
                  data-plasmic-name={"badgeNum"}
                  data-plasmic-override={overrides.badgeNum}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.badgeNum
                  )}
                >
                  <Trans__>{"0"}</Trans__>
                </div>
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigation__sYjSx,
              {
                [sty.sidebarNavigationcollapsed__sYjSXiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            isOpen={
              hasVariant($state, "collapsed", "collapsed")
                ? (() => {
                    try {
                      return !$state.collapsed;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            label={
              <React.Fragment>
                <SubItem
                  data-plasmic-name={"subItem"}
                  data-plasmic-override={overrides.subItem}
                  className={classNames("__wab_instance", sty.subItem)}
                  pageLink={`/`}
                >
                  <Trans__>{"Overview"}</Trans__>
                </SubItem>
                <SubItem
                  className={classNames("__wab_instance", sty.subItem___4WyfX)}
                  pageLink={`/dashboard/analytics`}
                >
                  <Trans__>{"Analytics"}</Trans__>
                </SubItem>
              </React.Fragment>
            }
            showBadge={
              hasVariant($state, "collapsed", "collapsed")
                ? undefined
                : undefined
            }
            startIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__fMOt)}
                role={"img"}
              />
            }
          >
            <Trans__>{"Dashboard"}</Trans__>
          </SidebarNavigation>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"navigation2"}
          data-plasmic-override={overrides.navigation2}
          hasGap={true}
          className={classNames(projectcss.all, sty.navigation2)}
        >
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(projectcss.all, sty.title, {
              [sty.titlecollapsed]: hasVariant($state, "collapsed", "collapsed")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dW9T,
                {
                  [sty.textcollapsed__dW9TiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
            >
              <Trans__>{"Tools"}</Trans__>
            </div>
          </div>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel__aI5E,
              {
                [sty.sidebarNavigationLabelcollapsed__aI5EiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/requests`}
            startIcon={
              <UserPlusSvgIcon
                className={classNames(projectcss.all, sty.svg__qgCov)}
                role={"img"}
              />
            }
          >
            <Trans__>{"Requests"}</Trans__>
          </SidebarNavigationLabel>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel__wa8Df,
              {
                [sty.sidebarNavigationLabelcollapsed__wa8DFiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/e-sign`}
            startIcon={
              <PencilBoltSvgIcon
                className={classNames(projectcss.all, sty.svg___3DeUn)}
                role={"img"}
              />
            }
          >
            <Trans__>{"E-Signature"}</Trans__>
          </SidebarNavigationLabel>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel__vD4X1,
              {
                [sty.sidebarNavigationLabelcollapsed__vD4X1IUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/messages`}
            startIcon={
              <Icon21Icon
                className={classNames(projectcss.all, sty.svg__t0IYd)}
                role={"img"}
              />
            }
          >
            <Trans__>{"Messages"}</Trans__>
          </SidebarNavigationLabel>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel__m1WaZ,
              {
                [sty.sidebarNavigationLabelcollapsed__m1WaZiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/user-management`}
            startIcon={
              <UserEditSvgIcon
                className={classNames(projectcss.all, sty.svg__pBgm)}
                role={"img"}
              />
            }
          >
            <Trans__>{"User Management"}</Trans__>
          </SidebarNavigationLabel>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"navigation3"}
          data-plasmic-override={overrides.navigation3}
          hasGap={true}
          className={classNames(projectcss.all, sty.navigation3)}
        >
          <div
            data-plasmic-name={"title2"}
            data-plasmic-override={overrides.title2}
            className={classNames(projectcss.all, sty.title2, {
              [sty.title2collapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cpag3,
                {
                  [sty.textcollapsed__cpag3IUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
            >
              <Trans__>{"Manage"}</Trans__>
            </div>
          </div>
          <SidebarNavigation
            badge={
              <div
                data-plasmic-name={"badge18"}
                data-plasmic-override={overrides.badge18}
                className={classNames(projectcss.all, sty.badge18)}
              >
                <div
                  data-plasmic-name={"badgeNum2"}
                  data-plasmic-override={overrides.badgeNum2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.badgeNum2
                  )}
                >
                  <Trans__>{"0"}</Trans__>
                </div>
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigation___1BtS5,
              {
                [sty.sidebarNavigationcollapsed___1BtS5IUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            endIcon={
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__gRxhu, {
                  [sty.svgcollapsed__gRxhuiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                })}
                role={"img"}
              />
            }
            isOpen={
              hasVariant($state, "collapsed", "collapsed")
                ? (() => {
                    try {
                      return !$state.collapsed;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $props.subItem == false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "isOpen";
                      }
                      throw e;
                    }
                  })()
            }
            label={
              <React.Fragment>
                <SubItem
                  className={classNames("__wab_instance", sty.subItem___15JJc)}
                  pageLink={`/records/forms`}
                  pressed={undefined}
                >
                  <Trans__>{"Forms"}</Trans__>
                </SubItem>
                <SubItem
                  className={classNames("__wab_instance", sty.subItem___63Cds)}
                  pageLink={`/records/emails`}
                >
                  <Trans__>{"Emails"}</Trans__>
                </SubItem>
                <SubItem
                  className={classNames("__wab_instance", sty.subItem__boQCp)}
                  pageLink={`/records/submissions`}
                >
                  <Trans__>{"Submissions"}</Trans__>
                </SubItem>
                <SubItem
                  className={classNames("__wab_instance", sty.subItem__jff95)}
                  pageLink={`/records/automations`}
                >
                  <Trans__>{"Automations"}</Trans__>
                </SubItem>
              </React.Fragment>
            }
            showBadge={
              hasVariant($state, "collapsed", "collapsed")
                ? undefined
                : undefined
            }
            startIcon={
              <PointerCodeSvgIcon
                className={classNames(projectcss.all, sty.svg__cfeC8)}
                role={"img"}
              />
            }
            subItem={false}
          >
            <Trans__>{"Records"}</Trans__>
          </SidebarNavigation>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel___2Kt5V,
              {
                [sty.sidebarNavigationLabelcollapsed___2Kt5ViUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/settings`}
            startIcon={
              <SettingsSvgIcon
                className={classNames(projectcss.all, sty.svg__sqBq4)}
                role={"img"}
              />
            }
          >
            <Trans__>{"Settings"}</Trans__>
          </SidebarNavigationLabel>
          <SidebarNavigationLabel
            className={classNames(
              "__wab_instance",
              sty.sidebarNavigationLabel__u9Bcy,
              {
                [sty.sidebarNavigationLabelcollapsed__u9BcyiUi1M]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
            collapsed={
              hasVariant($state, "collapsed", "collapsed") ? true : undefined
            }
            pageLink={`/backups`}
            startIcon={
              <CloudPlusSvgIcon
                className={classNames(projectcss.all, sty.svg__dlWn)}
                role={"img"}
              />
            }
          >
            <Trans__>{"Backups"}</Trans__>
          </SidebarNavigationLabel>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"account"}
        data-plasmic-override={overrides.account}
        hasGap={true}
        className={classNames(projectcss.all, sty.account, {
          [sty.accountcollapsed]: hasVariant($state, "collapsed", "collapsed")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"avatarLabel"}
          data-plasmic-override={overrides.avatarLabel}
          hasGap={true}
          className={classNames(projectcss.all, sty.avatarLabel)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            loading={"lazy"}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"nameRolle"}
            data-plasmic-override={overrides.nameRolle}
            hasGap={true}
            className={classNames(projectcss.all, sty.nameRolle, {
              [sty.nameRollecollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__atUgn,
                {
                  [sty.textcollapsed__atUgNiUi1M]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                }
              )}
            >
              <Trans__>{"Jhone Smith"}</Trans__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xkK2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vRr3V
                )}
              >
                <Trans__>{"Admin"}</Trans__>
              </div>
            </div>
          </Stack__>
        </Stack__>
        <AntdTooltip
          data-plasmic-name={"tooltip"}
          data-plasmic-override={overrides.tooltip}
          className={classNames("__wab_instance", sty.tooltip)}
          titleText={"Open Profile"}
        >
          <Icon17Icon
            className={classNames(projectcss.all, sty.svg__c8Wep, {
              [sty.svgcollapsed__c8WepiUi1M]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            })}
            role={"img"}
          />
        </AntdTooltip>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sidebar: [
    "sidebar",
    "navigationHeader",
    "logo",
    "icons",
    "sidebarToggle",
    "textInput",
    "navigation",
    "badge17",
    "badgeNum",
    "subItem",
    "navigation2",
    "title",
    "navigation3",
    "title2",
    "badge18",
    "badgeNum2",
    "account",
    "avatarLabel",
    "img",
    "nameRolle",
    "tooltip"
  ],
  navigationHeader: ["navigationHeader", "logo", "icons", "sidebarToggle"],
  logo: ["logo"],
  icons: ["icons", "sidebarToggle"],
  sidebarToggle: ["sidebarToggle"],
  textInput: ["textInput"],
  navigation: ["navigation", "badge17", "badgeNum", "subItem"],
  badge17: ["badge17", "badgeNum"],
  badgeNum: ["badgeNum"],
  subItem: ["subItem"],
  navigation2: ["navigation2", "title"],
  title: ["title"],
  navigation3: ["navigation3", "title2", "badge18", "badgeNum2"],
  title2: ["title2"],
  badge18: ["badge18", "badgeNum2"],
  badgeNum2: ["badgeNum2"],
  account: ["account", "avatarLabel", "img", "nameRolle", "tooltip"],
  avatarLabel: ["avatarLabel", "img", "nameRolle"],
  img: ["img"],
  nameRolle: ["nameRolle"],
  tooltip: ["tooltip"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sidebar: "div";
  navigationHeader: "div";
  logo: typeof Logo;
  icons: "div";
  sidebarToggle: typeof SidebarToggle;
  textInput: typeof TextInput;
  navigation: "div";
  badge17: "div";
  badgeNum: "div";
  subItem: typeof SubItem;
  navigation2: "div";
  title: "div";
  navigation3: "div";
  title2: "div";
  badge18: "div";
  badgeNum2: "div";
  account: "div";
  avatarLabel: "div";
  img: typeof PlasmicImg__;
  nameRolle: "div";
  tooltip: typeof AntdTooltip;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSidebar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sidebar") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("sidebar"),
  {
    // Helper components rendering sub-elements
    navigationHeader: makeNodeComponent("navigationHeader"),
    logo: makeNodeComponent("logo"),
    icons: makeNodeComponent("icons"),
    sidebarToggle: makeNodeComponent("sidebarToggle"),
    textInput: makeNodeComponent("textInput"),
    navigation: makeNodeComponent("navigation"),
    badge17: makeNodeComponent("badge17"),
    badgeNum: makeNodeComponent("badgeNum"),
    subItem: makeNodeComponent("subItem"),
    navigation2: makeNodeComponent("navigation2"),
    title: makeNodeComponent("title"),
    navigation3: makeNodeComponent("navigation3"),
    title2: makeNodeComponent("title2"),
    badge18: makeNodeComponent("badge18"),
    badgeNum2: makeNodeComponent("badgeNum2"),
    account: makeNodeComponent("account"),
    avatarLabel: makeNodeComponent("avatarLabel"),
    img: makeNodeComponent("img"),
    nameRolle: makeNodeComponent("nameRolle"),
    tooltip: makeNodeComponent("tooltip"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
